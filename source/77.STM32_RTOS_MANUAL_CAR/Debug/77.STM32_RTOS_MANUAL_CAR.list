
77.STM32_RTOS_MANUAL_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a538  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800a6d8  0800a6d8  0001a6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8e4  0800a8e4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8e4  0800a8e4  0001a8e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8ec  0800a8ec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8ec  0800a8ec  0001a8ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8f0  0800a8f0  0001a8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800a8f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c4  2000007c  0800a970  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005340  0800a970  00025340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021ca9  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004876  00000000  00000000  00041d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb0  00000000  00000000  000465d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a00  00000000  00000000  00048180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fea  00000000  00000000  00049b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002012e  00000000  00000000  0004fb6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a325a  00000000  00000000  0006fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00112ef2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079e4  00000000  00000000  00112f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6c0 	.word	0x0800a6c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	0800a6c0 	.word	0x0800a6c0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <HAL_UART_RxCpltCallback>:
extern int dht11time;
// copy from HAL_UART_RxCpltCallback of stm32f4xx_hal_uart to here
// UART로 부터 1byte가 수신되면 H/W가 call을 해 준다.
// UART1 / UART2번으로 부터 1 byte가 수신(stop bit) 하면 rx interrupt가 발생
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{	
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)   // PC
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <HAL_UART_RxCpltCallback+0xbc>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d148      	bne.n	8000586 <HAL_UART_RxCpltCallback+0xa2>
	{
		if(is_full())
 80004f4:	f000 f864 	bl	80005c0 <is_full>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d13e      	bne.n	800057c <HAL_UART_RxCpltCallback+0x98>
		}
		else
		{
			unsigned char data;

			data = rx_data;
 80004fe:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <HAL_UART_RxCpltCallback+0xc0>)
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	73fb      	strb	r3, [r7, #15]

			if(data == '\n' || data == '\r')						// 문장의 끝을 만났을 때
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	2b0a      	cmp	r3, #10
 8000508:	d002      	beq.n	8000510 <HAL_UART_RxCpltCallback+0x2c>
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b0d      	cmp	r3, #13
 800050e:	d123      	bne.n	8000558 <HAL_UART_RxCpltCallback+0x74>
			{
				rx_buff[input_pointer][rx_index] = '\0';					// 문장의 끝일 때는 NULL을 집어넣는다.
 8000510:	4b25      	ldr	r3, [pc, #148]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000512:	681a      	ldr	r2, [r3, #0]
 8000514:	4b25      	ldr	r3, [pc, #148]	; (80005ac <HAL_UART_RxCpltCallback+0xc8>)
 8000516:	6819      	ldr	r1, [r3, #0]
 8000518:	4825      	ldr	r0, [pc, #148]	; (80005b0 <HAL_UART_RxCpltCallback+0xcc>)
 800051a:	4613      	mov	r3, r2
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	1a9b      	subs	r3, r3, r2
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	4403      	add	r3, r0
 8000524:	440b      	add	r3, r1
 8000526:	2200      	movs	r2, #0
 8000528:	701a      	strb	r2, [r3, #0]
				rx_index = 0;												// 개선점 : circular queue(환영큐)로 개선을 해야 한다.
 800052a:	4b20      	ldr	r3, [pc, #128]	; (80005ac <HAL_UART_RxCpltCallback+0xc8>)
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
				//printf("input_pointer = %d\n", input_pointer);
				input_pointer++;
 8000530:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a1c      	ldr	r2, [pc, #112]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000538:	6013      	str	r3, [r2, #0]
				input_pointer %= COMMAND_MAX;
 800053a:	4b1b      	ldr	r3, [pc, #108]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <HAL_UART_RxCpltCallback+0xd0>)
 8000540:	fb83 1302 	smull	r1, r3, r3, r2
 8000544:	1119      	asrs	r1, r3, #4
 8000546:	17d3      	asrs	r3, r2, #31
 8000548:	1acb      	subs	r3, r1, r3
 800054a:	2132      	movs	r1, #50	; 0x32
 800054c:	fb01 f303 	mul.w	r3, r1, r3
 8000550:	1ad3      	subs	r3, r2, r3
 8000552:	4a15      	ldr	r2, [pc, #84]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 8000554:	6013      	str	r3, [r2, #0]
 8000556:	e011      	b.n	800057c <HAL_UART_RxCpltCallback+0x98>
			}
			else											    // 문장이 끝나지 않았을 때
			{
				rx_buff[input_pointer][rx_index] = data;
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <HAL_UART_RxCpltCallback+0xc4>)
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	4b13      	ldr	r3, [pc, #76]	; (80005ac <HAL_UART_RxCpltCallback+0xc8>)
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <HAL_UART_RxCpltCallback+0xcc>)
 8000562:	4613      	mov	r3, r2
 8000564:	011b      	lsls	r3, r3, #4
 8000566:	1a9b      	subs	r3, r3, r2
 8000568:	005b      	lsls	r3, r3, #1
 800056a:	4403      	add	r3, r0
 800056c:	440b      	add	r3, r1
 800056e:	7bfa      	ldrb	r2, [r7, #15]
 8000570:	701a      	strb	r2, [r3, #0]
				rx_index++;
 8000572:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_UART_RxCpltCallback+0xc8>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	3301      	adds	r3, #1
 8000578:	4a0c      	ldr	r2, [pc, #48]	; (80005ac <HAL_UART_RxCpltCallback+0xc8>)
 800057a:	6013      	str	r3, [r2, #0]
			}
		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	4909      	ldr	r1, [pc, #36]	; (80005a4 <HAL_UART_RxCpltCallback+0xc0>)
 8000580:	4807      	ldr	r0, [pc, #28]	; (80005a0 <HAL_UART_RxCpltCallback+0xbc>)
 8000582:	f005 f96a 	bl	800585a <HAL_UART_Receive_IT>
	}
	if (huart == &huart1)   // BT
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <HAL_UART_RxCpltCallback+0xd4>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d104      	bne.n	8000598 <HAL_UART_RxCpltCallback+0xb4>
//				rx_buff[input_pointer][rx_index] = data;
//				rx_index++;
//			}
//		}
		// 주의: 반드시 HAL_UART_Receive_IT를 call 해주야 다음 INT가 발생
		HAL_UART_Receive_IT(&huart1, &bt_data, 1);
 800058e:	2201      	movs	r2, #1
 8000590:	490a      	ldr	r1, [pc, #40]	; (80005bc <HAL_UART_RxCpltCallback+0xd8>)
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <HAL_UART_RxCpltCallback+0xd4>)
 8000594:	f005 f961 	bl	800585a <HAL_UART_Receive_IT>
	}
}
 8000598:	bf00      	nop
 800059a:	3710      	adds	r7, #16
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000860 	.word	0x20000860
 80005a4:	2000067c 	.word	0x2000067c
 80005a8:	20000098 	.word	0x20000098
 80005ac:	20000680 	.word	0x20000680
 80005b0:	200000a0 	.word	0x200000a0
 80005b4:	51eb851f 	.word	0x51eb851f
 80005b8:	2000081c 	.word	0x2000081c
 80005bc:	2000067d 	.word	0x2000067d

080005c0 <is_full>:
	else
		return 0;
}

int is_full()		// 큐의 포화 상태를 알려주는 함수
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
	int temp;

	temp = (input_pointer + 1) % COMMAND_MAX;
 80005c6:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <is_full+0x40>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <is_full+0x44>)
 80005ce:	fb82 1203 	smull	r1, r2, r2, r3
 80005d2:	1111      	asrs	r1, r2, #4
 80005d4:	17da      	asrs	r2, r3, #31
 80005d6:	1a8a      	subs	r2, r1, r2
 80005d8:	2132      	movs	r1, #50	; 0x32
 80005da:	fb01 f202 	mul.w	r2, r1, r2
 80005de:	1a9b      	subs	r3, r3, r2
 80005e0:	607b      	str	r3, [r7, #4]
	if (temp == output_pointer)
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <is_full+0x48>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d101      	bne.n	80005f0 <is_full+0x30>
		return 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	e000      	b.n	80005f2 <is_full+0x32>
	else
		return 0;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000098 	.word	0x20000098
 8000604:	51eb851f 	.word	0x51eb851f
 8000608:	2000009c 	.word	0x2000009c

0800060c <get_button>:


// 1. GPIO 2. GPIO PIN 3. 이전의 버튼

int get_button( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t button_number)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	460b      	mov	r3, r1
 8000616:	807b      	strh	r3, [r7, #2]
 8000618:	4613      	mov	r3, r2
 800061a:	707b      	strb	r3, [r7, #1]
	unsigned char current_state;

	current_state = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f001 ff33 	bl	800248c <HAL_GPIO_ReadPin>
 8000626:	4603      	mov	r3, r0
 8000628:	73fb      	strb	r3, [r7, #15]

	if (current_state == BUTTON_PRESS && previous_button_status[button_number] == BUTTON_RELEASE)  // 처음 누른상태
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d10d      	bne.n	800064c <get_button+0x40>
 8000630:	787b      	ldrb	r3, [r7, #1]
 8000632:	4a10      	ldr	r2, [pc, #64]	; (8000674 <get_button+0x68>)
 8000634:	5cd3      	ldrb	r3, [r2, r3]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d108      	bne.n	800064c <get_button+0x40>
	{
		HAL_Delay(100);   // noise가 지나가기를 기다린다.
 800063a:	2064      	movs	r0, #100	; 0x64
 800063c:	f001 fc0a 	bl	8001e54 <HAL_Delay>
		previous_button_status[button_number] = current_state;
 8000640:	787b      	ldrb	r3, [r7, #1]
 8000642:	490c      	ldr	r1, [pc, #48]	; (8000674 <get_button+0x68>)
 8000644:	7bfa      	ldrb	r2, [r7, #15]
 8000646:	54ca      	strb	r2, [r1, r3]
		return BUTTON_RELEASE;    // 아직 버튼이 눌러 지지 않는것으로 처리 0을 리턴
 8000648:	2301      	movs	r3, #1
 800064a:	e00e      	b.n	800066a <get_button+0x5e>
	}
	else if (current_state == BUTTON_RELEASE && previous_button_status[button_number] == BUTTON_PRESS)
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	2b01      	cmp	r3, #1
 8000650:	d10a      	bne.n	8000668 <get_button+0x5c>
 8000652:	787b      	ldrb	r3, [r7, #1]
 8000654:	4a07      	ldr	r2, [pc, #28]	; (8000674 <get_button+0x68>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <get_button+0x5c>
	{
		previous_button_status[button_number] = BUTTON_RELEASE;   // 릴리즈 상태
 800065c:	787b      	ldrb	r3, [r7, #1]
 800065e:	4a05      	ldr	r2, [pc, #20]	; (8000674 <get_button+0x68>)
 8000660:	2101      	movs	r1, #1
 8000662:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 버튼이 완전히 눌렀다 뗀 상태로 판단 하고 1을 리턴 한다.
 8000664:	2300      	movs	r3, #0
 8000666:	e000      	b.n	800066a <get_button+0x5e>
	}

	return BUTTON_RELEASE;    // 버튼이 눌렀다 떼어진 상태가 아니다.
 8000668:	2301      	movs	r3, #1
}
 800066a:	4618      	mov	r0, r3
 800066c:	3710      	adds	r7, #16
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000000 	.word	0x20000000

08000678 <mode_check>:
    }

}

void mode_check()
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
	if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, BUTTON0) == BUTTON_PRESS)
 800067c:	2200      	movs	r2, #0
 800067e:	2102      	movs	r1, #2
 8000680:	481b      	ldr	r0, [pc, #108]	; (80006f0 <mode_check+0x78>)
 8000682:	f7ff ffc3 	bl	800060c <get_button>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d12e      	bne.n	80006ea <mode_check+0x72>
	{
		auto_mode_state = !auto_mode_state;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <mode_check+0x7c>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	2b00      	cmp	r3, #0
 8000692:	bf0c      	ite	eq
 8000694:	2301      	moveq	r3, #1
 8000696:	2300      	movne	r3, #0
 8000698:	b2db      	uxtb	r3, r3
 800069a:	461a      	mov	r2, r3
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <mode_check+0x7c>)
 800069e:	701a      	strb	r2, [r3, #0]

		if (osMutexWait(myMutex01Handle, 1000) == osOK) {
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <mode_check+0x80>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a8:	4618      	mov	r0, r3
 80006aa:	f006 fa30 	bl	8006b0e <osMutexAcquire>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d11a      	bne.n	80006ea <mode_check+0x72>
			move_cursor(0,0);
 80006b4:	2100      	movs	r1, #0
 80006b6:	2000      	movs	r0, #0
 80006b8:	f000 fa70 	bl	8000b9c <move_cursor>
			if (auto_mode_state)
 80006bc:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <mode_check+0x7c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d003      	beq.n	80006cc <mode_check+0x54>
			{
				lcd_string("AUTO Mode       ");
 80006c4:	480d      	ldr	r0, [pc, #52]	; (80006fc <mode_check+0x84>)
 80006c6:	f000 fa54 	bl	8000b72 <lcd_string>
 80006ca:	e002      	b.n	80006d2 <mode_check+0x5a>
			}
			else
			{
				lcd_string("Manual Mode    ");
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <mode_check+0x88>)
 80006ce:	f000 fa50 	bl	8000b72 <lcd_string>
			}
			move_cursor(1,0);
 80006d2:	2100      	movs	r1, #0
 80006d4:	2001      	movs	r0, #1
 80006d6:	f000 fa61 	bl	8000b9c <move_cursor>
			lcd_string("                ");
 80006da:	480a      	ldr	r0, [pc, #40]	; (8000704 <mode_check+0x8c>)
 80006dc:	f000 fa49 	bl	8000b72 <lcd_string>
			osMutexRelease(myMutex01Handle);
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <mode_check+0x80>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f006 fa5d 	bl	8006ba4 <osMutexRelease>
		}
	}
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020800 	.word	0x40020800
 80006f4:	20000684 	.word	0x20000684
 80006f8:	200008b4 	.word	0x200008b4
 80006fc:	0800a6d8 	.word	0x0800a6d8
 8000700:	0800a6ec 	.word	0x0800a6ec
 8000704:	0800a6fc 	.word	0x0800a6fc

08000708 <auto_drive>:

// 자율주행 프로그램을 이곳에 programming 한다.
void auto_drive(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <manual_mode_run>:

extern volatile uint8_t bt_data;   // 2. BT로 부터 1byte의 INT가 들어오면 저장 하는 변수

void manual_mode_run(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	if (osMutexWait(myMutex01Handle, 1000) == osOK) {
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <manual_mode_run+0xf8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000724:	4618      	mov	r0, r3
 8000726:	f006 f9f2 	bl	8006b0e <osMutexAcquire>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d12b      	bne.n	8000788 <manual_mode_run+0x70>
		move_cursor(1,0);
 8000730:	2100      	movs	r1, #0
 8000732:	2001      	movs	r0, #1
 8000734:	f000 fa32 	bl	8000b9c <move_cursor>
		if (bt_data == 'F')
 8000738:	4b36      	ldr	r3, [pc, #216]	; (8000814 <manual_mode_run+0xfc>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b46      	cmp	r3, #70	; 0x46
 8000740:	d103      	bne.n	800074a <manual_mode_run+0x32>
		{
			lcd_string("Forward    ");
 8000742:	4835      	ldr	r0, [pc, #212]	; (8000818 <manual_mode_run+0x100>)
 8000744:	f000 fa15 	bl	8000b72 <lcd_string>
 8000748:	e019      	b.n	800077e <manual_mode_run+0x66>
		}
		else if (bt_data == 'B')
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <manual_mode_run+0xfc>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b42      	cmp	r3, #66	; 0x42
 8000752:	d103      	bne.n	800075c <manual_mode_run+0x44>
		{
			lcd_string("Backward    ");
 8000754:	4831      	ldr	r0, [pc, #196]	; (800081c <manual_mode_run+0x104>)
 8000756:	f000 fa0c 	bl	8000b72 <lcd_string>
 800075a:	e010      	b.n	800077e <manual_mode_run+0x66>
		}
		else if (bt_data == 'L')
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <manual_mode_run+0xfc>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b4c      	cmp	r3, #76	; 0x4c
 8000764:	d103      	bne.n	800076e <manual_mode_run+0x56>
		{
			lcd_string("Turn Left    ");
 8000766:	482e      	ldr	r0, [pc, #184]	; (8000820 <manual_mode_run+0x108>)
 8000768:	f000 fa03 	bl	8000b72 <lcd_string>
 800076c:	e007      	b.n	800077e <manual_mode_run+0x66>
		}
		else if (bt_data == 'R')
 800076e:	4b29      	ldr	r3, [pc, #164]	; (8000814 <manual_mode_run+0xfc>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b52      	cmp	r3, #82	; 0x52
 8000776:	d102      	bne.n	800077e <manual_mode_run+0x66>
		{
			lcd_string("Turn Right   ");
 8000778:	482a      	ldr	r0, [pc, #168]	; (8000824 <manual_mode_run+0x10c>)
 800077a:	f000 f9fa 	bl	8000b72 <lcd_string>
		}
//		else
//		{
//			lcd_string("                ");
//		}
		osMutexRelease(myMutex01Handle);
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <manual_mode_run+0xf8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4618      	mov	r0, r3
 8000784:	f006 fa0e 	bl	8006ba4 <osMutexRelease>
	}


	switch(bt_data)
 8000788:	4b22      	ldr	r3, [pc, #136]	; (8000814 <manual_mode_run+0xfc>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	3b42      	subs	r3, #66	; 0x42
 8000790:	2b11      	cmp	r3, #17
 8000792:	d83a      	bhi.n	800080a <manual_mode_run+0xf2>
 8000794:	a201      	add	r2, pc, #4	; (adr r2, 800079c <manual_mode_run+0x84>)
 8000796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800079a:	bf00      	nop
 800079c:	080007ed 	.word	0x080007ed
 80007a0:	0800080b 	.word	0x0800080b
 80007a4:	0800080b 	.word	0x0800080b
 80007a8:	0800080b 	.word	0x0800080b
 80007ac:	080007e5 	.word	0x080007e5
 80007b0:	0800080b 	.word	0x0800080b
 80007b4:	0800080b 	.word	0x0800080b
 80007b8:	0800080b 	.word	0x0800080b
 80007bc:	0800080b 	.word	0x0800080b
 80007c0:	0800080b 	.word	0x0800080b
 80007c4:	080007f5 	.word	0x080007f5
 80007c8:	0800080b 	.word	0x0800080b
 80007cc:	0800080b 	.word	0x0800080b
 80007d0:	0800080b 	.word	0x0800080b
 80007d4:	0800080b 	.word	0x0800080b
 80007d8:	0800080b 	.word	0x0800080b
 80007dc:	080007fd 	.word	0x080007fd
 80007e0:	08000805 	.word	0x08000805
	{
		case 'F':
		forward(100);
 80007e4:	2064      	movs	r0, #100	; 0x64
 80007e6:	f000 f81f 	bl	8000828 <forward>
		break;
 80007ea:	e00f      	b.n	800080c <manual_mode_run+0xf4>
		case 'B':
		backward(100);
 80007ec:	2064      	movs	r0, #100	; 0x64
 80007ee:	f000 f837 	bl	8000860 <backward>
		break;
 80007f2:	e00b      	b.n	800080c <manual_mode_run+0xf4>
		case 'L':
		turn_left(100);
 80007f4:	2064      	movs	r0, #100	; 0x64
 80007f6:	f000 f84f 	bl	8000898 <turn_left>
		break;
 80007fa:	e007      	b.n	800080c <manual_mode_run+0xf4>
		case 'R':
		turn_right(100);
 80007fc:	2064      	movs	r0, #100	; 0x64
 80007fe:	f000 f85d 	bl	80008bc <turn_right>
		break;
 8000802:	e003      	b.n	800080c <manual_mode_run+0xf4>
		case 'S':
		stop();
 8000804:	f000 f86c 	bl	80008e0 <stop>
		break;
 8000808:	e000      	b.n	800080c <manual_mode_run+0xf4>
		default:
		break;
 800080a:	bf00      	nop
	}
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200008b4 	.word	0x200008b4
 8000814:	2000067d 	.word	0x2000067d
 8000818:	0800a710 	.word	0x0800a710
 800081c:	0800a71c 	.word	0x0800a71c
 8000820:	0800a72c 	.word	0x0800a72c
 8000824:	0800a73c 	.word	0x0800a73c

08000828 <forward>:

void forward(int speed)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	all_foward();
 8000830:	f000 f8d6 	bl	80009e0 <all_foward>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000834:	2100      	movs	r1, #0
 8000836:	4809      	ldr	r0, [pc, #36]	; (800085c <forward+0x34>)
 8000838:	f003 fbae 	bl	8003f98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);   // left speed
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <forward+0x34>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000844:	2104      	movs	r1, #4
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <forward+0x34>)
 8000848:	f003 fba6 	bl	8003f98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);   //  right speed
 800084c:	4b03      	ldr	r3, [pc, #12]	; (800085c <forward+0x34>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	2000078c 	.word	0x2000078c

08000860 <backward>:

void backward(int speed)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	all_backward();
 8000868:	f000 f8e4 	bl	8000a34 <all_backward>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800086c:	2100      	movs	r1, #0
 800086e:	4809      	ldr	r0, [pc, #36]	; (8000894 <backward+0x34>)
 8000870:	f003 fb92 	bl	8003f98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);   // left speed
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <backward+0x34>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800087c:	2104      	movs	r1, #4
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <backward+0x34>)
 8000880:	f003 fb8a 	bl	8003f98 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);   //  right speed
 8000884:	4b03      	ldr	r3, [pc, #12]	; (8000894 <backward+0x34>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	687a      	ldr	r2, [r7, #4]
 800088a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000078c 	.word	0x2000078c

08000898 <turn_left>:

void turn_left(int speed)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	all_foward();
 80008a0:	f000 f89e 	bl	80009e0 <all_foward>

	left_speed(speed);
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	b29b      	uxth	r3, r3
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 f837 	bl	800091c <left_speed>
	right_speed(0);   //  PWM 출력 right
 80008ae:	2000      	movs	r0, #0
 80008b0:	f000 f854 	bl	800095c <right_speed>
}
 80008b4:	bf00      	nop
 80008b6:	3708      	adds	r7, #8
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <turn_right>:

void turn_right(int speed)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	all_foward();
 80008c4:	f000 f88c 	bl	80009e0 <all_foward>

	left_speed(0); //  PWM 출력	  left
 80008c8:	2000      	movs	r0, #0
 80008ca:	f000 f827 	bl	800091c <left_speed>
	right_speed(speed);    //  PWM 출력 right
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f000 f842 	bl	800095c <right_speed>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <stop>:

void stop()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	all_stop();
 80008e4:	f000 f8bc 	bl	8000a60 <all_stop>

	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2140      	movs	r1, #64	; 0x40
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <stop+0x38>)
 80008ee:	f001 fde5 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <stop+0x38>)
 80008f8:	f001 fde0 	bl	80024bc <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <stop+0x38>)
 8000904:	f001 fdda 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800090e:	4802      	ldr	r0, [pc, #8]	; (8000918 <stop+0x38>)
 8000910:	f001 fdd4 	bl	80024bc <HAL_GPIO_WritePin>

}
 8000914:	bf00      	nop
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40020800 	.word	0x40020800

0800091c <left_speed>:


void left_speed(uint16_t speed)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	80fb      	strh	r3, [r7, #6]
	if (speed >= 100) speed = 100;
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	2b63      	cmp	r3, #99	; 0x63
 800092a:	d901      	bls.n	8000930 <left_speed+0x14>
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	80fb      	strh	r3, [r7, #6]
	else if (speed < 0) speed = 0;

	if (speed == 0)
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d104      	bne.n	8000940 <left_speed+0x24>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000936:	2100      	movs	r1, #0
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <left_speed+0x3c>)
 800093a:	f003 fbdd 	bl	80040f8 <HAL_TIM_PWM_Stop>
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
	}

}
 800093e:	e007      	b.n	8000950 <left_speed+0x34>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000940:	2100      	movs	r1, #0
 8000942:	4805      	ldr	r0, [pc, #20]	; (8000958 <left_speed+0x3c>)
 8000944:	f003 fb28 	bl	8003f98 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, speed);
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <left_speed+0x3c>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	88fa      	ldrh	r2, [r7, #6]
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	2000078c 	.word	0x2000078c

0800095c <right_speed>:

void right_speed(uint16_t speed)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	80fb      	strh	r3, [r7, #6]
	if (speed >= 100) speed = 100;
 8000966:	88fb      	ldrh	r3, [r7, #6]
 8000968:	2b63      	cmp	r3, #99	; 0x63
 800096a:	d901      	bls.n	8000970 <right_speed+0x14>
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	80fb      	strh	r3, [r7, #6]
	else if (speed < 0) speed = 0;

	if (speed == 0)
 8000970:	88fb      	ldrh	r3, [r7, #6]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d104      	bne.n	8000980 <right_speed+0x24>
	{
		HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000976:	2104      	movs	r1, #4
 8000978:	4807      	ldr	r0, [pc, #28]	; (8000998 <right_speed+0x3c>)
 800097a:	f003 fbbd 	bl	80040f8 <HAL_TIM_PWM_Stop>
	else
	{
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
	}
}
 800097e:	e007      	b.n	8000990 <right_speed+0x34>
		HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000980:	2104      	movs	r1, #4
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <right_speed+0x3c>)
 8000984:	f003 fb08 	bl	8003f98 <HAL_TIM_PWM_Start>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, speed);
 8000988:	4b03      	ldr	r3, [pc, #12]	; (8000998 <right_speed+0x3c>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	88fa      	ldrh	r2, [r7, #6]
 800098e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	2000078c 	.word	0x2000078c

0800099c <left_forward>:

void left_forward()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2140      	movs	r1, #64	; 0x40
 80009a4:	4804      	ldr	r0, [pc, #16]	; (80009b8 <left_forward+0x1c>)
 80009a6:	f001 fd89 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	2180      	movs	r1, #128	; 0x80
 80009ae:	4802      	ldr	r0, [pc, #8]	; (80009b8 <left_forward+0x1c>)
 80009b0:	f001 fd84 	bl	80024bc <HAL_GPIO_WritePin>
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40020800 	.word	0x40020800

080009bc <right_forward>:

void right_forward()
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <right_forward+0x20>)
 80009c8:	f001 fd78 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	4802      	ldr	r0, [pc, #8]	; (80009dc <right_forward+0x20>)
 80009d4:	f001 fd72 	bl	80024bc <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40020800 	.word	0x40020800

080009e0 <all_foward>:

void all_foward()
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	 left_forward();
 80009e4:	f7ff ffda 	bl	800099c <left_forward>
	 right_forward();
 80009e8:	f7ff ffe8 	bl	80009bc <right_forward>
}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <left_backward>:

void left_backward()
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LEFT_WHEEL_IN1_PORT, LEFT_WHEEL_IN1_PIN, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	2140      	movs	r1, #64	; 0x40
 80009f8:	4804      	ldr	r0, [pc, #16]	; (8000a0c <left_backward+0x1c>)
 80009fa:	f001 fd5f 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_WHEEL_IN2_PORT, LEFT_WHEEL_IN2_PIN, GPIO_PIN_SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	4802      	ldr	r0, [pc, #8]	; (8000a0c <left_backward+0x1c>)
 8000a04:	f001 fd5a 	bl	80024bc <HAL_GPIO_WritePin>

}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40020800 	.word	0x40020800

08000a10 <right_backward>:

void right_backward()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN3_PORT, RIGHT_WHEEL_IN3_PIN, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	4805      	ldr	r0, [pc, #20]	; (8000a30 <right_backward+0x20>)
 8000a1c:	f001 fd4e 	bl	80024bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RIGHT_WHEEL_IN4_PORT, RIGHT_WHEEL_IN4_PIN, GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a26:	4802      	ldr	r0, [pc, #8]	; (8000a30 <right_backward+0x20>)
 8000a28:	f001 fd48 	bl	80024bc <HAL_GPIO_WritePin>
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40020800 	.word	0x40020800

08000a34 <all_backward>:

void all_backward()
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	left_backward();
 8000a38:	f7ff ffda 	bl	80009f0 <left_backward>
	right_backward();
 8000a3c:	f7ff ffe8 	bl	8000a10 <right_backward>
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <left_stop>:

void left_stop()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	left_speed(0);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff67 	bl	800091c <left_speed>
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <right_stop>:

void right_stop()
{
 8000a52:	b580      	push	{r7, lr}
 8000a54:	af00      	add	r7, sp, #0
	right_speed(0);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ff80 	bl	800095c <right_speed>
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}

08000a60 <all_stop>:

void all_stop()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	 left_stop();
 8000a64:	f7ff ffee 	bl	8000a44 <left_stop>
	 right_stop();
 8000a68:	f7ff fff3 	bl	8000a52 <right_stop>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <lcd_command>:
		HAL_Delay(500);
	}
}

void lcd_command(uint8_t command)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	f023 030f 	bic.w	r3, r3, #15
 8000a80:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	011b      	lsls	r3, r3, #4
 8000a86:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000a88:	7bfb      	ldrb	r3, [r7, #15]
 8000a8a:	f043 030c 	orr.w	r3, r3, #12
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000a92:	7bfb      	ldrb	r3, [r7, #15]
 8000a94:	f043 0308 	orr.w	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000a9c:	7bbb      	ldrb	r3, [r7, #14]
 8000a9e:	f043 030c 	orr.w	r3, r3, #12
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000aa6:	7bbb      	ldrb	r3, [r7, #14]
 8000aa8:	f043 0308 	orr.w	r3, r3, #8
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000ab0:	bf00      	nop
 8000ab2:	f107 0208 	add.w	r2, r7, #8
 8000ab6:	2364      	movs	r3, #100	; 0x64
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2304      	movs	r3, #4
 8000abc:	214e      	movs	r1, #78	; 0x4e
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <lcd_command+0x64>)
 8000ac0:	f001 fe72 	bl	80027a8 <HAL_I2C_Master_Transmit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d1f3      	bne.n	8000ab2 <lcd_command+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000aca:	bf00      	nop
}
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000688 	.word	0x20000688

08000ad8 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b086      	sub	sp, #24
 8000adc:	af02      	add	r7, sp, #8
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f023 030f 	bic.w	r3, r3, #15
 8000ae8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	f043 030d 	orr.w	r3, r3, #13
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000afa:	7bfb      	ldrb	r3, [r7, #15]
 8000afc:	f043 0309 	orr.w	r3, r3, #9
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	f043 030d 	orr.w	r3, r3, #13
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000b0e:	7bbb      	ldrb	r3, [r7, #14]
 8000b10:	f043 0309 	orr.w	r3, r3, #9
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000b18:	bf00      	nop
 8000b1a:	f107 0208 	add.w	r2, r7, #8
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2304      	movs	r3, #4
 8000b24:	214e      	movs	r1, #78	; 0x4e
 8000b26:	4805      	ldr	r0, [pc, #20]	; (8000b3c <lcd_data+0x64>)
 8000b28:	f001 fe3e 	bl	80027a8 <HAL_I2C_Master_Transmit>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f3      	bne.n	8000b1a <lcd_data+0x42>
			i2c_buffer, 4, 100)!=HAL_OK){
		//HAL_Delay(1);
	}
	return;
 8000b32:	bf00      	nop
}
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	20000688 	.word	0x20000688

08000b40 <i2c_lcd_init>:
// lcd 초기화
void i2c_lcd_init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	lcd_command(0x33);
 8000b44:	2033      	movs	r0, #51	; 0x33
 8000b46:	f7ff ff93 	bl	8000a70 <lcd_command>
	lcd_command(0x32);
 8000b4a:	2032      	movs	r0, #50	; 0x32
 8000b4c:	f7ff ff90 	bl	8000a70 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000b50:	2028      	movs	r0, #40	; 0x28
 8000b52:	f7ff ff8d 	bl	8000a70 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000b56:	200c      	movs	r0, #12
 8000b58:	f7ff ff8a 	bl	8000a70 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000b5c:	2006      	movs	r0, #6
 8000b5e:	f7ff ff87 	bl	8000a70 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f7ff ff84 	bl	8000a70 <lcd_command>
	HAL_Delay(2);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f001 f973 	bl	8001e54 <HAL_Delay>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	while(*str)lcd_data(*str++);
 8000b7a:	e006      	b.n	8000b8a <lcd_string+0x18>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ffa7 	bl	8000ad8 <lcd_data>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d1f4      	bne.n	8000b7c <lcd_string+0xa>
}
 8000b92:	bf00      	nop
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	019b      	lsls	r3, r3, #6
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	79bb      	ldrb	r3, [r7, #6]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff56 	bl	8000a70 <lcd_command>
	return;
 8000bc4:	bf00      	nop
}
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <led_all_off>:
{
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);
}

void led_all_off()
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	21ff      	movs	r1, #255	; 0xff
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <led_all_off+0x14>)
 8000bd6:	f001 fc71 	bl	80024bc <HAL_GPIO_WritePin>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40020400 	.word	0x40020400

08000be4 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE   // Add for printf
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000bec:	1d39      	adds	r1, r7, #4
 8000bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4803      	ldr	r0, [pc, #12]	; (8000c04 <__io_putchar+0x20>)
 8000bf6:	f004 fd9e 	bl	8005736 <HAL_UART_Transmit>

  return ch;
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000860 	.word	0x20000860

08000c08 <HAL_GPIO_EXTI_Callback>:

// copy from Driver/STM32F4xx_HAL_Driver/stm32f4xx_hal_gpio.c to here
// every EXTERNAL INTERRUPT callBack function
int ext_int_no = -1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d002      	beq.n	8000c1e <HAL_GPIO_EXTI_Callback+0x16>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	d00b      	beq.n	8000c34 <HAL_GPIO_EXTI_Callback+0x2c>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 1, GPIO_PIN_SET);
//printf("EXT INT 1\n");
			ext_int_no = GPIO_PIN_1;
			break;
	}
}
 8000c1c:	e013      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x3e>
			led_all_off();
 8000c1e:	f7ff ffd5 	bl	8000bcc <led_all_off>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 0, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	2101      	movs	r1, #1
 8000c26:	480a      	ldr	r0, [pc, #40]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c28:	f001 fc48 	bl	80024bc <HAL_GPIO_WritePin>
			ext_int_no = GPIO_PIN_0;
 8000c2c:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	601a      	str	r2, [r3, #0]
			break;
 8000c32:	e008      	b.n	8000c46 <HAL_GPIO_EXTI_Callback+0x3e>
			HAL_GPIO_WritePin(GPIOB, 0x01 << 1, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2102      	movs	r1, #2
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <HAL_GPIO_EXTI_Callback+0x48>)
 8000c3a:	f001 fc3f 	bl	80024bc <HAL_GPIO_WritePin>
			ext_int_no = GPIO_PIN_1;
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	601a      	str	r2, [r3, #0]
			break;
 8000c44:	bf00      	nop
}
 8000c46:	bf00      	nop
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40020400 	.word	0x40020400
 8000c54:	20000004 	.word	0x20000004

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f001 f8b8 	bl	8001dd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f898 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 fb72 	bl	800134c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c68:	f000 fb46 	bl	80012f8 <MX_USART2_UART_Init>
  MX_TIM11_Init();
 8000c6c:	f000 faf6 	bl	800125c <MX_TIM11_Init>
  MX_TIM1_Init();
 8000c70:	f000 f98e 	bl	8000f90 <MX_TIM1_Init>
  MX_RTC_Init();
 8000c74:	f000 f932 	bl	8000edc <MX_RTC_Init>
  MX_I2C1_Init();
 8000c78:	f000 f902 	bl	8000e80 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c7c:	f000 fa14 	bl	80010a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c80:	f000 fa88 	bl	8001194 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c84:	f000 fb0e 	bl	80012a4 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000c88:	f000 f8ee 	bl	8000e68 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim11);   // add_SIKWON_0826 for TIM11 every 10ms
 8000c8c:	4829      	ldr	r0, [pc, #164]	; (8000d34 <main+0xdc>)
 8000c8e:	f003 f8d1 	bl	8003e34 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);  // add_SIKWON_0826 for us_delay, ultrasonic
 8000c92:	2100      	movs	r1, #0
 8000c94:	4828      	ldr	r0, [pc, #160]	; (8000d38 <main+0xe0>)
 8000c96:	f003 fbeb 	bl	8004470 <HAL_TIM_IC_Start_IT>
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);  // PC UART enable
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4927      	ldr	r1, [pc, #156]	; (8000d3c <main+0xe4>)
 8000c9e:	4828      	ldr	r0, [pc, #160]	; (8000d40 <main+0xe8>)
 8000ca0:	f004 fddb 	bl	800585a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &bt_data, 1);  // BT enable
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4927      	ldr	r1, [pc, #156]	; (8000d44 <main+0xec>)
 8000ca8:	4827      	ldr	r0, [pc, #156]	; (8000d48 <main+0xf0>)
 8000caa:	f004 fdd6 	bl	800585a <HAL_UART_Receive_IT>
  // 주의: PC?? BT�??? ?��?��?�� ?��?��?��?��?�� rx_data�??? 별도?�� �????���??? �????�� ?��?�� �???�??? ?��?��
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_3);   // PWM control for servo motor
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4826      	ldr	r0, [pc, #152]	; (8000d4c <main+0xf4>)
 8000cb2:	f003 fa85 	bl	80041c0 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);   // TIM3 CH1 : DC motor PWM ch PA6
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4825      	ldr	r0, [pc, #148]	; (8000d50 <main+0xf8>)
 8000cba:	f003 f96d 	bl	8003f98 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);   // TIM3 CH2 : DC motor PWM ch PA7
 8000cbe:	2104      	movs	r1, #4
 8000cc0:	4823      	ldr	r0, [pc, #140]	; (8000d50 <main+0xf8>)
 8000cc2:	f003 f969 	bl	8003f98 <HAL_TIM_PWM_Start>

  i2c_lcd_init();
 8000cc6:	f7ff ff3b 	bl	8000b40 <i2c_lcd_init>
  printf("Hello---STM32!!!\n");
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <main+0xfc>)
 8000ccc:	f009 f98a 	bl	8009fe4 <puts>
//  stepmotor_main_test();
//  buzzer_main();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cd0:	f005 fda0 	bl	8006814 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000cd4:	4820      	ldr	r0, [pc, #128]	; (8000d58 <main+0x100>)
 8000cd6:	f005 fe94 	bl	8006a02 <osMutexNew>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <main+0x104>)
 8000cde:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ce0:	4a1f      	ldr	r2, [pc, #124]	; (8000d60 <main+0x108>)
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	481f      	ldr	r0, [pc, #124]	; (8000d64 <main+0x10c>)
 8000ce6:	f005 fddf 	bl	80068a8 <osThreadNew>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <main+0x110>)
 8000cee:	6013      	str	r3, [r2, #0]

  /* creation of AutoModeTask */
  AutoModeTaskHandle = osThreadNew(StartAutoModeTask, NULL, &AutoModeTask_attributes);
 8000cf0:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <main+0x114>)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	481e      	ldr	r0, [pc, #120]	; (8000d70 <main+0x118>)
 8000cf6:	f005 fdd7 	bl	80068a8 <osThreadNew>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	4a1d      	ldr	r2, [pc, #116]	; (8000d74 <main+0x11c>)
 8000cfe:	6013      	str	r3, [r2, #0]

  /* creation of ManualModeTask */
  ManualModeTaskHandle = osThreadNew(StartManualModeTask, NULL, &ManualModeTask_attributes);
 8000d00:	4a1d      	ldr	r2, [pc, #116]	; (8000d78 <main+0x120>)
 8000d02:	2100      	movs	r1, #0
 8000d04:	481d      	ldr	r0, [pc, #116]	; (8000d7c <main+0x124>)
 8000d06:	f005 fdcf 	bl	80068a8 <osThreadNew>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4a1c      	ldr	r2, [pc, #112]	; (8000d80 <main+0x128>)
 8000d0e:	6013      	str	r3, [r2, #0]

  /* creation of MonitorTask */
  MonitorTaskHandle = osThreadNew(StartMonitorTask, NULL, &MonitorTask_attributes);
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <main+0x12c>)
 8000d12:	2100      	movs	r1, #0
 8000d14:	481c      	ldr	r0, [pc, #112]	; (8000d88 <main+0x130>)
 8000d16:	f005 fdc7 	bl	80068a8 <osThreadNew>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	4a1b      	ldr	r2, [pc, #108]	; (8000d8c <main+0x134>)
 8000d1e:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
	move_cursor(0,0);
 8000d20:	2100      	movs	r1, #0
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff ff3a 	bl	8000b9c <move_cursor>
	lcd_string("Manul Mode");
 8000d28:	4819      	ldr	r0, [pc, #100]	; (8000d90 <main+0x138>)
 8000d2a:	f7ff ff22 	bl	8000b72 <lcd_string>
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2e:	f005 fd95 	bl	800685c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <main+0xda>
 8000d34:	200007d4 	.word	0x200007d4
 8000d38:	200006fc 	.word	0x200006fc
 8000d3c:	2000067c 	.word	0x2000067c
 8000d40:	20000860 	.word	0x20000860
 8000d44:	2000067d 	.word	0x2000067d
 8000d48:	2000081c 	.word	0x2000081c
 8000d4c:	20000744 	.word	0x20000744
 8000d50:	2000078c 	.word	0x2000078c
 8000d54:	0800a790 	.word	0x0800a790
 8000d58:	0800a858 	.word	0x0800a858
 8000d5c:	200008b4 	.word	0x200008b4
 8000d60:	0800a7c8 	.word	0x0800a7c8
 8000d64:	0800148d 	.word	0x0800148d
 8000d68:	200008a4 	.word	0x200008a4
 8000d6c:	0800a7ec 	.word	0x0800a7ec
 8000d70:	0800149d 	.word	0x0800149d
 8000d74:	200008a8 	.word	0x200008a8
 8000d78:	0800a810 	.word	0x0800a810
 8000d7c:	080014b1 	.word	0x080014b1
 8000d80:	200008ac 	.word	0x200008ac
 8000d84:	0800a834 	.word	0x0800a834
 8000d88:	080014c5 	.word	0x080014c5
 8000d8c:	200008b0 	.word	0x200008b0
 8000d90:	0800a7a4 	.word	0x0800a7a4

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	2230      	movs	r2, #48	; 0x30
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f009 f813 	bl	8009dce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc0:	4a27      	ldr	r2, [pc, #156]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc8:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <SystemClock_Config+0xcc>)
 8000dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a21      	ldr	r2, [pc, #132]	; (8000e64 <SystemClock_Config+0xd0>)
 8000dde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000de2:	6013      	str	r3, [r2, #0]
 8000de4:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <SystemClock_Config+0xd0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dec:	607b      	str	r3, [r7, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000df0:	230a      	movs	r3, #10
 8000df2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df4:	2301      	movs	r3, #1
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e04:	2300      	movs	r3, #0
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e08:	2308      	movs	r3, #8
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000e0c:	2354      	movs	r3, #84	; 0x54
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e14:	2304      	movs	r3, #4
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0320 	add.w	r3, r7, #32
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 ffcb 	bl	8002db8 <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e28:	f000 fb84 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2302      	movs	r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2102      	movs	r1, #2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fa2d 	bl	80032a8 <HAL_RCC_ClockConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e54:	f000 fb6e 	bl	8001534 <Error_Handler>
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3750      	adds	r7, #80	; 0x50
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* TIM1_TRG_COM_TIM11_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2105      	movs	r1, #5
 8000e70:	201a      	movs	r0, #26
 8000e72:	f001 f8cb 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000e76:	201a      	movs	r0, #26
 8000e78:	f001 f8e4 	bl	8002044 <HAL_NVIC_EnableIRQ>
}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e86:	4a13      	ldr	r2, [pc, #76]	; (8000ed4 <MX_I2C1_Init+0x54>)
 8000e88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e8c:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x58>)
 8000e8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000e9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ea2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_I2C1_Init+0x50>)
 8000ebe:	f001 fb2f 	bl	8002520 <HAL_I2C_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ec8:	f000 fb34 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000688 	.word	0x20000688
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	000186a0 	.word	0x000186a0

08000edc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef4:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <MX_RTC_Init+0xac>)
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <MX_RTC_Init+0xb0>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efa:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_RTC_Init+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f00:	4b21      	ldr	r3, [pc, #132]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f02:	227f      	movs	r2, #127	; 0x7f
 8000f04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f06:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f18:	4b1b      	ldr	r3, [pc, #108]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f1e:	481a      	ldr	r0, [pc, #104]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f20:	f002 fd04 	bl	800392c <HAL_RTC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 fb03 	bl	8001534 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x9;
 8000f2e:	2309      	movs	r3, #9
 8000f30:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x31;
 8000f32:	2331      	movs	r3, #49	; 0x31
 8000f34:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	4619      	mov	r1, r3
 8000f48:	480f      	ldr	r0, [pc, #60]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f4a:	f002 fd65 	bl	8003a18 <HAL_RTC_SetTime>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000f54:	f000 faee 	bl	8001534 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8000f5c:	2308      	movs	r3, #8
 8000f5e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x30;
 8000f60:	2330      	movs	r3, #48	; 0x30
 8000f62:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x22;
 8000f64:	2322      	movs	r3, #34	; 0x22
 8000f66:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <MX_RTC_Init+0xac>)
 8000f70:	f002 fdec 	bl	8003b4c <HAL_RTC_SetDate>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000f7a:	f000 fadb 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200006dc 	.word	0x200006dc
 8000f8c:	40002800 	.word	0x40002800

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0318 	add.w	r3, r7, #24
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000fae:	463b      	mov	r3, r7
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fba:	4b39      	ldr	r3, [pc, #228]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fbc:	4a39      	ldr	r2, [pc, #228]	; (80010a4 <MX_TIM1_Init+0x114>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000fc0:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fc2:	2253      	movs	r2, #83	; 0x53
 8000fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fcc:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe6:	482e      	ldr	r0, [pc, #184]	; (80010a0 <MX_TIM1_Init+0x110>)
 8000fe8:	f002 fed5 	bl	8003d96 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8000ff2:	f000 fa9f 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0318 	add.w	r3, r7, #24
 8001000:	4619      	mov	r1, r3
 8001002:	4827      	ldr	r0, [pc, #156]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001004:	f003 fdb4 	bl	8004b70 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800100e:	f000 fa91 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001012:	4823      	ldr	r0, [pc, #140]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001014:	f003 f9d2 	bl	80043bc <HAL_TIM_IC_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800101e:	f000 fa89 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102a:	f107 0310 	add.w	r3, r7, #16
 800102e:	4619      	mov	r1, r3
 8001030:	481b      	ldr	r0, [pc, #108]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001032:	f004 fab1 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800103c:	f000 fa7a 	bl	8001534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001040:	230a      	movs	r3, #10
 8001042:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001044:	2301      	movs	r3, #1
 8001046:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001050:	463b      	mov	r3, r7
 8001052:	2200      	movs	r2, #0
 8001054:	4619      	mov	r1, r3
 8001056:	4812      	ldr	r0, [pc, #72]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001058:	f003 fc2c 	bl	80048b4 <HAL_TIM_IC_ConfigChannel>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001062:	f000 fa67 	bl	8001534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	2204      	movs	r2, #4
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001072:	f003 fc1f 	bl	80048b4 <HAL_TIM_IC_ConfigChannel>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800107c:	f000 fa5a 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001080:	463b      	mov	r3, r7
 8001082:	220c      	movs	r2, #12
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_TIM1_Init+0x110>)
 8001088:	f003 fc14 	bl	80048b4 <HAL_TIM_IC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001092:	f000 fa4f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3728      	adds	r7, #40	; 0x28
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200006fc 	.word	0x200006fc
 80010a4:	40010000 	.word	0x40010000

080010a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010bc:	f107 0320 	add.w	r3, r7, #32
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c6:	1d3b      	adds	r3, r7, #4
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1680-1;
 80010e0:	4b2b      	ldr	r3, [pc, #172]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010e2:	f240 628f 	movw	r2, #1679	; 0x68f
 80010e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b29      	ldr	r3, [pc, #164]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010ee:	4b28      	ldr	r3, [pc, #160]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f6:	4b26      	ldr	r3, [pc, #152]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <MX_TIM2_Init+0xe8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001102:	4823      	ldr	r0, [pc, #140]	; (8001190 <MX_TIM2_Init+0xe8>)
 8001104:	f002 fe47 	bl	8003d96 <HAL_TIM_Base_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800110e:	f000 fa11 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111c:	4619      	mov	r1, r3
 800111e:	481c      	ldr	r0, [pc, #112]	; (8001190 <MX_TIM2_Init+0xe8>)
 8001120:	f003 fd26 	bl	8004b70 <HAL_TIM_ConfigClockSource>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800112a:	f000 fa03 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800112e:	4818      	ldr	r0, [pc, #96]	; (8001190 <MX_TIM2_Init+0xe8>)
 8001130:	f002 fee2 	bl	8003ef8 <HAL_TIM_PWM_Init>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800113a:	f000 f9fb 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4619      	mov	r1, r3
 800114c:	4810      	ldr	r0, [pc, #64]	; (8001190 <MX_TIM2_Init+0xe8>)
 800114e:	f004 fa23 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001158:	f000 f9ec 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115c:	2360      	movs	r3, #96	; 0x60
 800115e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2208      	movs	r2, #8
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <MX_TIM2_Init+0xe8>)
 8001174:	f003 fc3a 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800117e:	f000 f9d9 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001182:	4803      	ldr	r0, [pc, #12]	; (8001190 <MX_TIM2_Init+0xe8>)
 8001184:	f000 fb36 	bl	80017f4 <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3738      	adds	r7, #56	; 0x38
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000744 	.word	0x20000744

08001194 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
 80011b0:	611a      	str	r2, [r3, #16]
 80011b2:	615a      	str	r2, [r3, #20]
 80011b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011b8:	4a27      	ldr	r2, [pc, #156]	; (8001258 <MX_TIM3_Init+0xc4>)
 80011ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011be:	f240 3247 	movw	r2, #839	; 0x347
 80011c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c4:	4b23      	ldr	r3, [pc, #140]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011cc:	2263      	movs	r2, #99	; 0x63
 80011ce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011de:	f002 fe8b 	bl	8003ef8 <HAL_TIM_PWM_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80011e8:	f000 f9a4 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f0:	2300      	movs	r3, #0
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4619      	mov	r1, r3
 80011fa:	4816      	ldr	r0, [pc, #88]	; (8001254 <MX_TIM3_Init+0xc0>)
 80011fc:	f004 f9cc 	bl	8005598 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001206:	f000 f995 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800120a:	2360      	movs	r3, #96	; 0x60
 800120c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 70-1;
 800120e:	2345      	movs	r3, #69	; 0x45
 8001210:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001216:	2304      	movs	r3, #4
 8001218:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2200      	movs	r2, #0
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001222:	f003 fbe3 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 800122c:	f000 f982 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2204      	movs	r2, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001238:	f003 fbd8 	bl	80049ec <HAL_TIM_PWM_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001242:	f000 f977 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001246:	4803      	ldr	r0, [pc, #12]	; (8001254 <MX_TIM3_Init+0xc0>)
 8001248:	f000 fad4 	bl	80017f4 <HAL_TIM_MspPostInit>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	2000078c 	.word	0x2000078c
 8001258:	40000400 	.word	0x40000400

0800125c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_TIM11_Init+0x40>)
 8001262:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <MX_TIM11_Init+0x44>)
 8001264:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 84-1;
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <MX_TIM11_Init+0x40>)
 8001268:	2253      	movs	r2, #83	; 0x53
 800126a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_TIM11_Init+0x40>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10000-1;
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <MX_TIM11_Init+0x40>)
 8001274:	f242 720f 	movw	r2, #9999	; 0x270f
 8001278:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_TIM11_Init+0x40>)
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_TIM11_Init+0x40>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_TIM11_Init+0x40>)
 8001288:	f002 fd85 	bl	8003d96 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001292:	f000 f94f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200007d4 	.word	0x200007d4
 80012a0:	40014800 	.word	0x40014800

080012a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012aa:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_USART1_UART_Init+0x50>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80012ae:	4b10      	ldr	r3, [pc, #64]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b09      	ldr	r3, [pc, #36]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b08      	ldr	r3, [pc, #32]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <MX_USART1_UART_Init+0x4c>)
 80012dc:	f004 f9de 	bl	800569c <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e6:	f000 f925 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	2000081c 	.word	0x2000081c
 80012f4:	40011000 	.word	0x40011000

080012f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012fc:	4b11      	ldr	r3, [pc, #68]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <MX_USART2_UART_Init+0x50>)
 8001300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001302:	4b10      	ldr	r3, [pc, #64]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001304:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001310:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800131e:	220c      	movs	r2, #12
 8001320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 800132a:	2200      	movs	r2, #0
 800132c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	; (8001344 <MX_USART2_UART_Init+0x4c>)
 8001330:	f004 f9b4 	bl	800569c <HAL_UART_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800133a:	f000 f8fb 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000860 	.word	0x20000860
 8001348:	40004400 	.word	0x40004400

0800134c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
 8001366:	4b45      	ldr	r3, [pc, #276]	; (800147c <MX_GPIO_Init+0x130>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a44      	ldr	r2, [pc, #272]	; (800147c <MX_GPIO_Init+0x130>)
 800136c:	f043 0304 	orr.w	r3, r3, #4
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b42      	ldr	r3, [pc, #264]	; (800147c <MX_GPIO_Init+0x130>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0304 	and.w	r3, r3, #4
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <MX_GPIO_Init+0x130>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a3d      	ldr	r2, [pc, #244]	; (800147c <MX_GPIO_Init+0x130>)
 8001388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b3b      	ldr	r3, [pc, #236]	; (800147c <MX_GPIO_Init+0x130>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60bb      	str	r3, [r7, #8]
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <MX_GPIO_Init+0x130>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a36      	ldr	r2, [pc, #216]	; (800147c <MX_GPIO_Init+0x130>)
 80013a4:	f043 0301 	orr.w	r3, r3, #1
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <MX_GPIO_Init+0x130>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
 80013ba:	4b30      	ldr	r3, [pc, #192]	; (800147c <MX_GPIO_Init+0x130>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a2f      	ldr	r2, [pc, #188]	; (800147c <MX_GPIO_Init+0x130>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b2d      	ldr	r3, [pc, #180]	; (800147c <MX_GPIO_Init+0x130>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RIGHT_TRIG_Pin|LEFT_TRIG_Pin|CENTER_TRIG_Pin|IN1_Pin
 80013d2:	2200      	movs	r2, #0
 80013d4:	f242 31f0 	movw	r1, #9200	; 0x23f0
 80013d8:	4829      	ldr	r0, [pc, #164]	; (8001480 <MX_GPIO_Init+0x134>)
 80013da:	f001 f86f 	bl	80024bc <HAL_GPIO_WritePin>
                          |IN2_Pin|IN3_Pin|IN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 80013de:	2200      	movs	r2, #0
 80013e0:	21ff      	movs	r1, #255	; 0xff
 80013e2:	4828      	ldr	r0, [pc, #160]	; (8001484 <MX_GPIO_Init+0x138>)
 80013e4:	f001 f86a 	bl	80024bc <HAL_GPIO_WritePin>
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RIGHT_TRIG_Pin LEFT_TRIG_Pin CENTER_TRIG_Pin IN1_Pin
                           IN2_Pin IN3_Pin IN4_Pin */
  GPIO_InitStruct.Pin = RIGHT_TRIG_Pin|LEFT_TRIG_Pin|CENTER_TRIG_Pin|IN1_Pin
 80013e8:	f242 33f0 	movw	r3, #9200	; 0x23f0
 80013ec:	617b      	str	r3, [r7, #20]
                          |IN2_Pin|IN3_Pin|IN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ee:	2301      	movs	r3, #1
 80013f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fa:	f107 0314 	add.w	r3, r7, #20
 80013fe:	4619      	mov	r1, r3
 8001400:	481f      	ldr	r0, [pc, #124]	; (8001480 <MX_GPIO_Init+0x134>)
 8001402:	f000 febf 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8001406:	230f      	movs	r3, #15
 8001408:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	4819      	ldr	r0, [pc, #100]	; (8001480 <MX_GPIO_Init+0x134>)
 800141a:	f000 feb3 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800141e:	2303      	movs	r3, #3
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <MX_GPIO_Init+0x13c>)
 8001434:	f000 fea6 	bl	8002184 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin PB2 LED3_Pin
                           LED4_Pin LED5_Pin LED6_Pin LED7_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|GPIO_PIN_2|LED3_Pin
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	617b      	str	r3, [r7, #20]
                          |LED4_Pin|LED5_Pin|LED6_Pin|LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	480d      	ldr	r0, [pc, #52]	; (8001484 <MX_GPIO_Init+0x138>)
 8001450:	f000 fe98 	bl	8002184 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2105      	movs	r1, #5
 8001458:	2006      	movs	r0, #6
 800145a:	f000 fdd7 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800145e:	2006      	movs	r0, #6
 8001460:	f000 fdf0 	bl	8002044 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2105      	movs	r1, #5
 8001468:	2007      	movs	r0, #7
 800146a:	f000 fdcf 	bl	800200c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800146e:	2007      	movs	r0, #7
 8001470:	f000 fde8 	bl	8002044 <HAL_NVIC_EnableIRQ>

}
 8001474:	bf00      	nop
 8001476:	3728      	adds	r7, #40	; 0x28
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40023800 	.word	0x40023800
 8001480:	40020800 	.word	0x40020800
 8001484:	40020400 	.word	0x40020400
 8001488:	40020000 	.word	0x40020000

0800148c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001494:	2001      	movs	r0, #1
 8001496:	f005 fa99 	bl	80069cc <osDelay>
 800149a:	e7fb      	b.n	8001494 <StartDefaultTask+0x8>

0800149c <StartAutoModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAutoModeTask */
void StartAutoModeTask(void *argument)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAutoModeTask */
  /* Infinite loop */
  for(;;)
  {
	auto_drive();
 80014a4:	f7ff f930 	bl	8000708 <auto_drive>
    osDelay(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f005 fa8f 	bl	80069cc <osDelay>
	auto_drive();
 80014ae:	e7f9      	b.n	80014a4 <StartAutoModeTask+0x8>

080014b0 <StartManualModeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartManualModeTask */
void StartManualModeTask(void *argument)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartManualModeTask */
  /* Infinite loop */
  for(;;)
  {
	manual_mode_run();
 80014b8:	f7ff f92e 	bl	8000718 <manual_mode_run>
    osDelay(1);
 80014bc:	2001      	movs	r0, #1
 80014be:	f005 fa85 	bl	80069cc <osDelay>
  {
 80014c2:	e7f9      	b.n	80014b8 <StartManualModeTask+0x8>

080014c4 <StartMonitorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMonitorTask */
void StartMonitorTask(void *argument)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMonitorTask */
  /* Infinite loop */
  for(;;)
  {
		mode_check();         // button1 check
 80014cc:	f7ff f8d4 	bl	8000678 <mode_check>
		osDelay(1);
 80014d0:	2001      	movs	r0, #1
 80014d2:	f005 fa7b 	bl	80069cc <osDelay>
		mode_check();         // button1 check
 80014d6:	e7f9      	b.n	80014cc <StartMonitorTask+0x8>

080014d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if (htim->Instance == TIM11)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d10e      	bne.n	8001508 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		TIM11_10ms_counter++;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	3301      	adds	r3, #1
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014f2:	6013      	str	r3, [r2, #0]
		TIM11_10ms_ultrasonic_counter++;
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	3301      	adds	r3, #1
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014fc:	6013      	str	r3, [r2, #0]
		TIM11_10ms_servomotor_counter++;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	3301      	adds	r3, #1
 8001504:	4a09      	ldr	r2, [pc, #36]	; (800152c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001506:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x3e>
    HAL_IncTick();
 8001512:	f000 fc7f 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40014800 	.word	0x40014800
 8001524:	200008b8 	.word	0x200008b8
 8001528:	200008bc 	.word	0x200008bc
 800152c:	200008c0 	.word	0x200008c0
 8001530:	40014400 	.word	0x40014400

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	607b      	str	r3, [r7, #4]
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x54>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_MspInit+0x54>)
 8001550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001554:	6453      	str	r3, [r2, #68]	; 0x44
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x54>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	2300      	movs	r3, #0
 8001564:	603b      	str	r3, [r7, #0]
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <HAL_MspInit+0x54>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <HAL_MspInit+0x54>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	6413      	str	r3, [r2, #64]	; 0x40
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <HAL_MspInit+0x54>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157a:	603b      	str	r3, [r7, #0]
 800157c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800157e:	2200      	movs	r2, #0
 8001580:	210f      	movs	r1, #15
 8001582:	f06f 0001 	mvn.w	r0, #1
 8001586:	f000 fd41 	bl	800200c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_I2C_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015dc:	2312      	movs	r3, #18
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e8:	2304      	movs	r3, #4
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_I2C_MspInit+0x8c>)
 80015f4:	f000 fdc6 	bl	8002184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_I2C_MspInit+0x88>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_I2C_MspInit+0x88>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005400 	.word	0x40005400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400

08001628 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0c      	ldr	r2, [pc, #48]	; (8001678 <HAL_RTC_MspInit+0x50>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d111      	bne.n	8001670 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800164c:	2302      	movs	r3, #2
 800164e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001654:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001656:	f107 0308 	add.w	r3, r7, #8
 800165a:	4618      	mov	r0, r3
 800165c:	f002 f876 	bl	800374c <HAL_RCCEx_PeriphCLKConfig>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001666:	f7ff ff65 	bl	8001534 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800166a:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_RTC_MspInit+0x54>)
 800166c:	2201      	movs	r2, #1
 800166e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001670:	bf00      	nop
 8001672:	3720      	adds	r7, #32
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40002800 	.word	0x40002800
 800167c:	42470e3c 	.word	0x42470e3c

08001680 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08c      	sub	sp, #48	; 0x30
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	60da      	str	r2, [r3, #12]
 8001696:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a3d      	ldr	r2, [pc, #244]	; (8001794 <HAL_TIM_Base_MspInit+0x114>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d145      	bne.n	800172e <HAL_TIM_Base_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a34      	ldr	r2, [pc, #208]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LEFT_ECHO_Pin|CENTER_ECHO_Pin|RIGHT_ECHO_Pin;
 80016da:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016ec:	2301      	movs	r3, #1
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	4829      	ldr	r0, [pc, #164]	; (800179c <HAL_TIM_Base_MspInit+0x11c>)
 80016f8:	f000 fd44 	bl	8002184 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2105      	movs	r1, #5
 8001700:	2018      	movs	r0, #24
 8001702:	f000 fc83 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001706:	2018      	movs	r0, #24
 8001708:	f000 fc9c 	bl	8002044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	210f      	movs	r1, #15
 8001710:	2019      	movs	r0, #25
 8001712:	f000 fc7b 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001716:	2019      	movs	r0, #25
 8001718:	f000 fc94 	bl	8002044 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	2105      	movs	r1, #5
 8001720:	201b      	movs	r0, #27
 8001722:	f000 fc73 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001726:	201b      	movs	r0, #27
 8001728:	f000 fc8c 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800172c:	e02e      	b.n	800178c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM2)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001736:	d116      	bne.n	8001766 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001740:	4a15      	ldr	r2, [pc, #84]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	6413      	str	r3, [r2, #64]	; 0x40
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2105      	movs	r1, #5
 8001758:	201c      	movs	r0, #28
 800175a:	f000 fc57 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175e:	201c      	movs	r0, #28
 8001760:	f000 fc70 	bl	8002044 <HAL_NVIC_EnableIRQ>
}
 8001764:	e012      	b.n	800178c <HAL_TIM_Base_MspInit+0x10c>
  else if(htim_base->Instance==TIM11)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_TIM_Base_MspInit+0x120>)
 800176c:	4293      	cmp	r3, r2
 800176e:	d10d      	bne.n	800178c <HAL_TIM_Base_MspInit+0x10c>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 800177a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177e:	6453      	str	r3, [r2, #68]	; 0x44
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <HAL_TIM_Base_MspInit+0x118>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	bf00      	nop
 800178e:	3730      	adds	r7, #48	; 0x30
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40010000 	.word	0x40010000
 8001798:	40023800 	.word	0x40023800
 800179c:	40020000 	.word	0x40020000
 80017a0:	40014800 	.word	0x40014800

080017a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_TIM_PWM_MspInit+0x48>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d115      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6413      	str	r3, [r2, #64]	; 0x40
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <HAL_TIM_PWM_MspInit+0x4c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2105      	movs	r1, #5
 80017d6:	201d      	movs	r0, #29
 80017d8:	f000 fc18 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80017dc:	201d      	movs	r0, #29
 80017de:	f000 fc31 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40000400 	.word	0x40000400
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001814:	d11f      	bne.n	8001856 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b22      	ldr	r3, [pc, #136]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a21      	ldr	r2, [pc, #132]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001844:	2301      	movs	r3, #1
 8001846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001848:	f107 0314 	add.w	r3, r7, #20
 800184c:	4619      	mov	r1, r3
 800184e:	4816      	ldr	r0, [pc, #88]	; (80018a8 <HAL_TIM_MspPostInit+0xb4>)
 8001850:	f000 fc98 	bl	8002184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001854:	e022      	b.n	800189c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a14      	ldr	r2, [pc, #80]	; (80018ac <HAL_TIM_MspPostInit+0xb8>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d11d      	bne.n	800189c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001860:	2300      	movs	r3, #0
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	4a0e      	ldr	r2, [pc, #56]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 800186a:	f043 0301 	orr.w	r3, r3, #1
 800186e:	6313      	str	r3, [r2, #48]	; 0x30
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <HAL_TIM_MspPostInit+0xb0>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	f003 0301 	and.w	r3, r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800187c:	23c0      	movs	r3, #192	; 0xc0
 800187e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800188c:	2302      	movs	r3, #2
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	4619      	mov	r1, r3
 8001896:	4806      	ldr	r0, [pc, #24]	; (80018b0 <HAL_TIM_MspPostInit+0xbc>)
 8001898:	f000 fc74 	bl	8002184 <HAL_GPIO_Init>
}
 800189c:	bf00      	nop
 800189e:	3728      	adds	r7, #40	; 0x28
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40000400 	.word	0x40000400
 80018b0:	40020000 	.word	0x40020000

080018b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a3a      	ldr	r2, [pc, #232]	; (80019bc <HAL_UART_MspInit+0x108>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d135      	bne.n	8001942 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	4a38      	ldr	r2, [pc, #224]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6453      	str	r3, [r2, #68]	; 0x44
 80018e6:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	4b32      	ldr	r3, [pc, #200]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a31      	ldr	r2, [pc, #196]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800190e:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191c:	2303      	movs	r3, #3
 800191e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001920:	2307      	movs	r3, #7
 8001922:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 031c 	add.w	r3, r7, #28
 8001928:	4619      	mov	r1, r3
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <HAL_UART_MspInit+0x110>)
 800192c:	f000 fc2a 	bl	8002184 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001930:	2200      	movs	r2, #0
 8001932:	2105      	movs	r1, #5
 8001934:	2025      	movs	r0, #37	; 0x25
 8001936:	f000 fb69 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800193a:	2025      	movs	r0, #37	; 0x25
 800193c:	f000 fb82 	bl	8002044 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001940:	e038      	b.n	80019b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a20      	ldr	r2, [pc, #128]	; (80019c8 <HAL_UART_MspInit+0x114>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d133      	bne.n	80019b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	4a1a      	ldr	r2, [pc, #104]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 8001956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_UART_MspInit+0x10c>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001984:	230c      	movs	r3, #12
 8001986:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001994:	2307      	movs	r3, #7
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001998:	f107 031c 	add.w	r3, r7, #28
 800199c:	4619      	mov	r1, r3
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_UART_MspInit+0x110>)
 80019a0:	f000 fbf0 	bl	8002184 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2105      	movs	r1, #5
 80019a8:	2026      	movs	r0, #38	; 0x26
 80019aa:	f000 fb2f 	bl	800200c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019ae:	2026      	movs	r0, #38	; 0x26
 80019b0:	f000 fb48 	bl	8002044 <HAL_NVIC_EnableIRQ>
}
 80019b4:	bf00      	nop
 80019b6:	3730      	adds	r7, #48	; 0x30
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40011000 	.word	0x40011000
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40004400 	.word	0x40004400

080019cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	4b2e      	ldr	r3, [pc, #184]	; (8001a9c <HAL_InitTick+0xd0>)
 80019e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e4:	4a2d      	ldr	r2, [pc, #180]	; (8001a9c <HAL_InitTick+0xd0>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	6453      	str	r3, [r2, #68]	; 0x44
 80019ec:	4b2b      	ldr	r3, [pc, #172]	; (8001a9c <HAL_InitTick+0xd0>)
 80019ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019f8:	f107 020c 	add.w	r2, r7, #12
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4611      	mov	r1, r2
 8001a02:	4618      	mov	r0, r3
 8001a04:	f001 fe70 	bl	80036e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a08:	f001 fe5a 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8001a0c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a10:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_InitTick+0xd4>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001a1c:	4b21      	ldr	r3, [pc, #132]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a1e:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <HAL_InitTick+0xdc>)
 8001a20:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a24:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a28:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001a30:	4b1c      	ldr	r3, [pc, #112]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a36:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a3c:	4b19      	ldr	r3, [pc, #100]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001a42:	4818      	ldr	r0, [pc, #96]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a44:	f002 f9a7 	bl	8003d96 <HAL_TIM_Base_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d11b      	bne.n	8001a8e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001a56:	4813      	ldr	r0, [pc, #76]	; (8001aa4 <HAL_InitTick+0xd8>)
 8001a58:	f002 f9ec 	bl	8003e34 <HAL_TIM_Base_Start_IT>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d111      	bne.n	8001a8e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a6a:	2019      	movs	r0, #25
 8001a6c:	f000 faea 	bl	8002044 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	d808      	bhi.n	8001a88 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001a76:	2200      	movs	r2, #0
 8001a78:	6879      	ldr	r1, [r7, #4]
 8001a7a:	2019      	movs	r0, #25
 8001a7c:	f000 fac6 	bl	800200c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a80:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <HAL_InitTick+0xe0>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e002      	b.n	8001a8e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3730      	adds	r7, #48	; 0x30
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	431bde83 	.word	0x431bde83
 8001aa4:	200008c4 	.word	0x200008c4
 8001aa8:	40014400 	.word	0x40014400
 8001aac:	2000000c 	.word	0x2000000c

08001ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <NMI_Handler+0x4>

08001ab6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001aba:	e7fe      	b.n	8001aba <HardFault_Handler+0x4>

08001abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac0:	e7fe      	b.n	8001ac0 <MemManage_Handler+0x4>

08001ac2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ac6:	e7fe      	b.n	8001ac6 <BusFault_Handler+0x4>

08001ac8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <UsageFault_Handler+0x4>

08001ace <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001ae0:	2001      	movs	r0, #1
 8001ae2:	f000 fd05 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aee:	2002      	movs	r0, #2
 8001af0:	f000 fcfe 	bl	80024f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001afe:	f002 fdd1 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200006fc 	.word	0x200006fc

08001b0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b10:	4803      	ldr	r0, [pc, #12]	; (8001b20 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b12:	f002 fdc7 	bl	80046a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b16:	4803      	ldr	r0, [pc, #12]	; (8001b24 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b18:	f002 fdc4 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	200006fc 	.word	0x200006fc
 8001b24:	200008c4 	.word	0x200008c4

08001b28 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b2c:	4803      	ldr	r0, [pc, #12]	; (8001b3c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001b2e:	f002 fdb9 	bl	80046a4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001b32:	4803      	ldr	r0, [pc, #12]	; (8001b40 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001b34:	f002 fdb6 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	200006fc 	.word	0x200006fc
 8001b40:	200007d4 	.word	0x200007d4

08001b44 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM1_CC_IRQHandler+0x10>)
 8001b4a:	f002 fdab 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200006fc 	.word	0x200006fc

08001b58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <TIM2_IRQHandler+0x10>)
 8001b5e:	f002 fda1 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000744 	.word	0x20000744

08001b6c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <TIM3_IRQHandler+0x10>)
 8001b72:	f002 fd97 	bl	80046a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	2000078c 	.word	0x2000078c

08001b80 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <USART1_IRQHandler+0x10>)
 8001b86:	f003 fe99 	bl	80058bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	2000081c 	.word	0x2000081c

08001b94 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <USART2_IRQHandler+0x10>)
 8001b9a:	f003 fe8f 	bl	80058bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000860 	.word	0x20000860

08001ba8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e00a      	b.n	8001bd0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bba:	f3af 8000 	nop.w
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	1c5a      	adds	r2, r3, #1
 8001bc4:	60ba      	str	r2, [r7, #8]
 8001bc6:	b2ca      	uxtb	r2, r1
 8001bc8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf0      	blt.n	8001bba <_read+0x12>
	}

return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b086      	sub	sp, #24
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	60b9      	str	r1, [r7, #8]
 8001bec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
 8001bf2:	e009      	b.n	8001c08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	60ba      	str	r2, [r7, #8]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fff1 	bl	8000be4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf1      	blt.n	8001bf4 <_write+0x12>
	}
	return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_close>:

int _close(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
	return -1;
 8001c22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
 8001c3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c42:	605a      	str	r2, [r3, #4]
	return 0;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_isatty>:

int _isatty(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return 1;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
	return 0;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c8c:	4a14      	ldr	r2, [pc, #80]	; (8001ce0 <_sbrk+0x5c>)
 8001c8e:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <_sbrk+0x60>)
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c98:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <_sbrk+0x64>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca0:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <_sbrk+0x64>)
 8001ca2:	4a12      	ldr	r2, [pc, #72]	; (8001cec <_sbrk+0x68>)
 8001ca4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ca6:	4b10      	ldr	r3, [pc, #64]	; (8001ce8 <_sbrk+0x64>)
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d207      	bcs.n	8001cc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cb4:	f007 ff5a 	bl	8009b6c <__errno>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	220c      	movs	r2, #12
 8001cbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e009      	b.n	8001cd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cc4:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <_sbrk+0x64>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cca:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <_sbrk+0x64>)
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4a05      	ldr	r2, [pc, #20]	; (8001ce8 <_sbrk+0x64>)
 8001cd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20020000 	.word	0x20020000
 8001ce4:	00000400 	.word	0x00000400
 8001ce8:	2000090c 	.word	0x2000090c
 8001cec:	20005340 	.word	0x20005340

08001cf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x20>)
 8001cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfa:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SystemInit+0x20>)
 8001cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <HAL_TIM_IC_CaptureCallback>:
// 한글로 주석을 달아도 깨지지 않는다.
int distance;   // 거리 즉정값을 저장 하는 변수
int ic_cpt_flag;   // rising edge/falling edge를 detect 했을때 check하는 flag
// rising edge/falling edge Interrupt 가 발생 되면 이곳으로 들어 온다.
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
	static uint8_t is_first_capture=0;

	if (htim->Instance == TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <HAL_TIM_IC_CaptureCallback+0x58>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d11d      	bne.n	8001d62 <HAL_TIM_IC_CaptureCallback+0x4e>
	{
		if (is_first_capture == 0)   // rising edge detect !!!
 8001d26:	4b12      	ldr	r3, [pc, #72]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d107      	bne.n	8001d3e <HAL_TIM_IC_CaptureCallback+0x2a>
		{
			__HAL_TIM_SET_COUNTER(htim, 0);   // clear
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
			is_first_capture=1;   // rising edge를 만났다는 indicator를 set
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	701a      	strb	r2, [r3, #0]
			is_first_capture=0;
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재 까지 count
			ic_cpt_flag=1;
		}
	}
}
 8001d3c:	e011      	b.n	8001d62 <HAL_TIM_IC_CaptureCallback+0x4e>
		else if (is_first_capture == 1)  // falling edge detect !!!
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <HAL_TIM_IC_CaptureCallback+0x4e>
			is_first_capture=0;
 8001d46:	4b0a      	ldr	r3, [pc, #40]	; (8001d70 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // 현재 까지 count
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f002 ffd6 	bl	8004d00 <HAL_TIM_ReadCapturedValue>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_TIM_IC_CaptureCallback+0x60>)
 8001d5a:	601a      	str	r2, [r3, #0]
			ic_cpt_flag=1;
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_TIM_IC_CaptureCallback+0x64>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	3708      	adds	r7, #8
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000
 8001d70:	20000918 	.word	0x20000918
 8001d74:	20000910 	.word	0x20000910
 8001d78:	20000914 	.word	0x20000914

08001d7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001db4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d82:	490e      	ldr	r1, [pc, #56]	; (8001dbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d88:	e002      	b.n	8001d90 <LoopCopyDataInit>

08001d8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8e:	3304      	adds	r3, #4

08001d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d94:	d3f9      	bcc.n	8001d8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d96:	4a0b      	ldr	r2, [pc, #44]	; (8001dc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d98:	4c0b      	ldr	r4, [pc, #44]	; (8001dc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d9c:	e001      	b.n	8001da2 <LoopFillZerobss>

08001d9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da0:	3204      	adds	r2, #4

08001da2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001da2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da4:	d3fb      	bcc.n	8001d9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001da6:	f7ff ffa3 	bl	8001cf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001daa:	f007 ffdb 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dae:	f7fe ff53 	bl	8000c58 <main>
  bx  lr    
 8001db2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001db4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dbc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001dc0:	0800a8f4 	.word	0x0800a8f4
  ldr r2, =_sbss
 8001dc4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001dc8:	20005340 	.word	0x20005340

08001dcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dcc:	e7fe      	b.n	8001dcc <ADC_IRQHandler>
	...

08001dd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <HAL_Init+0x40>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a0d      	ldr	r2, [pc, #52]	; (8001e10 <HAL_Init+0x40>)
 8001dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dde:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <HAL_Init+0x40>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_Init+0x40>)
 8001de6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_Init+0x40>)
 8001df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f000 f8fc 	bl	8001ff6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dfe:	200f      	movs	r0, #15
 8001e00:	f7ff fde4 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e04:	f7ff fb9c 	bl	8001540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	; (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000010 	.word	0x20000010
 8001e38:	2000091c 	.word	0x2000091c

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	; (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	2000091c 	.word	0x2000091c

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff ffee 	bl	8001e3c <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffde 	bl	8001e3c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000010 	.word	0x20000010

08001e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eac:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ece:	4a04      	ldr	r2, [pc, #16]	; (8001ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	60d3      	str	r3, [r2, #12]
}
 8001ed4:	bf00      	nop
 8001ed6:	3714      	adds	r7, #20
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee8:	4b04      	ldr	r3, [pc, #16]	; (8001efc <__NVIC_GetPriorityGrouping+0x18>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	0a1b      	lsrs	r3, r3, #8
 8001eee:	f003 0307 	and.w	r3, r3, #7
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	e000ed00 	.word	0xe000ed00

08001f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	db0b      	blt.n	8001f2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	f003 021f 	and.w	r2, r3, #31
 8001f18:	4907      	ldr	r1, [pc, #28]	; (8001f38 <__NVIC_EnableIRQ+0x38>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	095b      	lsrs	r3, r3, #5
 8001f20:	2001      	movs	r0, #1
 8001f22:	fa00 f202 	lsl.w	r2, r0, r2
 8001f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	e000e100 	.word	0xe000e100

08001f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	6039      	str	r1, [r7, #0]
 8001f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	db0a      	blt.n	8001f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	490c      	ldr	r1, [pc, #48]	; (8001f88 <__NVIC_SetPriority+0x4c>)
 8001f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f5a:	0112      	lsls	r2, r2, #4
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	440b      	add	r3, r1
 8001f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f64:	e00a      	b.n	8001f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	4908      	ldr	r1, [pc, #32]	; (8001f8c <__NVIC_SetPriority+0x50>)
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	3b04      	subs	r3, #4
 8001f74:	0112      	lsls	r2, r2, #4
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	440b      	add	r3, r1
 8001f7a:	761a      	strb	r2, [r3, #24]
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000e100 	.word	0xe000e100
 8001f8c:	e000ed00 	.word	0xe000ed00

08001f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f1c3 0307 	rsb	r3, r3, #7
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	bf28      	it	cs
 8001fae:	2304      	movcs	r3, #4
 8001fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3304      	adds	r3, #4
 8001fb6:	2b06      	cmp	r3, #6
 8001fb8:	d902      	bls.n	8001fc0 <NVIC_EncodePriority+0x30>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3b03      	subs	r3, #3
 8001fbe:	e000      	b.n	8001fc2 <NVIC_EncodePriority+0x32>
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	43da      	mvns	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	401a      	ands	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe2:	43d9      	mvns	r1, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe8:	4313      	orrs	r3, r2
         );
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3724      	adds	r7, #36	; 0x24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ff4c 	bl	8001e9c <__NVIC_SetPriorityGrouping>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800201e:	f7ff ff61 	bl	8001ee4 <__NVIC_GetPriorityGrouping>
 8002022:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	6978      	ldr	r0, [r7, #20]
 800202a:	f7ff ffb1 	bl	8001f90 <NVIC_EncodePriority>
 800202e:	4602      	mov	r2, r0
 8002030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002034:	4611      	mov	r1, r2
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff ff80 	bl	8001f3c <__NVIC_SetPriority>
}
 800203c:	bf00      	nop
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff54 	bl	8001f00 <__NVIC_EnableIRQ>
}
 8002058:	bf00      	nop
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800206e:	f7ff fee5 	bl	8001e3c <HAL_GetTick>
 8002072:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d008      	beq.n	8002092 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e052      	b.n	8002138 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 0216 	bic.w	r2, r2, #22
 80020a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	695a      	ldr	r2, [r3, #20]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d103      	bne.n	80020c2 <HAL_DMA_Abort+0x62>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0208 	bic.w	r2, r2, #8
 80020d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020e2:	e013      	b.n	800210c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020e4:	f7ff feaa 	bl	8001e3c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b05      	cmp	r3, #5
 80020f0:	d90c      	bls.n	800210c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2203      	movs	r2, #3
 80020fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e015      	b.n	8002138 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0301 	and.w	r3, r3, #1
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1e4      	bne.n	80020e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	223f      	movs	r2, #63	; 0x3f
 8002120:	409a      	lsls	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d004      	beq.n	800215e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2280      	movs	r2, #128	; 0x80
 8002158:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e00c      	b.n	8002178 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2205      	movs	r2, #5
 8002162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0201 	bic.w	r2, r2, #1
 8002174:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002184:	b480      	push	{r7}
 8002186:	b089      	sub	sp, #36	; 0x24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002196:	2300      	movs	r3, #0
 8002198:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800219a:	2300      	movs	r3, #0
 800219c:	61fb      	str	r3, [r7, #28]
 800219e:	e159      	b.n	8002454 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4013      	ands	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	f040 8148 	bne.w	800244e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d005      	beq.n	80021d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d130      	bne.n	8002238 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4013      	ands	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68da      	ldr	r2, [r3, #12]
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800220c:	2201      	movs	r2, #1
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	091b      	lsrs	r3, r3, #4
 8002222:	f003 0201 	and.w	r2, r3, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b03      	cmp	r3, #3
 8002242:	d017      	beq.n	8002274 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d123      	bne.n	80022c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	08da      	lsrs	r2, r3, #3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3208      	adds	r2, #8
 8002288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	220f      	movs	r2, #15
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	691a      	ldr	r2, [r3, #16]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	08da      	lsrs	r2, r3, #3
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3208      	adds	r2, #8
 80022c2:	69b9      	ldr	r1, [r7, #24]
 80022c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f003 0203 	and.w	r2, r3, #3
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80a2 	beq.w	800244e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	4b57      	ldr	r3, [pc, #348]	; (800246c <HAL_GPIO_Init+0x2e8>)
 8002310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002312:	4a56      	ldr	r2, [pc, #344]	; (800246c <HAL_GPIO_Init+0x2e8>)
 8002314:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002318:	6453      	str	r3, [r2, #68]	; 0x44
 800231a:	4b54      	ldr	r3, [pc, #336]	; (800246c <HAL_GPIO_Init+0x2e8>)
 800231c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002326:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x2ec>)
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	220f      	movs	r2, #15
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4013      	ands	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a49      	ldr	r2, [pc, #292]	; (8002474 <HAL_GPIO_Init+0x2f0>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x202>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a48      	ldr	r2, [pc, #288]	; (8002478 <HAL_GPIO_Init+0x2f4>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x1fe>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a47      	ldr	r2, [pc, #284]	; (800247c <HAL_GPIO_Init+0x2f8>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x1fa>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a46      	ldr	r2, [pc, #280]	; (8002480 <HAL_GPIO_Init+0x2fc>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x1f6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a45      	ldr	r2, [pc, #276]	; (8002484 <HAL_GPIO_Init+0x300>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x1f2>
 8002372:	2304      	movs	r3, #4
 8002374:	e008      	b.n	8002388 <HAL_GPIO_Init+0x204>
 8002376:	2307      	movs	r3, #7
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x204>
 800237a:	2303      	movs	r3, #3
 800237c:	e004      	b.n	8002388 <HAL_GPIO_Init+0x204>
 800237e:	2302      	movs	r3, #2
 8002380:	e002      	b.n	8002388 <HAL_GPIO_Init+0x204>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_GPIO_Init+0x204>
 8002386:	2300      	movs	r3, #0
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f002 0203 	and.w	r2, r2, #3
 800238e:	0092      	lsls	r2, r2, #2
 8002390:	4093      	lsls	r3, r2
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002398:	4935      	ldr	r1, [pc, #212]	; (8002470 <HAL_GPIO_Init+0x2ec>)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	089b      	lsrs	r3, r3, #2
 800239e:	3302      	adds	r3, #2
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023a6:	4b38      	ldr	r3, [pc, #224]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4013      	ands	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ca:	4a2f      	ldr	r2, [pc, #188]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d0:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d003      	beq.n	80023f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023f4:	4a24      	ldr	r2, [pc, #144]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <HAL_GPIO_Init+0x304>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002424:	4b18      	ldr	r3, [pc, #96]	; (8002488 <HAL_GPIO_Init+0x304>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	43db      	mvns	r3, r3
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	4013      	ands	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4313      	orrs	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002448:	4a0f      	ldr	r2, [pc, #60]	; (8002488 <HAL_GPIO_Init+0x304>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3301      	adds	r3, #1
 8002452:	61fb      	str	r3, [r7, #28]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	2b0f      	cmp	r3, #15
 8002458:	f67f aea2 	bls.w	80021a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40023800 	.word	0x40023800
 8002470:	40013800 	.word	0x40013800
 8002474:	40020000 	.word	0x40020000
 8002478:	40020400 	.word	0x40020400
 800247c:	40020800 	.word	0x40020800
 8002480:	40020c00 	.word	0x40020c00
 8002484:	40021000 	.word	0x40021000
 8002488:	40013c00 	.word	0x40013c00

0800248c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	460b      	mov	r3, r1
 8002496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	887b      	ldrh	r3, [r7, #2]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d002      	beq.n	80024aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]
 80024a8:	e001      	b.n	80024ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	807b      	strh	r3, [r7, #2]
 80024c8:	4613      	mov	r3, r2
 80024ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024cc:	787b      	ldrb	r3, [r7, #1]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d003      	beq.n	80024da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d2:	887a      	ldrh	r2, [r7, #2]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024d8:	e003      	b.n	80024e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	619a      	str	r2, [r3, #24]
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	4013      	ands	r3, r2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d006      	beq.n	8002514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002506:	4a05      	ldr	r2, [pc, #20]	; (800251c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800250c:	88fb      	ldrh	r3, [r7, #6]
 800250e:	4618      	mov	r0, r3
 8002510:	f7fe fb7a 	bl	8000c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002514:	bf00      	nop
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e12b      	b.n	800278a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff f826 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002572:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002582:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002584:	f001 f888 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8002588:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4a81      	ldr	r2, [pc, #516]	; (8002794 <HAL_I2C_Init+0x274>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d807      	bhi.n	80025a4 <HAL_I2C_Init+0x84>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4a80      	ldr	r2, [pc, #512]	; (8002798 <HAL_I2C_Init+0x278>)
 8002598:	4293      	cmp	r3, r2
 800259a:	bf94      	ite	ls
 800259c:	2301      	movls	r3, #1
 800259e:	2300      	movhi	r3, #0
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	e006      	b.n	80025b2 <HAL_I2C_Init+0x92>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	; (800279c <HAL_I2C_Init+0x27c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	bf94      	ite	ls
 80025ac:	2301      	movls	r3, #1
 80025ae:	2300      	movhi	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e0e7      	b.n	800278a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	4a78      	ldr	r2, [pc, #480]	; (80027a0 <HAL_I2C_Init+0x280>)
 80025be:	fba2 2303 	umull	r2, r3, r2, r3
 80025c2:	0c9b      	lsrs	r3, r3, #18
 80025c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	4a6a      	ldr	r2, [pc, #424]	; (8002794 <HAL_I2C_Init+0x274>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d802      	bhi.n	80025f4 <HAL_I2C_Init+0xd4>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	3301      	adds	r3, #1
 80025f2:	e009      	b.n	8002608 <HAL_I2C_Init+0xe8>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025fa:	fb02 f303 	mul.w	r3, r2, r3
 80025fe:	4a69      	ldr	r2, [pc, #420]	; (80027a4 <HAL_I2C_Init+0x284>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	099b      	lsrs	r3, r3, #6
 8002606:	3301      	adds	r3, #1
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	430b      	orrs	r3, r1
 800260e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800261a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	495c      	ldr	r1, [pc, #368]	; (8002794 <HAL_I2C_Init+0x274>)
 8002624:	428b      	cmp	r3, r1
 8002626:	d819      	bhi.n	800265c <HAL_I2C_Init+0x13c>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	1e59      	subs	r1, r3, #1
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fbb1 f3f3 	udiv	r3, r1, r3
 8002636:	1c59      	adds	r1, r3, #1
 8002638:	f640 73fc 	movw	r3, #4092	; 0xffc
 800263c:	400b      	ands	r3, r1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_I2C_Init+0x138>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e59      	subs	r1, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002656:	e051      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 8002658:	2304      	movs	r3, #4
 800265a:	e04f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d111      	bne.n	8002688 <HAL_I2C_Init+0x168>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	1e58      	subs	r0, r3, #1
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6859      	ldr	r1, [r3, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e012      	b.n	80026ae <HAL_I2C_Init+0x18e>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	0099      	lsls	r1, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	fbb0 f3f3 	udiv	r3, r0, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf0c      	ite	eq
 80026a8:	2301      	moveq	r3, #1
 80026aa:	2300      	movne	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x196>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e022      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10e      	bne.n	80026dc <HAL_I2C_Init+0x1bc>
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1e58      	subs	r0, r3, #1
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	460b      	mov	r3, r1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	440b      	add	r3, r1
 80026cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80026d0:	3301      	adds	r3, #1
 80026d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026da:	e00f      	b.n	80026fc <HAL_I2C_Init+0x1dc>
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	1e58      	subs	r0, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6859      	ldr	r1, [r3, #4]
 80026e4:	460b      	mov	r3, r1
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	0099      	lsls	r1, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f2:	3301      	adds	r3, #1
 80026f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	4313      	orrs	r3, r2
 8002702:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69da      	ldr	r2, [r3, #28]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800272a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	6911      	ldr	r1, [r2, #16]
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	68d2      	ldr	r2, [r2, #12]
 8002736:	4311      	orrs	r1, r2
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695a      	ldr	r2, [r3, #20]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2220      	movs	r2, #32
 8002776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	000186a0 	.word	0x000186a0
 8002798:	001e847f 	.word	0x001e847f
 800279c:	003d08ff 	.word	0x003d08ff
 80027a0:	431bde83 	.word	0x431bde83
 80027a4:	10624dd3 	.word	0x10624dd3

080027a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b088      	sub	sp, #32
 80027ac:	af02      	add	r7, sp, #8
 80027ae:	60f8      	str	r0, [r7, #12]
 80027b0:	607a      	str	r2, [r7, #4]
 80027b2:	461a      	mov	r2, r3
 80027b4:	460b      	mov	r3, r1
 80027b6:	817b      	strh	r3, [r7, #10]
 80027b8:	4613      	mov	r3, r2
 80027ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027bc:	f7ff fb3e 	bl	8001e3c <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b20      	cmp	r3, #32
 80027cc:	f040 80e0 	bne.w	8002990 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2319      	movs	r3, #25
 80027d6:	2201      	movs	r2, #1
 80027d8:	4970      	ldr	r1, [pc, #448]	; (800299c <HAL_I2C_Master_Transmit+0x1f4>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f964 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0d3      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_I2C_Master_Transmit+0x50>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e0cc      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d007      	beq.n	800281e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f042 0201 	orr.w	r2, r2, #1
 800281c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800282c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2221      	movs	r2, #33	; 0x21
 8002832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2210      	movs	r2, #16
 800283a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	893a      	ldrh	r2, [r7, #8]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4a50      	ldr	r2, [pc, #320]	; (80029a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800285e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002860:	8979      	ldrh	r1, [r7, #10]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	6a3a      	ldr	r2, [r7, #32]
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 f89c 	bl	80029a4 <I2C_MasterRequestWrite>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e08d      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	613b      	str	r3, [r7, #16]
 800288a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800288c:	e066      	b.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	6a39      	ldr	r1, [r7, #32]
 8002892:	68f8      	ldr	r0, [r7, #12]
 8002894:	f000 f9de 	bl	8002c54 <I2C_WaitOnTXEFlagUntilTimeout>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00d      	beq.n	80028ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d107      	bne.n	80028b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e06b      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028be:	781a      	ldrb	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	1c5a      	adds	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e2:	3b01      	subs	r3, #1
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d11b      	bne.n	8002930 <HAL_I2C_Master_Transmit+0x188>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	781a      	ldrb	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002910:	1c5a      	adds	r2, r3, #1
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	6a39      	ldr	r1, [r7, #32]
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 f9ce 	bl	8002cd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00d      	beq.n	800295c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	2b04      	cmp	r3, #4
 8002946:	d107      	bne.n	8002958 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002956:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e01a      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
 8002962:	d194      	bne.n	800288e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	e000      	b.n	8002992 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002990:	2302      	movs	r3, #2
  }
}
 8002992:	4618      	mov	r0, r3
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	00100002 	.word	0x00100002
 80029a0:	ffff0000 	.word	0xffff0000

080029a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	460b      	mov	r3, r1
 80029b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d006      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d003      	beq.n	80029ce <I2C_MasterRequestWrite+0x2a>
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80029cc:	d108      	bne.n	80029e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	e00b      	b.n	80029f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	2b12      	cmp	r3, #18
 80029e6:	d107      	bne.n	80029f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	9300      	str	r3, [sp, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f84f 	bl	8002aa8 <I2C_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00d      	beq.n	8002a2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a1e:	d103      	bne.n	8002a28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e035      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	691b      	ldr	r3, [r3, #16]
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a34:	d108      	bne.n	8002a48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a36:	897b      	ldrh	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a44:	611a      	str	r2, [r3, #16]
 8002a46:	e01b      	b.n	8002a80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002a48:	897b      	ldrh	r3, [r7, #10]
 8002a4a:	11db      	asrs	r3, r3, #7
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	f003 0306 	and.w	r3, r3, #6
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f063 030f 	orn	r3, r3, #15
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <I2C_MasterRequestWrite+0xfc>)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f875 	bl	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e010      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a76:	897b      	ldrh	r3, [r7, #10]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	4907      	ldr	r1, [pc, #28]	; (8002aa4 <I2C_MasterRequestWrite+0x100>)
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f865 	bl	8002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e000      	b.n	8002a98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	00010008 	.word	0x00010008
 8002aa4:	00010002 	.word	0x00010002

08002aa8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab8:	e025      	b.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d021      	beq.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac2:	f7ff f9bb 	bl	8001e3c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d302      	bcc.n	8002ad8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d116      	bne.n	8002b06 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2220      	movs	r2, #32
 8002ae2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0220 	orr.w	r2, r3, #32
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e023      	b.n	8002b4e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	0c1b      	lsrs	r3, r3, #16
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d10d      	bne.n	8002b2c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	43da      	mvns	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	bf0c      	ite	eq
 8002b22:	2301      	moveq	r3, #1
 8002b24:	2300      	movne	r3, #0
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	461a      	mov	r2, r3
 8002b2a:	e00c      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4013      	ands	r3, r2
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	79fb      	ldrb	r3, [r7, #7]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d0b6      	beq.n	8002aba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b084      	sub	sp, #16
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	60f8      	str	r0, [r7, #12]
 8002b5e:	60b9      	str	r1, [r7, #8]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b64:	e051      	b.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b74:	d123      	bne.n	8002bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b8e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f043 0204 	orr.w	r2, r3, #4
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e046      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d021      	beq.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bc6:	f7ff f939 	bl	8001e3c <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d302      	bcc.n	8002bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d116      	bne.n	8002c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2220      	movs	r2, #32
 8002be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f043 0220 	orr.w	r2, r3, #32
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e020      	b.n	8002c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d10c      	bne.n	8002c2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	43da      	mvns	r2, r3
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	bf14      	ite	ne
 8002c26:	2301      	movne	r3, #1
 8002c28:	2300      	moveq	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	e00b      	b.n	8002c46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	699b      	ldr	r3, [r3, #24]
 8002c34:	43da      	mvns	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d18d      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c60:	e02d      	b.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 f878 	bl	8002d58 <I2C_IsAcknowledgeFailed>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e02d      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d021      	beq.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7a:	f7ff f8df 	bl	8001e3c <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	68ba      	ldr	r2, [r7, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d302      	bcc.n	8002c90 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d116      	bne.n	8002cbe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2220      	movs	r2, #32
 8002c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	f043 0220 	orr.w	r2, r3, #32
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e007      	b.n	8002cce <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc8:	2b80      	cmp	r3, #128	; 0x80
 8002cca:	d1ca      	bne.n	8002c62 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}

08002cd6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b084      	sub	sp, #16
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	60f8      	str	r0, [r7, #12]
 8002cde:	60b9      	str	r1, [r7, #8]
 8002ce0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ce2:	e02d      	b.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f837 	bl	8002d58 <I2C_IsAcknowledgeFailed>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02d      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cfa:	d021      	beq.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cfc:	f7ff f89e 	bl	8001e3c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d302      	bcc.n	8002d12 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d116      	bne.n	8002d40 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	f043 0220 	orr.w	r2, r3, #32
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e007      	b.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	d1ca      	bne.n	8002ce4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d6e:	d11b      	bne.n	8002da8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d78:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2220      	movs	r2, #32
 8002d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	370c      	adds	r7, #12
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
	...

08002db8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e267      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d075      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dd6:	4b88      	ldr	r3, [pc, #544]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d00c      	beq.n	8002dfc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002de2:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d112      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dee:	4b82      	ldr	r3, [pc, #520]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dfa:	d10b      	bne.n	8002e14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	4b7e      	ldr	r3, [pc, #504]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d05b      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x108>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d157      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e242      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d106      	bne.n	8002e2c <HAL_RCC_OscConfig+0x74>
 8002e1e:	4b76      	ldr	r3, [pc, #472]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a75      	ldr	r2, [pc, #468]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e28:	6013      	str	r3, [r2, #0]
 8002e2a:	e01d      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x98>
 8002e36:	4b70      	ldr	r3, [pc, #448]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	4b6d      	ldr	r3, [pc, #436]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a6c      	ldr	r2, [pc, #432]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0xb0>
 8002e50:	4b69      	ldr	r3, [pc, #420]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e5a:	6013      	str	r3, [r2, #0]
 8002e5c:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d013      	beq.n	8002e98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe ffe4 	bl	8001e3c <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e78:	f7fe ffe0 	bl	8001e3c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b64      	cmp	r3, #100	; 0x64
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e207      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d0f0      	beq.n	8002e78 <HAL_RCC_OscConfig+0xc0>
 8002e96:	e014      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e98:	f7fe ffd0 	bl	8001e3c <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ea0:	f7fe ffcc 	bl	8001e3c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b64      	cmp	r3, #100	; 0x64
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e1f3      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb2:	4b51      	ldr	r3, [pc, #324]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f0      	bne.n	8002ea0 <HAL_RCC_OscConfig+0xe8>
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d063      	beq.n	8002f96 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eda:	4b47      	ldr	r3, [pc, #284]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d11c      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ee6:	4b44      	ldr	r3, [pc, #272]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d116      	bne.n	8002f20 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ef2:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d005      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d001      	beq.n	8002f0a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e1c7      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4937      	ldr	r1, [pc, #220]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1e:	e03a      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d020      	beq.n	8002f6a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f28:	4b34      	ldr	r3, [pc, #208]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe ff85 	bl	8001e3c <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f36:	f7fe ff81 	bl	8001e3c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e1a8      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f48:	4b2b      	ldr	r3, [pc, #172]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f54:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	4925      	ldr	r1, [pc, #148]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	600b      	str	r3, [r1, #0]
 8002f68:	e015      	b.n	8002f96 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6a:	4b24      	ldr	r3, [pc, #144]	; (8002ffc <HAL_RCC_OscConfig+0x244>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe ff64 	bl	8001e3c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f78:	f7fe ff60 	bl	8001e3c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e187      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8a:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0308 	and.w	r3, r3, #8
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d036      	beq.n	8003010 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d016      	beq.n	8002fd8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002faa:	4b15      	ldr	r3, [pc, #84]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fac:	2201      	movs	r2, #1
 8002fae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb0:	f7fe ff44 	bl	8001e3c <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fb8:	f7fe ff40 	bl	8001e3c <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e167      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x200>
 8002fd6:	e01b      	b.n	8003010 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <HAL_RCC_OscConfig+0x248>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fde:	f7fe ff2d 	bl	8001e3c <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fe6:	f7fe ff29 	bl	8001e3c <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	e150      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	42470000 	.word	0x42470000
 8003000:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b88      	ldr	r3, [pc, #544]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 8097 	beq.w	800314c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b81      	ldr	r3, [pc, #516]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10f      	bne.n	800304e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	4b7d      	ldr	r3, [pc, #500]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a7c      	ldr	r2, [pc, #496]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304a:	2301      	movs	r3, #1
 800304c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304e:	4b77      	ldr	r3, [pc, #476]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	2b00      	cmp	r3, #0
 8003058:	d118      	bne.n	800308c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800305a:	4b74      	ldr	r3, [pc, #464]	; (800322c <HAL_RCC_OscConfig+0x474>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a73      	ldr	r2, [pc, #460]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7fe fee9 	bl	8001e3c <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306c:	e008      	b.n	8003080 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306e:	f7fe fee5 	bl	8001e3c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d901      	bls.n	8003080 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e10c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003080:	4b6a      	ldr	r3, [pc, #424]	; (800322c <HAL_RCC_OscConfig+0x474>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f0      	beq.n	800306e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d106      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2ea>
 8003094:	4b64      	ldr	r3, [pc, #400]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003096:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003098:	4a63      	ldr	r2, [pc, #396]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 800309a:	f043 0301 	orr.w	r3, r3, #1
 800309e:	6713      	str	r3, [r2, #112]	; 0x70
 80030a0:	e01c      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b05      	cmp	r3, #5
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0x30c>
 80030aa:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ae:	4a5e      	ldr	r2, [pc, #376]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6713      	str	r3, [r2, #112]	; 0x70
 80030b6:	4b5c      	ldr	r3, [pc, #368]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ba:	4a5b      	ldr	r2, [pc, #364]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030bc:	f043 0301 	orr.w	r3, r3, #1
 80030c0:	6713      	str	r3, [r2, #112]	; 0x70
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0x324>
 80030c4:	4b58      	ldr	r3, [pc, #352]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030c8:	4a57      	ldr	r2, [pc, #348]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	6713      	str	r3, [r2, #112]	; 0x70
 80030d0:	4b55      	ldr	r3, [pc, #340]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a54      	ldr	r2, [pc, #336]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80030d6:	f023 0304 	bic.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d015      	beq.n	8003110 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e4:	f7fe feaa 	bl	8001e3c <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e00a      	b.n	8003102 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fea6 	bl	8001e3c <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d901      	bls.n	8003102 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e0cb      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0ee      	beq.n	80030ec <HAL_RCC_OscConfig+0x334>
 800310e:	e014      	b.n	800313a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe fe94 	bl	8001e3c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003116:	e00a      	b.n	800312e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003118:	f7fe fe90 	bl	8001e3c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e0b5      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ee      	bne.n	8003118 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800313a:	7dfb      	ldrb	r3, [r7, #23]
 800313c:	2b01      	cmp	r3, #1
 800313e:	d105      	bne.n	800314c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003140:	4b39      	ldr	r3, [pc, #228]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003146:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800314a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 80a1 	beq.w	8003298 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b08      	cmp	r3, #8
 8003160:	d05c      	beq.n	800321c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d141      	bne.n	80031ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800316a:	4b31      	ldr	r3, [pc, #196]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fe fe64 	bl	8001e3c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003178:	f7fe fe60 	bl	8001e3c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e087      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69da      	ldr	r2, [r3, #28]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	431a      	orrs	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	491b      	ldr	r1, [pc, #108]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031c0:	4b1b      	ldr	r3, [pc, #108]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c6:	f7fe fe39 	bl	8001e3c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031ce:	f7fe fe35 	bl	8001e3c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e05c      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x416>
 80031ec:	e054      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_RCC_OscConfig+0x478>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f4:	f7fe fe22 	bl	8001e3c <HAL_GetTick>
 80031f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031fc:	f7fe fe1e 	bl	8001e3c <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e045      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800320e:	4b06      	ldr	r3, [pc, #24]	; (8003228 <HAL_RCC_OscConfig+0x470>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x444>
 800321a:	e03d      	b.n	8003298 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d107      	bne.n	8003234 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e038      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
 8003228:	40023800 	.word	0x40023800
 800322c:	40007000 	.word	0x40007000
 8003230:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003234:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_RCC_OscConfig+0x4ec>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d028      	beq.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d121      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d11a      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003264:	4013      	ands	r3, r2
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800326a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800326c:	4293      	cmp	r3, r2
 800326e:	d111      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	085b      	lsrs	r3, r3, #1
 800327c:	3b01      	subs	r3, #1
 800327e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003280:	429a      	cmp	r2, r3
 8003282:	d107      	bne.n	8003294 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003290:	429a      	cmp	r2, r3
 8003292:	d001      	beq.n	8003298 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e000      	b.n	800329a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	40023800 	.word	0x40023800

080032a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0cc      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032bc:	4b68      	ldr	r3, [pc, #416]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d90c      	bls.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ca:	4b65      	ldr	r3, [pc, #404]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032cc:	683a      	ldr	r2, [r7, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032d2:	4b63      	ldr	r3, [pc, #396]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	429a      	cmp	r2, r3
 80032de:	d001      	beq.n	80032e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e0b8      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d020      	beq.n	8003332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d005      	beq.n	8003308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032fc:	4b59      	ldr	r3, [pc, #356]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4a58      	ldr	r2, [pc, #352]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003314:	4b53      	ldr	r3, [pc, #332]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800331e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003320:	4b50      	ldr	r3, [pc, #320]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	494d      	ldr	r1, [pc, #308]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d044      	beq.n	80033c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	2b01      	cmp	r3, #1
 8003344:	d107      	bne.n	8003356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d119      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e07f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d003      	beq.n	8003366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003362:	2b03      	cmp	r3, #3
 8003364:	d107      	bne.n	8003376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d109      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e067      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f023 0203 	bic.w	r2, r3, #3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	4934      	ldr	r1, [pc, #208]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003398:	f7fe fd50 	bl	8001e3c <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033a0:	f7fe fd4c 	bl	8001e3c <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e04f      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	4b2b      	ldr	r3, [pc, #172]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 020c 	and.w	r2, r3, #12
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d1eb      	bne.n	80033a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0307 	and.w	r3, r3, #7
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d20c      	bcs.n	80033f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033d6:	4b22      	ldr	r3, [pc, #136]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	b2d2      	uxtb	r2, r2
 80033dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_RCC_ClockConfig+0x1b8>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d001      	beq.n	80033f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e032      	b.n	8003456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d008      	beq.n	800340e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033fc:	4b19      	ldr	r3, [pc, #100]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4916      	ldr	r1, [pc, #88]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800341a:	4b12      	ldr	r3, [pc, #72]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	490e      	ldr	r1, [pc, #56]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 800342a:	4313      	orrs	r3, r2
 800342c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800342e:	f000 f821 	bl	8003474 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b0b      	ldr	r3, [pc, #44]	; (8003464 <HAL_RCC_ClockConfig+0x1bc>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	091b      	lsrs	r3, r3, #4
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490a      	ldr	r1, [pc, #40]	; (8003468 <HAL_RCC_ClockConfig+0x1c0>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	fa22 f303 	lsr.w	r3, r2, r3
 8003446:	4a09      	ldr	r2, [pc, #36]	; (800346c <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCC_ClockConfig+0x1c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f7fe fabc 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40023c00 	.word	0x40023c00
 8003464:	40023800 	.word	0x40023800
 8003468:	0800a868 	.word	0x0800a868
 800346c:	20000008 	.word	0x20000008
 8003470:	2000000c 	.word	0x2000000c

08003474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b094      	sub	sp, #80	; 0x50
 800347a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800347c:	2300      	movs	r3, #0
 800347e:	647b      	str	r3, [r7, #68]	; 0x44
 8003480:	2300      	movs	r3, #0
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003484:	2300      	movs	r3, #0
 8003486:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800348c:	4b79      	ldr	r3, [pc, #484]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
 8003494:	2b08      	cmp	r3, #8
 8003496:	d00d      	beq.n	80034b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003498:	2b08      	cmp	r3, #8
 800349a:	f200 80e1 	bhi.w	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x34>
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d003      	beq.n	80034ae <HAL_RCC_GetSysClockFreq+0x3a>
 80034a6:	e0db      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034a8:	4b73      	ldr	r3, [pc, #460]	; (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034ac:	e0db      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ae:	4b73      	ldr	r3, [pc, #460]	; (800367c <HAL_RCC_GetSysClockFreq+0x208>)
 80034b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034b2:	e0d8      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034b4:	4b6f      	ldr	r3, [pc, #444]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034bc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034be:	4b6d      	ldr	r3, [pc, #436]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d063      	beq.n	8003592 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80034d4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034dc:	633b      	str	r3, [r7, #48]	; 0x30
 80034de:	2300      	movs	r3, #0
 80034e0:	637b      	str	r3, [r7, #52]	; 0x34
 80034e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80034e6:	4622      	mov	r2, r4
 80034e8:	462b      	mov	r3, r5
 80034ea:	f04f 0000 	mov.w	r0, #0
 80034ee:	f04f 0100 	mov.w	r1, #0
 80034f2:	0159      	lsls	r1, r3, #5
 80034f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f8:	0150      	lsls	r0, r2, #5
 80034fa:	4602      	mov	r2, r0
 80034fc:	460b      	mov	r3, r1
 80034fe:	4621      	mov	r1, r4
 8003500:	1a51      	subs	r1, r2, r1
 8003502:	6139      	str	r1, [r7, #16]
 8003504:	4629      	mov	r1, r5
 8003506:	eb63 0301 	sbc.w	r3, r3, r1
 800350a:	617b      	str	r3, [r7, #20]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003518:	4659      	mov	r1, fp
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	4651      	mov	r1, sl
 800351e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003522:	4651      	mov	r1, sl
 8003524:	018a      	lsls	r2, r1, #6
 8003526:	4651      	mov	r1, sl
 8003528:	ebb2 0801 	subs.w	r8, r2, r1
 800352c:	4659      	mov	r1, fp
 800352e:	eb63 0901 	sbc.w	r9, r3, r1
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800353e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003546:	4690      	mov	r8, r2
 8003548:	4699      	mov	r9, r3
 800354a:	4623      	mov	r3, r4
 800354c:	eb18 0303 	adds.w	r3, r8, r3
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	462b      	mov	r3, r5
 8003554:	eb49 0303 	adc.w	r3, r9, r3
 8003558:	60fb      	str	r3, [r7, #12]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003566:	4629      	mov	r1, r5
 8003568:	024b      	lsls	r3, r1, #9
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003570:	4621      	mov	r1, r4
 8003572:	024a      	lsls	r2, r1, #9
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800357a:	2200      	movs	r2, #0
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
 800357e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003580:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003584:	f7fc fe2c 	bl	80001e0 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003590:	e058      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	099b      	lsrs	r3, r3, #6
 8003598:	2200      	movs	r2, #0
 800359a:	4618      	mov	r0, r3
 800359c:	4611      	mov	r1, r2
 800359e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035a2:	623b      	str	r3, [r7, #32]
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	; 0x24
 80035a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035ac:	4642      	mov	r2, r8
 80035ae:	464b      	mov	r3, r9
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0159      	lsls	r1, r3, #5
 80035ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035be:	0150      	lsls	r0, r2, #5
 80035c0:	4602      	mov	r2, r0
 80035c2:	460b      	mov	r3, r1
 80035c4:	4641      	mov	r1, r8
 80035c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ca:	4649      	mov	r1, r9
 80035cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80035dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80035e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80035e4:	ebb2 040a 	subs.w	r4, r2, sl
 80035e8:	eb63 050b 	sbc.w	r5, r3, fp
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	f04f 0300 	mov.w	r3, #0
 80035f4:	00eb      	lsls	r3, r5, #3
 80035f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fa:	00e2      	lsls	r2, r4, #3
 80035fc:	4614      	mov	r4, r2
 80035fe:	461d      	mov	r5, r3
 8003600:	4643      	mov	r3, r8
 8003602:	18e3      	adds	r3, r4, r3
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	464b      	mov	r3, r9
 8003608:	eb45 0303 	adc.w	r3, r5, r3
 800360c:	607b      	str	r3, [r7, #4]
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9d7 4500 	ldrd	r4, r5, [r7]
 800361a:	4629      	mov	r1, r5
 800361c:	028b      	lsls	r3, r1, #10
 800361e:	4621      	mov	r1, r4
 8003620:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003624:	4621      	mov	r1, r4
 8003626:	028a      	lsls	r2, r1, #10
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800362e:	2200      	movs	r2, #0
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	61fa      	str	r2, [r7, #28]
 8003634:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003638:	f7fc fdd2 	bl	80001e0 <__aeabi_uldivmod>
 800363c:	4602      	mov	r2, r0
 800363e:	460b      	mov	r3, r1
 8003640:	4613      	mov	r3, r2
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_RCC_GetSysClockFreq+0x200>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	0c1b      	lsrs	r3, r3, #16
 800364a:	f003 0303 	and.w	r3, r3, #3
 800364e:	3301      	adds	r3, #1
 8003650:	005b      	lsls	r3, r3, #1
 8003652:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003654:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003658:	fbb2 f3f3 	udiv	r3, r2, r3
 800365c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800365e:	e002      	b.n	8003666 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003660:	4b05      	ldr	r3, [pc, #20]	; (8003678 <HAL_RCC_GetSysClockFreq+0x204>)
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003668:	4618      	mov	r0, r3
 800366a:	3750      	adds	r7, #80	; 0x50
 800366c:	46bd      	mov	sp, r7
 800366e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003672:	bf00      	nop
 8003674:	40023800 	.word	0x40023800
 8003678:	00f42400 	.word	0x00f42400
 800367c:	007a1200 	.word	0x007a1200

08003680 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <HAL_RCC_GetHCLKFreq+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
}
 8003688:	4618      	mov	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	20000008 	.word	0x20000008

08003698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800369c:	f7ff fff0 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036a0:	4602      	mov	r2, r0
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	0a9b      	lsrs	r3, r3, #10
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	4903      	ldr	r1, [pc, #12]	; (80036bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80036ae:	5ccb      	ldrb	r3, [r1, r3]
 80036b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40023800 	.word	0x40023800
 80036bc:	0800a878 	.word	0x0800a878

080036c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036c4:	f7ff ffdc 	bl	8003680 <HAL_RCC_GetHCLKFreq>
 80036c8:	4602      	mov	r2, r0
 80036ca:	4b05      	ldr	r3, [pc, #20]	; (80036e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	0b5b      	lsrs	r3, r3, #13
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	4903      	ldr	r1, [pc, #12]	; (80036e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036d6:	5ccb      	ldrb	r3, [r1, r3]
 80036d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036dc:	4618      	mov	r0, r3
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40023800 	.word	0x40023800
 80036e4:	0800a878 	.word	0x0800a878

080036e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	220f      	movs	r2, #15
 80036f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036f8:	4b12      	ldr	r3, [pc, #72]	; (8003744 <HAL_RCC_GetClockConfig+0x5c>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f003 0203 	and.w	r2, r3, #3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_RCC_GetClockConfig+0x5c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003710:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_RCC_GetClockConfig+0x5c>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800371c:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_RCC_GetClockConfig+0x5c>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	08db      	lsrs	r3, r3, #3
 8003722:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <HAL_RCC_GetClockConfig+0x60>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0207 	and.w	r2, r3, #7
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800
 8003748:	40023c00 	.word	0x40023c00

0800374c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003770:	2b00      	cmp	r3, #0
 8003772:	d038      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003774:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003776:	2200      	movs	r2, #0
 8003778:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800377a:	f7fe fb5f 	bl	8001e3c <HAL_GetTick>
 800377e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003782:	f7fe fb5b 	bl	8001e3c <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0bd      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003794:	4b61      	ldr	r3, [pc, #388]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f0      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	019b      	lsls	r3, r3, #6
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	071b      	lsls	r3, r3, #28
 80037b2:	495a      	ldr	r1, [pc, #360]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80037bc:	2201      	movs	r2, #1
 80037be:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80037c0:	f7fe fb3c 	bl	8001e3c <HAL_GetTick>
 80037c4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80037c8:	f7fe fb38 	bl	8001e3c <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e09a      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80037da:	4b50      	ldr	r3, [pc, #320]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d0f0      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 8083 	beq.w	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037f4:	2300      	movs	r3, #0
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fc:	4a47      	ldr	r2, [pc, #284]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	6413      	str	r3, [r2, #64]	; 0x40
 8003804:	4b45      	ldr	r3, [pc, #276]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800380c:	60fb      	str	r3, [r7, #12]
 800380e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003810:	4b43      	ldr	r3, [pc, #268]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a42      	ldr	r2, [pc, #264]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800381c:	f7fe fb0e 	bl	8001e3c <HAL_GetTick>
 8003820:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003824:	f7fe fb0a 	bl	8001e3c <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e06c      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003836:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0f0      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003842:	4b36      	ldr	r3, [pc, #216]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800384a:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02f      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800385a:	693a      	ldr	r2, [r7, #16]
 800385c:	429a      	cmp	r2, r3
 800385e:	d028      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003860:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003868:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800386a:	4b2e      	ldr	r3, [pc, #184]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800386c:	2201      	movs	r2, #1
 800386e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003870:	4b2c      	ldr	r3, [pc, #176]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003876:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800387c:	4b27      	ldr	r3, [pc, #156]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b01      	cmp	r3, #1
 8003886:	d114      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003888:	f7fe fad8 	bl	8001e3c <HAL_GetTick>
 800388c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800388e:	e00a      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003890:	f7fe fad4 	bl	8001e3c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	f241 3288 	movw	r2, #5000	; 0x1388
 800389e:	4293      	cmp	r3, r2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e034      	b.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a6:	4b1d      	ldr	r3, [pc, #116]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0ee      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038be:	d10d      	bne.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x190>
 80038c0:	4b16      	ldr	r3, [pc, #88]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80038d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038d4:	4911      	ldr	r1, [pc, #68]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	608b      	str	r3, [r1, #8]
 80038da:	e005      	b.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80038dc:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038e2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038e6:	6093      	str	r3, [r2, #8]
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038ea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	4909      	ldr	r1, [pc, #36]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0308 	and.w	r3, r3, #8
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	7d1a      	ldrb	r2, [r3, #20]
 800390a:	4b07      	ldr	r3, [pc, #28]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800390c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	42470068 	.word	0x42470068
 800391c:	40023800 	.word	0x40023800
 8003920:	40007000 	.word	0x40007000
 8003924:	42470e40 	.word	0x42470e40
 8003928:	424711e0 	.word	0x424711e0

0800392c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e066      	b.n	8003a10 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	7f5b      	ldrb	r3, [r3, #29]
 8003946:	b2db      	uxtb	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fd fe68 	bl	8001628 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	22ca      	movs	r2, #202	; 0xca
 8003964:	625a      	str	r2, [r3, #36]	; 0x24
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2253      	movs	r2, #83	; 0x53
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f998 	bl	8003ca4 <RTC_EnterInitMode>
 8003974:	4603      	mov	r3, r0
 8003976:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003978:	7bfb      	ldrb	r3, [r7, #15]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d12c      	bne.n	80039d8 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800398c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003990:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6899      	ldr	r1, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68d2      	ldr	r2, [r2, #12]
 80039b8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6919      	ldr	r1, [r3, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	041a      	lsls	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f99f 	bl	8003d12 <RTC_ExitInitMode>
 80039d4:	4603      	mov	r3, r0
 80039d6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d113      	bne.n	8003a06 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80039ec:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699a      	ldr	r2, [r3, #24]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	22ff      	movs	r2, #255	; 0xff
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003a18:	b590      	push	{r4, r7, lr}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	7f1b      	ldrb	r3, [r3, #28]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_RTC_SetTime+0x1c>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e087      	b.n	8003b44 <HAL_RTC_SetTime+0x12c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d126      	bne.n	8003a94 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	2200      	movs	r2, #0
 8003a58:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 f97c 	bl	8003d5c <RTC_ByteToBcd2>
 8003a64:	4603      	mov	r3, r0
 8003a66:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	785b      	ldrb	r3, [r3, #1]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 f975 	bl	8003d5c <RTC_ByteToBcd2>
 8003a72:	4603      	mov	r3, r0
 8003a74:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a76:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	789b      	ldrb	r3, [r3, #2]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f000 f96d 	bl	8003d5c <RTC_ByteToBcd2>
 8003a82:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a84:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	78db      	ldrb	r3, [r3, #3]
 8003a8c:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e018      	b.n	8003ac6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	785b      	ldrb	r3, [r3, #1]
 8003ab2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ab4:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003ab6:	68ba      	ldr	r2, [r7, #8]
 8003ab8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003aba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	78db      	ldrb	r3, [r3, #3]
 8003ac0:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	22ca      	movs	r2, #202	; 0xca
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2253      	movs	r2, #83	; 0x53
 8003ad4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8e4 	bl	8003ca4 <RTC_EnterInitMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003ae0:	7cfb      	ldrb	r3, [r7, #19]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d120      	bne.n	8003b28 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003af0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003af4:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b04:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6899      	ldr	r1, [r3, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 f8f7 	bl	8003d12 <RTC_ExitInitMode>
 8003b24:	4603      	mov	r3, r0
 8003b26:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d102      	bne.n	8003b34 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	22ff      	movs	r2, #255	; 0xff
 8003b3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	771a      	strb	r2, [r3, #28]

  return status;
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003b4c:	b590      	push	{r4, r7, lr}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	7f1b      	ldrb	r3, [r3, #28]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d101      	bne.n	8003b68 <HAL_RTC_SetDate+0x1c>
 8003b64:	2302      	movs	r3, #2
 8003b66:	e071      	b.n	8003c4c <HAL_RTC_SetDate+0x100>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2202      	movs	r2, #2
 8003b72:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10e      	bne.n	8003b98 <HAL_RTC_SetDate+0x4c>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	785b      	ldrb	r3, [r3, #1]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d008      	beq.n	8003b98 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	f023 0310 	bic.w	r3, r3, #16
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	330a      	adds	r3, #10
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d11c      	bne.n	8003bd8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	78db      	ldrb	r3, [r3, #3]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f000 f8da 	bl	8003d5c <RTC_ByteToBcd2>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f000 f8d3 	bl	8003d5c <RTC_ByteToBcd2>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bba:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	789b      	ldrb	r3, [r3, #2]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 f8cb 	bl	8003d5c <RTC_ByteToBcd2>
 8003bc6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003bc8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e00e      	b.n	8003bf6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	78db      	ldrb	r3, [r3, #3]
 8003bdc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	785b      	ldrb	r3, [r3, #1]
 8003be2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003be4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003be6:	68ba      	ldr	r2, [r7, #8]
 8003be8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003bea:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	22ca      	movs	r2, #202	; 0xca
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2253      	movs	r2, #83	; 0x53
 8003c04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f84c 	bl	8003ca4 <RTC_EnterInitMode>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c10:	7cfb      	ldrb	r3, [r7, #19]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d10c      	bne.n	8003c30 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003c20:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003c24:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 f873 	bl	8003d12 <RTC_ExitInitMode>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d102      	bne.n	8003c3c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	771a      	strb	r2, [r3, #28]

  return status;
 8003c4a:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd90      	pop	{r4, r7, pc}

08003c54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c70:	f7fe f8e4 	bl	8001e3c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c76:	e009      	b.n	8003c8c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c78:	f7fe f8e0 	bl	8001e3c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c86:	d901      	bls.n	8003c8c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e007      	b.n	8003c9c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0ee      	beq.n	8003c78 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3710      	adds	r7, #16
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d122      	bne.n	8003d08 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	68da      	ldr	r2, [r3, #12]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cd0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd2:	f7fe f8b3 	bl	8001e3c <HAL_GetTick>
 8003cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cd8:	e00c      	b.n	8003cf4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cda:	f7fe f8af 	bl	8001e3c <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce8:	d904      	bls.n	8003cf4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2204      	movs	r2, #4
 8003cee:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d102      	bne.n	8003d08 <RTC_EnterInitMode+0x64>
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d1e8      	bne.n	8003cda <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b084      	sub	sp, #16
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d2c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f003 0320 	and.w	r3, r3, #32
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10a      	bne.n	8003d52 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff ff89 	bl	8003c54 <HAL_RTC_WaitForSynchro>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d004      	beq.n	8003d52 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2204      	movs	r2, #4
 8003d4c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	4603      	mov	r3, r0
 8003d64:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003d6a:	e005      	b.n	8003d78 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003d72:	79fb      	ldrb	r3, [r7, #7]
 8003d74:	3b0a      	subs	r3, #10
 8003d76:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003d78:	79fb      	ldrb	r3, [r7, #7]
 8003d7a:	2b09      	cmp	r3, #9
 8003d7c:	d8f6      	bhi.n	8003d6c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	b2db      	uxtb	r3, r3
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3714      	adds	r7, #20
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e041      	b.n	8003e2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d106      	bne.n	8003dc2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7fd fc5f 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	4619      	mov	r1, r3
 8003dd4:	4610      	mov	r0, r2
 8003dd6:	f000 fff5 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2201      	movs	r2, #1
 8003df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d001      	beq.n	8003e4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e044      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2202      	movs	r2, #2
 8003e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 0201 	orr.w	r2, r2, #1
 8003e62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a1e      	ldr	r2, [pc, #120]	; (8003ee4 <HAL_TIM_Base_Start_IT+0xb0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d018      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e76:	d013      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ee8 <HAL_TIM_Base_Start_IT+0xb4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a19      	ldr	r2, [pc, #100]	; (8003eec <HAL_TIM_Base_Start_IT+0xb8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d009      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a17      	ldr	r2, [pc, #92]	; (8003ef0 <HAL_TIM_Base_Start_IT+0xbc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x6c>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xc0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d010      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40000400 	.word	0x40000400
 8003eec:	40000800 	.word	0x40000800
 8003ef0:	40000c00 	.word	0x40000c00
 8003ef4:	40014000 	.word	0x40014000

08003ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e041      	b.n	8003f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd fc40 	bl	80017a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4619      	mov	r1, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	f000 ff44 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <HAL_TIM_PWM_Start+0x24>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	e022      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b04      	cmp	r3, #4
 8003fc0:	d109      	bne.n	8003fd6 <HAL_TIM_PWM_Start+0x3e>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	e015      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d109      	bne.n	8003ff0 <HAL_TIM_PWM_Start+0x58>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	bf14      	ite	ne
 8003fe8:	2301      	movne	r3, #1
 8003fea:	2300      	moveq	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	e008      	b.n	8004002 <HAL_TIM_PWM_Start+0x6a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e068      	b.n	80040dc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_TIM_PWM_Start+0x82>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004018:	e013      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b04      	cmp	r3, #4
 800401e:	d104      	bne.n	800402a <HAL_TIM_PWM_Start+0x92>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004028:	e00b      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	2b08      	cmp	r3, #8
 800402e:	d104      	bne.n	800403a <HAL_TIM_PWM_Start+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004038:	e003      	b.n	8004042 <HAL_TIM_PWM_Start+0xaa>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	6839      	ldr	r1, [r7, #0]
 800404a:	4618      	mov	r0, r3
 800404c:	f001 fa7e 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a23      	ldr	r2, [pc, #140]	; (80040e4 <HAL_TIM_PWM_Start+0x14c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d107      	bne.n	800406a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1d      	ldr	r2, [pc, #116]	; (80040e4 <HAL_TIM_PWM_Start+0x14c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d018      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x10e>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d013      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x10e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_TIM_PWM_Start+0x150>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00e      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x10e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a17      	ldr	r2, [pc, #92]	; (80040ec <HAL_TIM_PWM_Start+0x154>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d009      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x10e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIM_PWM_Start+0x158>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d004      	beq.n	80040a6 <HAL_TIM_PWM_Start+0x10e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <HAL_TIM_PWM_Start+0x15c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d111      	bne.n	80040ca <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2b06      	cmp	r3, #6
 80040b6:	d010      	beq.n	80040da <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c8:	e007      	b.n	80040da <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f042 0201 	orr.w	r2, r2, #1
 80040d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	40010000 	.word	0x40010000
 80040e8:	40000400 	.word	0x40000400
 80040ec:	40000800 	.word	0x40000800
 80040f0:	40000c00 	.word	0x40000c00
 80040f4:	40014000 	.word	0x40014000

080040f8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2200      	movs	r2, #0
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	4618      	mov	r0, r3
 800410c:	f001 fa1e 	bl	800554c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a29      	ldr	r2, [pc, #164]	; (80041bc <HAL_TIM_PWM_Stop+0xc4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d117      	bne.n	800414a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6a1a      	ldr	r2, [r3, #32]
 8004120:	f241 1311 	movw	r3, #4369	; 0x1111
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10f      	bne.n	800414a <HAL_TIM_PWM_Stop+0x52>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6a1a      	ldr	r2, [r3, #32]
 8004130:	f240 4344 	movw	r3, #1092	; 0x444
 8004134:	4013      	ands	r3, r2
 8004136:	2b00      	cmp	r3, #0
 8004138:	d107      	bne.n	800414a <HAL_TIM_PWM_Stop+0x52>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004148:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6a1a      	ldr	r2, [r3, #32]
 8004150:	f241 1311 	movw	r3, #4369	; 0x1111
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d10f      	bne.n	800417a <HAL_TIM_PWM_Stop+0x82>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6a1a      	ldr	r2, [r3, #32]
 8004160:	f240 4344 	movw	r3, #1092	; 0x444
 8004164:	4013      	ands	r3, r2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d107      	bne.n	800417a <HAL_TIM_PWM_Stop+0x82>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_TIM_PWM_Stop+0x92>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004188:	e013      	b.n	80041b2 <HAL_TIM_PWM_Stop+0xba>
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	2b04      	cmp	r3, #4
 800418e:	d104      	bne.n	800419a <HAL_TIM_PWM_Stop+0xa2>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004198:	e00b      	b.n	80041b2 <HAL_TIM_PWM_Stop+0xba>
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	2b08      	cmp	r3, #8
 800419e:	d104      	bne.n	80041aa <HAL_TIM_PWM_Stop+0xb2>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a8:	e003      	b.n	80041b2 <HAL_TIM_PWM_Stop+0xba>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3708      	adds	r7, #8
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40010000 	.word	0x40010000

080041c0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start_IT+0x28>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e022      	b.n	800422e <HAL_TIM_PWM_Start_IT+0x6e>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d109      	bne.n	8004202 <HAL_TIM_PWM_Start_IT+0x42>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e015      	b.n	800422e <HAL_TIM_PWM_Start_IT+0x6e>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start_IT+0x5c>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e008      	b.n	800422e <HAL_TIM_PWM_Start_IT+0x6e>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0b3      	b.n	800439e <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start_IT+0x86>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Start_IT+0xae>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start_IT+0x96>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_PWM_Start_IT+0xae>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start_IT+0xa6>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_PWM_Start_IT+0xae>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	2b0c      	cmp	r3, #12
 8004272:	d841      	bhi.n	80042f8 <HAL_TIM_PWM_Start_IT+0x138>
 8004274:	a201      	add	r2, pc, #4	; (adr r2, 800427c <HAL_TIM_PWM_Start_IT+0xbc>)
 8004276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800427a:	bf00      	nop
 800427c:	080042b1 	.word	0x080042b1
 8004280:	080042f9 	.word	0x080042f9
 8004284:	080042f9 	.word	0x080042f9
 8004288:	080042f9 	.word	0x080042f9
 800428c:	080042c3 	.word	0x080042c3
 8004290:	080042f9 	.word	0x080042f9
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042f9 	.word	0x080042f9
 800429c:	080042d5 	.word	0x080042d5
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042e7 	.word	0x080042e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f042 0202 	orr.w	r2, r2, #2
 80042be:	60da      	str	r2, [r3, #12]
      break;
 80042c0:	e01d      	b.n	80042fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f042 0204 	orr.w	r2, r2, #4
 80042d0:	60da      	str	r2, [r3, #12]
      break;
 80042d2:	e014      	b.n	80042fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0208 	orr.w	r2, r2, #8
 80042e2:	60da      	str	r2, [r3, #12]
      break;
 80042e4:	e00b      	b.n	80042fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0210 	orr.w	r2, r2, #16
 80042f4:	60da      	str	r2, [r3, #12]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80042fe:	7bfb      	ldrb	r3, [r7, #15]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d14b      	bne.n	800439c <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2201      	movs	r2, #1
 800430a:	6839      	ldr	r1, [r7, #0]
 800430c:	4618      	mov	r0, r3
 800430e:	f001 f91d 	bl	800554c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a24      	ldr	r2, [pc, #144]	; (80043a8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d107      	bne.n	800432c <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800432a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a1d      	ldr	r2, [pc, #116]	; (80043a8 <HAL_TIM_PWM_Start_IT+0x1e8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d018      	beq.n	8004368 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800433e:	d013      	beq.n	8004368 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a19      	ldr	r2, [pc, #100]	; (80043ac <HAL_TIM_PWM_Start_IT+0x1ec>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00e      	beq.n	8004368 <HAL_TIM_PWM_Start_IT+0x1a8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d009      	beq.n	8004368 <HAL_TIM_PWM_Start_IT+0x1a8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d004      	beq.n	8004368 <HAL_TIM_PWM_Start_IT+0x1a8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a15      	ldr	r2, [pc, #84]	; (80043b8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d111      	bne.n	800438c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 0307 	and.w	r3, r3, #7
 8004372:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2b06      	cmp	r3, #6
 8004378:	d010      	beq.n	800439c <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f042 0201 	orr.w	r2, r2, #1
 8004388:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438a:	e007      	b.n	800439c <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f042 0201 	orr.w	r2, r2, #1
 800439a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	40010000 	.word	0x40010000
 80043ac:	40000400 	.word	0x40000400
 80043b0:	40000800 	.word	0x40000800
 80043b4:	40000c00 	.word	0x40000c00
 80043b8:	40014000 	.word	0x40014000

080043bc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e041      	b.n	8004452 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f839 	bl	800445a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2202      	movs	r2, #2
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3304      	adds	r3, #4
 80043f8:	4619      	mov	r1, r3
 80043fa:	4610      	mov	r0, r2
 80043fc:	f000 fce2 	bl	8004dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2201      	movs	r2, #1
 800441c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3708      	adds	r7, #8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
	...

08004470 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d104      	bne.n	800448e <HAL_TIM_IC_Start_IT+0x1e>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e013      	b.n	80044b6 <HAL_TIM_IC_Start_IT+0x46>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b04      	cmp	r3, #4
 8004492:	d104      	bne.n	800449e <HAL_TIM_IC_Start_IT+0x2e>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800449a:	b2db      	uxtb	r3, r3
 800449c:	e00b      	b.n	80044b6 <HAL_TIM_IC_Start_IT+0x46>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_IC_Start_IT+0x3e>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	e003      	b.n	80044b6 <HAL_TIM_IC_Start_IT+0x46>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d104      	bne.n	80044c8 <HAL_TIM_IC_Start_IT+0x58>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e013      	b.n	80044f0 <HAL_TIM_IC_Start_IT+0x80>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d104      	bne.n	80044d8 <HAL_TIM_IC_Start_IT+0x68>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e00b      	b.n	80044f0 <HAL_TIM_IC_Start_IT+0x80>
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b08      	cmp	r3, #8
 80044dc:	d104      	bne.n	80044e8 <HAL_TIM_IC_Start_IT+0x78>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	e003      	b.n	80044f0 <HAL_TIM_IC_Start_IT+0x80>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80044f2:	7bbb      	ldrb	r3, [r7, #14]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80044f8:	7b7b      	ldrb	r3, [r7, #13]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0c2      	b.n	8004688 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d104      	bne.n	8004512 <HAL_TIM_IC_Start_IT+0xa2>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2202      	movs	r2, #2
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004510:	e013      	b.n	800453a <HAL_TIM_IC_Start_IT+0xca>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b04      	cmp	r3, #4
 8004516:	d104      	bne.n	8004522 <HAL_TIM_IC_Start_IT+0xb2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004520:	e00b      	b.n	800453a <HAL_TIM_IC_Start_IT+0xca>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b08      	cmp	r3, #8
 8004526:	d104      	bne.n	8004532 <HAL_TIM_IC_Start_IT+0xc2>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004530:	e003      	b.n	800453a <HAL_TIM_IC_Start_IT+0xca>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2202      	movs	r2, #2
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <HAL_TIM_IC_Start_IT+0xda>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	e013      	b.n	8004572 <HAL_TIM_IC_Start_IT+0x102>
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	2b04      	cmp	r3, #4
 800454e:	d104      	bne.n	800455a <HAL_TIM_IC_Start_IT+0xea>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004558:	e00b      	b.n	8004572 <HAL_TIM_IC_Start_IT+0x102>
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	2b08      	cmp	r3, #8
 800455e:	d104      	bne.n	800456a <HAL_TIM_IC_Start_IT+0xfa>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004568:	e003      	b.n	8004572 <HAL_TIM_IC_Start_IT+0x102>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d841      	bhi.n	80045fc <HAL_TIM_IC_Start_IT+0x18c>
 8004578:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_IC_Start_IT+0x110>)
 800457a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800457e:	bf00      	nop
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045fd 	.word	0x080045fd
 8004588:	080045fd 	.word	0x080045fd
 800458c:	080045fd 	.word	0x080045fd
 8004590:	080045c7 	.word	0x080045c7
 8004594:	080045fd 	.word	0x080045fd
 8004598:	080045fd 	.word	0x080045fd
 800459c:	080045fd 	.word	0x080045fd
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045fd 	.word	0x080045fd
 80045a8:	080045fd 	.word	0x080045fd
 80045ac:	080045fd 	.word	0x080045fd
 80045b0:	080045eb 	.word	0x080045eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0202 	orr.w	r2, r2, #2
 80045c2:	60da      	str	r2, [r3, #12]
      break;
 80045c4:	e01d      	b.n	8004602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	68da      	ldr	r2, [r3, #12]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0204 	orr.w	r2, r2, #4
 80045d4:	60da      	str	r2, [r3, #12]
      break;
 80045d6:	e014      	b.n	8004602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0208 	orr.w	r2, r2, #8
 80045e6:	60da      	str	r2, [r3, #12]
      break;
 80045e8:	e00b      	b.n	8004602 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68da      	ldr	r2, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f042 0210 	orr.w	r2, r2, #16
 80045f8:	60da      	str	r2, [r3, #12]
      break;
 80045fa:	e002      	b.n	8004602 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004600:	bf00      	nop
  }

  if (status == HAL_OK)
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d13e      	bne.n	8004686 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2201      	movs	r2, #1
 800460e:	6839      	ldr	r1, [r7, #0]
 8004610:	4618      	mov	r0, r3
 8004612:	f000 ff9b 	bl	800554c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_TIM_IC_Start_IT+0x220>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d018      	beq.n	8004652 <HAL_TIM_IC_Start_IT+0x1e2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004628:	d013      	beq.n	8004652 <HAL_TIM_IC_Start_IT+0x1e2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_TIM_IC_Start_IT+0x224>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d00e      	beq.n	8004652 <HAL_TIM_IC_Start_IT+0x1e2>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a17      	ldr	r2, [pc, #92]	; (8004698 <HAL_TIM_IC_Start_IT+0x228>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d009      	beq.n	8004652 <HAL_TIM_IC_Start_IT+0x1e2>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a16      	ldr	r2, [pc, #88]	; (800469c <HAL_TIM_IC_Start_IT+0x22c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIM_IC_Start_IT+0x1e2>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a14      	ldr	r2, [pc, #80]	; (80046a0 <HAL_TIM_IC_Start_IT+0x230>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d111      	bne.n	8004676 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b06      	cmp	r3, #6
 8004662:	d010      	beq.n	8004686 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0201 	orr.w	r2, r2, #1
 8004672:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004674:	e007      	b.n	8004686 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0201 	orr.w	r2, r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004686:	7bfb      	ldrb	r3, [r7, #15]
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	40010000 	.word	0x40010000
 8004694:	40000400 	.word	0x40000400
 8004698:	40000800 	.word	0x40000800
 800469c:	40000c00 	.word	0x40000c00
 80046a0:	40014000 	.word	0x40014000

080046a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0202 	mvn.w	r2, #2
 80046d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	f003 0303 	and.w	r3, r3, #3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f7fd fb14 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fb4a 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 fb51 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b04      	cmp	r3, #4
 800470c:	d122      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d11b      	bne.n	8004754 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0204 	mvn.w	r2, #4
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2202      	movs	r2, #2
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fd faea 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fb20 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 fb27 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b08      	cmp	r3, #8
 8004760:	d122      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68db      	ldr	r3, [r3, #12]
 8004768:	f003 0308 	and.w	r3, r3, #8
 800476c:	2b08      	cmp	r3, #8
 800476e:	d11b      	bne.n	80047a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0208 	mvn.w	r2, #8
 8004778:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2204      	movs	r2, #4
 800477e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd fac0 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 faf6 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 fafd 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d122      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d11b      	bne.n	80047fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2208      	movs	r2, #8
 80047d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd fa96 	bl	8001d14 <HAL_TIM_IC_CaptureCallback>
 80047e8:	e005      	b.n	80047f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 facc 	bl	8004d88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fad3 	bl	8004d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d10e      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b01      	cmp	r3, #1
 8004816:	d107      	bne.n	8004828 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fe58 	bl	80014d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d10e      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d107      	bne.n	8004854 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800484c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 ff1a 	bl	8005688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	d10e      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d107      	bne.n	8004880 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fa98 	bl	8004db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b20      	cmp	r3, #32
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b20      	cmp	r3, #32
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0220 	mvn.w	r2, #32
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fee4 	bl	8005674 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048ac:	bf00      	nop
 80048ae:	3708      	adds	r7, #8
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e088      	b.n	80049e4 <HAL_TIM_IC_ConfigChannel+0x130>
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d11b      	bne.n	8004918 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6818      	ldr	r0, [r3, #0]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f000 fc74 	bl	80051dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 020c 	bic.w	r2, r2, #12
 8004902:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6999      	ldr	r1, [r3, #24]
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	689a      	ldr	r2, [r3, #8]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	619a      	str	r2, [r3, #24]
 8004916:	e060      	b.n	80049da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b04      	cmp	r3, #4
 800491c:	d11c      	bne.n	8004958 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f000 fcec 	bl	800530a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	699a      	ldr	r2, [r3, #24]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004940:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6999      	ldr	r1, [r3, #24]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	021a      	lsls	r2, r3, #8
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	619a      	str	r2, [r3, #24]
 8004956:	e040      	b.n	80049da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b08      	cmp	r3, #8
 800495c:	d11b      	bne.n	8004996 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	f000 fd39 	bl	80053e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	69da      	ldr	r2, [r3, #28]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 020c 	bic.w	r2, r2, #12
 8004980:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69d9      	ldr	r1, [r3, #28]
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	689a      	ldr	r2, [r3, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	61da      	str	r2, [r3, #28]
 8004994:	e021      	b.n	80049da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b0c      	cmp	r3, #12
 800499a:	d11c      	bne.n	80049d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	f000 fd56 	bl	800545c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69da      	ldr	r2, [r3, #28]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69d9      	ldr	r1, [r3, #28]
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	021a      	lsls	r2, r3, #8
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	61da      	str	r2, [r3, #28]
 80049d4:	e001      	b.n	80049da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e0ae      	b.n	8004b68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2b0c      	cmp	r3, #12
 8004a16:	f200 809f 	bhi.w	8004b58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a1a:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a20:	08004a55 	.word	0x08004a55
 8004a24:	08004b59 	.word	0x08004b59
 8004a28:	08004b59 	.word	0x08004b59
 8004a2c:	08004b59 	.word	0x08004b59
 8004a30:	08004a95 	.word	0x08004a95
 8004a34:	08004b59 	.word	0x08004b59
 8004a38:	08004b59 	.word	0x08004b59
 8004a3c:	08004b59 	.word	0x08004b59
 8004a40:	08004ad7 	.word	0x08004ad7
 8004a44:	08004b59 	.word	0x08004b59
 8004a48:	08004b59 	.word	0x08004b59
 8004a4c:	08004b59 	.word	0x08004b59
 8004a50:	08004b17 	.word	0x08004b17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68b9      	ldr	r1, [r7, #8]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f000 fa32 	bl	8004ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	699a      	ldr	r2, [r3, #24]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f042 0208 	orr.w	r2, r2, #8
 8004a6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699a      	ldr	r2, [r3, #24]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f022 0204 	bic.w	r2, r2, #4
 8004a7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6999      	ldr	r1, [r3, #24]
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	691a      	ldr	r2, [r3, #16]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	619a      	str	r2, [r3, #24]
      break;
 8004a92:	e064      	b.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	68b9      	ldr	r1, [r7, #8]
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 fa78 	bl	8004f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	699a      	ldr	r2, [r3, #24]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699a      	ldr	r2, [r3, #24]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6999      	ldr	r1, [r3, #24]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	021a      	lsls	r2, r3, #8
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	619a      	str	r2, [r3, #24]
      break;
 8004ad4:	e043      	b.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fac3 	bl	8005068 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	69da      	ldr	r2, [r3, #28]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0208 	orr.w	r2, r2, #8
 8004af0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	69da      	ldr	r2, [r3, #28]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0204 	bic.w	r2, r2, #4
 8004b00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69d9      	ldr	r1, [r3, #28]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	61da      	str	r2, [r3, #28]
      break;
 8004b14:	e023      	b.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68b9      	ldr	r1, [r7, #8]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f000 fb0d 	bl	800513c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	69da      	ldr	r2, [r3, #28]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	69d9      	ldr	r1, [r3, #28]
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	021a      	lsls	r2, r3, #8
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	61da      	str	r2, [r3, #28]
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004b5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d101      	bne.n	8004b8c <HAL_TIM_ConfigClockSource+0x1c>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	e0b4      	b.n	8004cf6 <HAL_TIM_ConfigClockSource+0x186>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004baa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bc4:	d03e      	beq.n	8004c44 <HAL_TIM_ConfigClockSource+0xd4>
 8004bc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bca:	f200 8087 	bhi.w	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bd2:	f000 8086 	beq.w	8004ce2 <HAL_TIM_ConfigClockSource+0x172>
 8004bd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bda:	d87f      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004bdc:	2b70      	cmp	r3, #112	; 0x70
 8004bde:	d01a      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0xa6>
 8004be0:	2b70      	cmp	r3, #112	; 0x70
 8004be2:	d87b      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004be4:	2b60      	cmp	r3, #96	; 0x60
 8004be6:	d050      	beq.n	8004c8a <HAL_TIM_ConfigClockSource+0x11a>
 8004be8:	2b60      	cmp	r3, #96	; 0x60
 8004bea:	d877      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004bec:	2b50      	cmp	r3, #80	; 0x50
 8004bee:	d03c      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xfa>
 8004bf0:	2b50      	cmp	r3, #80	; 0x50
 8004bf2:	d873      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d058      	beq.n	8004caa <HAL_TIM_ConfigClockSource+0x13a>
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d86f      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004bfc:	2b30      	cmp	r3, #48	; 0x30
 8004bfe:	d064      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15a>
 8004c00:	2b30      	cmp	r3, #48	; 0x30
 8004c02:	d86b      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004c04:	2b20      	cmp	r3, #32
 8004c06:	d060      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15a>
 8004c08:	2b20      	cmp	r3, #32
 8004c0a:	d867      	bhi.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d05c      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15a>
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d05a      	beq.n	8004cca <HAL_TIM_ConfigClockSource+0x15a>
 8004c14:	e062      	b.n	8004cdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6818      	ldr	r0, [r3, #0]
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6899      	ldr	r1, [r3, #8]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685a      	ldr	r2, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f000 fc71 	bl	800550c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	609a      	str	r2, [r3, #8]
      break;
 8004c42:	e04f      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6818      	ldr	r0, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6899      	ldr	r1, [r3, #8]
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f000 fc5a 	bl	800550c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c66:	609a      	str	r2, [r3, #8]
      break;
 8004c68:	e03c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6859      	ldr	r1, [r3, #4]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	461a      	mov	r2, r3
 8004c78:	f000 fb18 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2150      	movs	r1, #80	; 0x50
 8004c82:	4618      	mov	r0, r3
 8004c84:	f000 fc27 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004c88:	e02c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6818      	ldr	r0, [r3, #0]
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	461a      	mov	r2, r3
 8004c98:	f000 fb74 	bl	8005384 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2160      	movs	r1, #96	; 0x60
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fc17 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004ca8:	e01c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6818      	ldr	r0, [r3, #0]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	6859      	ldr	r1, [r3, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	f000 faf8 	bl	80052ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2140      	movs	r1, #64	; 0x40
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f000 fc07 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004cc8:	e00c      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f000 fbfe 	bl	80054d6 <TIM_ITRx_SetConfig>
      break;
 8004cda:	e003      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e000      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004ce2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
	...

08004d00 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b0c      	cmp	r3, #12
 8004d12:	d831      	bhi.n	8004d78 <HAL_TIM_ReadCapturedValue+0x78>
 8004d14:	a201      	add	r2, pc, #4	; (adr r2, 8004d1c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d51 	.word	0x08004d51
 8004d20:	08004d79 	.word	0x08004d79
 8004d24:	08004d79 	.word	0x08004d79
 8004d28:	08004d79 	.word	0x08004d79
 8004d2c:	08004d5b 	.word	0x08004d5b
 8004d30:	08004d79 	.word	0x08004d79
 8004d34:	08004d79 	.word	0x08004d79
 8004d38:	08004d79 	.word	0x08004d79
 8004d3c:	08004d65 	.word	0x08004d65
 8004d40:	08004d79 	.word	0x08004d79
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004d79 	.word	0x08004d79
 8004d4c:	08004d6f 	.word	0x08004d6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d56:	60fb      	str	r3, [r7, #12]

      break;
 8004d58:	e00f      	b.n	8004d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	60fb      	str	r3, [r7, #12]

      break;
 8004d62:	e00a      	b.n	8004d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	60fb      	str	r3, [r7, #12]

      break;
 8004d6c:	e005      	b.n	8004d7a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	60fb      	str	r3, [r7, #12]

      break;
 8004d76:	e000      	b.n	8004d7a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004d78:	bf00      	nop
  }

  return tmpreg;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a34      	ldr	r2, [pc, #208]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d00f      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004de2:	d00b      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a31      	ldr	r2, [pc, #196]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d007      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a30      	ldr	r2, [pc, #192]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_Base_SetConfig+0x38>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a2f      	ldr	r2, [pc, #188]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d108      	bne.n	8004e0e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a25      	ldr	r2, [pc, #148]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d01b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e1c:	d017      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a22      	ldr	r2, [pc, #136]	; (8004eac <TIM_Base_SetConfig+0xe8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a21      	ldr	r2, [pc, #132]	; (8004eb0 <TIM_Base_SetConfig+0xec>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00f      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a20      	ldr	r2, [pc, #128]	; (8004eb4 <TIM_Base_SetConfig+0xf0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00b      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a1f      	ldr	r2, [pc, #124]	; (8004eb8 <TIM_Base_SetConfig+0xf4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a1e      	ldr	r2, [pc, #120]	; (8004ebc <TIM_Base_SetConfig+0xf8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d003      	beq.n	8004e4e <TIM_Base_SetConfig+0x8a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <TIM_Base_SetConfig+0xfc>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a08      	ldr	r2, [pc, #32]	; (8004ea8 <TIM_Base_SetConfig+0xe4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d103      	bne.n	8004e94 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	615a      	str	r2, [r3, #20]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
 8004ea6:	bf00      	nop
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40000400 	.word	0x40000400
 8004eb0:	40000800 	.word	0x40000800
 8004eb4:	40000c00 	.word	0x40000c00
 8004eb8:	40014000 	.word	0x40014000
 8004ebc:	40014400 	.word	0x40014400
 8004ec0:	40014800 	.word	0x40014800

08004ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b087      	sub	sp, #28
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	f023 0201 	bic.w	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f023 0303 	bic.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	4313      	orrs	r3, r2
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 0302 	bic.w	r3, r3, #2
 8004f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a1c      	ldr	r2, [pc, #112]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10c      	bne.n	8004f3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f023 0308 	bic.w	r3, r3, #8
 8004f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0304 	bic.w	r3, r3, #4
 8004f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <TIM_OC1_SetConfig+0xc8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d111      	bne.n	8004f66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	695b      	ldr	r3, [r3, #20]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	693a      	ldr	r2, [r7, #16]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	621a      	str	r2, [r3, #32]
}
 8004f80:	bf00      	nop
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr
 8004f8c:	40010000 	.word	0x40010000

08004f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b087      	sub	sp, #28
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f023 0210 	bic.w	r2, r3, #16
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f023 0320 	bic.w	r3, r3, #32
 8004fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d10d      	bne.n	800500c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	011b      	lsls	r3, r3, #4
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800500a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a15      	ldr	r2, [pc, #84]	; (8005064 <TIM_OC2_SetConfig+0xd4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d113      	bne.n	800503c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800501a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	621a      	str	r2, [r3, #32]
}
 8005056:	bf00      	nop
 8005058:	371c      	adds	r7, #28
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	40010000 	.word	0x40010000

08005068 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f023 0303 	bic.w	r3, r3, #3
 800509e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	021b      	lsls	r3, r3, #8
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d10d      	bne.n	80050e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a14      	ldr	r2, [pc, #80]	; (8005138 <TIM_OC3_SetConfig+0xd0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d113      	bne.n	8005112 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	695b      	ldr	r3, [r3, #20]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685a      	ldr	r2, [r3, #4]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	697a      	ldr	r2, [r7, #20]
 800512a:	621a      	str	r2, [r3, #32]
}
 800512c:	bf00      	nop
 800512e:	371c      	adds	r7, #28
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40010000 	.word	0x40010000

0800513c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005172:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	021b      	lsls	r3, r3, #8
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005186:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	031b      	lsls	r3, r3, #12
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	4313      	orrs	r3, r2
 8005192:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a10      	ldr	r2, [pc, #64]	; (80051d8 <TIM_OC4_SetConfig+0x9c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d109      	bne.n	80051b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80051a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	019b      	lsls	r3, r3, #6
 80051aa:	697a      	ldr	r2, [r7, #20]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	697a      	ldr	r2, [r7, #20]
 80051b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40010000 	.word	0x40010000

080051dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	f023 0201 	bic.w	r2, r3, #1
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	4a24      	ldr	r2, [pc, #144]	; (8005298 <TIM_TI1_SetConfig+0xbc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d013      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005210:	d00f      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a21      	ldr	r2, [pc, #132]	; (800529c <TIM_TI1_SetConfig+0xc0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00b      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a20      	ldr	r2, [pc, #128]	; (80052a0 <TIM_TI1_SetConfig+0xc4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d007      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	4a1f      	ldr	r2, [pc, #124]	; (80052a4 <TIM_TI1_SetConfig+0xc8>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d003      	beq.n	8005232 <TIM_TI1_SetConfig+0x56>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <TIM_TI1_SetConfig+0xcc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d101      	bne.n	8005236 <TIM_TI1_SetConfig+0x5a>
 8005232:	2301      	movs	r3, #1
 8005234:	e000      	b.n	8005238 <TIM_TI1_SetConfig+0x5c>
 8005236:	2300      	movs	r3, #0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d008      	beq.n	800524e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0303 	bic.w	r3, r3, #3
 8005242:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005244:	697a      	ldr	r2, [r7, #20]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4313      	orrs	r3, r2
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	e003      	b.n	8005256 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f043 0301 	orr.w	r3, r3, #1
 8005254:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800525c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	b2db      	uxtb	r3, r3
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	4313      	orrs	r3, r2
 8005268:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f023 030a 	bic.w	r3, r3, #10
 8005270:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f003 030a 	and.w	r3, r3, #10
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40010000 	.word	0x40010000
 800529c:	40000400 	.word	0x40000400
 80052a0:	40000800 	.word	0x40000800
 80052a4:	40000c00 	.word	0x40000c00
 80052a8:	40014000 	.word	0x40014000

080052ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	60f8      	str	r0, [r7, #12]
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a1b      	ldr	r3, [r3, #32]
 80052bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f023 0201 	bic.w	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f023 030a 	bic.w	r3, r3, #10
 80052e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	621a      	str	r2, [r3, #32]
}
 80052fe:	bf00      	nop
 8005300:	371c      	adds	r7, #28
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800530a:	b480      	push	{r7}
 800530c:	b087      	sub	sp, #28
 800530e:	af00      	add	r7, sp, #0
 8005310:	60f8      	str	r0, [r7, #12]
 8005312:	60b9      	str	r1, [r7, #8]
 8005314:	607a      	str	r2, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	f023 0210 	bic.w	r2, r3, #16
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005336:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005348:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	031b      	lsls	r3, r3, #12
 800534e:	b29b      	uxth	r3, r3
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	4313      	orrs	r3, r2
 8005354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800535c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	011b      	lsls	r3, r3, #4
 8005362:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f023 0210 	bic.w	r2, r3, #16
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	031b      	lsls	r3, r3, #12
 80053b4:	697a      	ldr	r2, [r7, #20]
 80053b6:	4313      	orrs	r3, r2
 80053b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80053c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	693a      	ldr	r2, [r7, #16]
 80053d6:	621a      	str	r2, [r3, #32]
}
 80053d8:	bf00      	nop
 80053da:	371c      	adds	r7, #28
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
 80053f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f023 0303 	bic.w	r3, r3, #3
 8005410:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005412:	697a      	ldr	r2, [r7, #20]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005420:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	b2db      	uxtb	r3, r3
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005434:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	621a      	str	r2, [r3, #32]
}
 8005450:	bf00      	nop
 8005452:	371c      	adds	r7, #28
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6a1b      	ldr	r3, [r3, #32]
 800546e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6a1b      	ldr	r3, [r3, #32]
 8005480:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005488:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	021b      	lsls	r3, r3, #8
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800549a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	031b      	lsls	r3, r3, #12
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80054ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	031b      	lsls	r3, r3, #12
 80054b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	621a      	str	r2, [r3, #32]
}
 80054ca:	bf00      	nop
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b085      	sub	sp, #20
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ee:	683a      	ldr	r2, [r7, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f043 0307 	orr.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800550c:	b480      	push	{r7}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	021a      	lsls	r2, r3, #8
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	431a      	orrs	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	4313      	orrs	r3, r2
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	609a      	str	r2, [r3, #8]
}
 8005540:	bf00      	nop
 8005542:	371c      	adds	r7, #28
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800554c:	b480      	push	{r7}
 800554e:	b087      	sub	sp, #28
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	f003 031f 	and.w	r3, r3, #31
 800555e:	2201      	movs	r2, #1
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6a1a      	ldr	r2, [r3, #32]
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	43db      	mvns	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6a1a      	ldr	r2, [r3, #32]
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	431a      	orrs	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	621a      	str	r2, [r3, #32]
}
 800558a:	bf00      	nop
 800558c:	371c      	adds	r7, #28
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
	...

08005598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e050      	b.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2202      	movs	r2, #2
 80055bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	4313      	orrs	r3, r2
 80055e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1c      	ldr	r2, [pc, #112]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fc:	d013      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a18      	ldr	r2, [pc, #96]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a16      	ldr	r2, [pc, #88]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a15      	ldr	r2, [pc, #84]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10c      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40010000 	.word	0x40010000
 8005664:	40000400 	.word	0x40000400
 8005668:	40000800 	.word	0x40000800
 800566c:	40000c00 	.word	0x40000c00
 8005670:	40014000 	.word	0x40014000

08005674 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e03f      	b.n	800572e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7fc f8f6 	bl	80018b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2224      	movs	r2, #36	; 0x24
 80056cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fddf 	bl	80062a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005704:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005714:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08a      	sub	sp, #40	; 0x28
 800573a:	af02      	add	r7, sp, #8
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4613      	mov	r3, r2
 8005744:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b20      	cmp	r3, #32
 8005754:	d17c      	bne.n	8005850 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <HAL_UART_Transmit+0x2c>
 800575c:	88fb      	ldrh	r3, [r7, #6]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d101      	bne.n	8005766 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e075      	b.n	8005852 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800576c:	2b01      	cmp	r3, #1
 800576e:	d101      	bne.n	8005774 <HAL_UART_Transmit+0x3e>
 8005770:	2302      	movs	r3, #2
 8005772:	e06e      	b.n	8005852 <HAL_UART_Transmit+0x11c>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2221      	movs	r2, #33	; 0x21
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578a:	f7fc fb57 	bl	8001e3c <HAL_GetTick>
 800578e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	88fa      	ldrh	r2, [r7, #6]
 8005794:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	88fa      	ldrh	r2, [r7, #6]
 800579a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a4:	d108      	bne.n	80057b8 <HAL_UART_Transmit+0x82>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	61bb      	str	r3, [r7, #24]
 80057b6:	e003      	b.n	80057c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	2200      	movs	r2, #0
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057c8:	e02a      	b.n	8005820 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fb1f 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e036      	b.n	8005852 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10b      	bne.n	8005802 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	3302      	adds	r3, #2
 80057fe:	61bb      	str	r3, [r7, #24]
 8005800:	e007      	b.n	8005812 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	781a      	ldrb	r2, [r3, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	3301      	adds	r3, #1
 8005810:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005816:	b29b      	uxth	r3, r3
 8005818:	3b01      	subs	r3, #1
 800581a:	b29a      	uxth	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1cf      	bne.n	80057ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	2200      	movs	r2, #0
 8005832:	2140      	movs	r1, #64	; 0x40
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 faef 	bl	8005e18 <UART_WaitOnFlagUntilTimeout>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e006      	b.n	8005852 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800584c:	2300      	movs	r3, #0
 800584e:	e000      	b.n	8005852 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005850:	2302      	movs	r3, #2
  }
}
 8005852:	4618      	mov	r0, r3
 8005854:	3720      	adds	r7, #32
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}

0800585a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800585a:	b580      	push	{r7, lr}
 800585c:	b084      	sub	sp, #16
 800585e:	af00      	add	r7, sp, #0
 8005860:	60f8      	str	r0, [r7, #12]
 8005862:	60b9      	str	r1, [r7, #8]
 8005864:	4613      	mov	r3, r2
 8005866:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b20      	cmp	r3, #32
 8005872:	d11d      	bne.n	80058b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_Receive_IT+0x26>
 800587a:	88fb      	ldrh	r3, [r7, #6]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e016      	b.n	80058b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_UART_Receive_IT+0x38>
 800588e:	2302      	movs	r3, #2
 8005890:	e00f      	b.n	80058b2 <HAL_UART_Receive_IT+0x58>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058a0:	88fb      	ldrh	r3, [r7, #6]
 80058a2:	461a      	mov	r2, r3
 80058a4:	68b9      	ldr	r1, [r7, #8]
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fb24 	bl	8005ef4 <UART_Start_Receive_IT>
 80058ac:	4603      	mov	r3, r0
 80058ae:	e000      	b.n	80058b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80058b0:	2302      	movs	r3, #2
  }
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3710      	adds	r7, #16
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
	...

080058bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b0ba      	sub	sp, #232	; 0xe8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d10f      	bne.n	8005922 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d009      	beq.n	8005922 <HAL_UART_IRQHandler+0x66>
 800590e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d003      	beq.n	8005922 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f000 fc07 	bl	800612e <UART_Receive_IT>
      return;
 8005920:	e256      	b.n	8005dd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 80de 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x22c>
 800592c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005940:	2b00      	cmp	r3, #0
 8005942:	f000 80d1 	beq.w	8005ae8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005946:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_UART_IRQHandler+0xae>
 8005952:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0201 	orr.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800596a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800596e:	f003 0304 	and.w	r3, r3, #4
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00b      	beq.n	800598e <HAL_UART_IRQHandler+0xd2>
 8005976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800597a:	f003 0301 	and.w	r3, r3, #1
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f043 0202 	orr.w	r2, r3, #2
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800598e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <HAL_UART_IRQHandler+0xf6>
 800599a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800599e:	f003 0301 	and.w	r3, r3, #1
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d005      	beq.n	80059b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059aa:	f043 0204 	orr.w	r2, r3, #4
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d011      	beq.n	80059e2 <HAL_UART_IRQHandler+0x126>
 80059be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059c2:	f003 0320 	and.w	r3, r3, #32
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d105      	bne.n	80059d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d005      	beq.n	80059e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059da:	f043 0208 	orr.w	r2, r3, #8
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 81ed 	beq.w	8005dc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_UART_IRQHandler+0x14e>
 80059f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fc:	f003 0320 	and.w	r3, r3, #32
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fb92 	bl	800612e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a14:	2b40      	cmp	r3, #64	; 0x40
 8005a16:	bf0c      	ite	eq
 8005a18:	2301      	moveq	r3, #1
 8005a1a:	2300      	movne	r3, #0
 8005a1c:	b2db      	uxtb	r3, r3
 8005a1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a26:	f003 0308 	and.w	r3, r3, #8
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_UART_IRQHandler+0x17a>
 8005a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d04f      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 fa9a 	bl	8005f70 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	695b      	ldr	r3, [r3, #20]
 8005a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a46:	2b40      	cmp	r3, #64	; 0x40
 8005a48:	d141      	bne.n	8005ace <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	3314      	adds	r3, #20
 8005a50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a58:	e853 3f00 	ldrex	r3, [r3]
 8005a5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3314      	adds	r3, #20
 8005a72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a86:	e841 2300 	strex	r3, r2, [r1]
 8005a8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1d9      	bne.n	8005a4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d013      	beq.n	8005ac6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa2:	4a7d      	ldr	r2, [pc, #500]	; (8005c98 <HAL_UART_IRQHandler+0x3dc>)
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7fc fb48 	bl	8002140 <HAL_DMA_Abort_IT>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d016      	beq.n	8005ae4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ac0:	4610      	mov	r0, r2
 8005ac2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac4:	e00e      	b.n	8005ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f990 	bl	8005dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	e00a      	b.n	8005ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f98c 	bl	8005dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad4:	e006      	b.n	8005ae4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f988 	bl	8005dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ae2:	e170      	b.n	8005dc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae4:	bf00      	nop
    return;
 8005ae6:	e16e      	b.n	8005dc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	f040 814a 	bne.w	8005d86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af6:	f003 0310 	and.w	r3, r3, #16
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 8143 	beq.w	8005d86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	f000 813c 	beq.w	8005d86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60bb      	str	r3, [r7, #8]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	60bb      	str	r3, [r7, #8]
 8005b22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2e:	2b40      	cmp	r3, #64	; 0x40
 8005b30:	f040 80b4 	bne.w	8005c9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8140 	beq.w	8005dca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b52:	429a      	cmp	r2, r3
 8005b54:	f080 8139 	bcs.w	8005dca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	f000 8088 	beq.w	8005c7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b7c:	e853 3f00 	ldrex	r3, [r3]
 8005b80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ba6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005baa:	e841 2300 	strex	r3, r2, [r1]
 8005bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1d9      	bne.n	8005b6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005be2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005be6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005bf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e1      	bne.n	8005bba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3314      	adds	r3, #20
 8005bfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3314      	adds	r3, #20
 8005c16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c22:	e841 2300 	strex	r3, r2, [r1]
 8005c26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1e3      	bne.n	8005bf6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	330c      	adds	r3, #12
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c46:	e853 3f00 	ldrex	r3, [r3]
 8005c4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c4e:	f023 0310 	bic.w	r3, r3, #16
 8005c52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c68:	e841 2300 	strex	r3, r2, [r1]
 8005c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1e3      	bne.n	8005c3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7fc f9f1 	bl	8002060 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 f8b6 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c94:	e099      	b.n	8005dca <HAL_UART_IRQHandler+0x50e>
 8005c96:	bf00      	nop
 8005c98:	08006037 	.word	0x08006037
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 808b 	beq.w	8005dce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8086 	beq.w	8005dce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	330c      	adds	r3, #12
 8005cc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ce6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cee:	e841 2300 	strex	r3, r2, [r1]
 8005cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d1e3      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	3314      	adds	r3, #20
 8005d00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d04:	e853 3f00 	ldrex	r3, [r3]
 8005d08:	623b      	str	r3, [r7, #32]
   return(result);
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	3314      	adds	r3, #20
 8005d1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d1e:	633a      	str	r2, [r7, #48]	; 0x30
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d26:	e841 2300 	strex	r3, r2, [r1]
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1e3      	bne.n	8005cfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	330c      	adds	r3, #12
 8005d46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0310 	bic.w	r3, r3, #16
 8005d56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d64:	61fa      	str	r2, [r7, #28]
 8005d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	69b9      	ldr	r1, [r7, #24]
 8005d6a:	69fa      	ldr	r2, [r7, #28]
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	617b      	str	r3, [r7, #20]
   return(result);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e3      	bne.n	8005d40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 f83e 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d84:	e023      	b.n	8005dce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d009      	beq.n	8005da6 <HAL_UART_IRQHandler+0x4ea>
 8005d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f95d 	bl	800605e <UART_Transmit_IT>
    return;
 8005da4:	e014      	b.n	8005dd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00e      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x514>
 8005db2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d008      	beq.n	8005dd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f99d 	bl	80060fe <UART_EndTransmit_IT>
    return;
 8005dc4:	e004      	b.n	8005dd0 <HAL_UART_IRQHandler+0x514>
    return;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <HAL_UART_IRQHandler+0x514>
      return;
 8005dce:	bf00      	nop
  }
}
 8005dd0:	37e8      	adds	r7, #232	; 0xe8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop

08005dd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b090      	sub	sp, #64	; 0x40
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	4613      	mov	r3, r2
 8005e26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e28:	e050      	b.n	8005ecc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d04c      	beq.n	8005ecc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e38:	f7fc f800 	bl	8001e3c <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d241      	bcs.n	8005ecc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	330c      	adds	r3, #12
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e52:	e853 3f00 	ldrex	r3, [r3]
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005e68:	637a      	str	r2, [r7, #52]	; 0x34
 8005e6a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e70:	e841 2300 	strex	r3, r2, [r1]
 8005e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1e5      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3314      	adds	r3, #20
 8005e82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	e853 3f00 	ldrex	r3, [r3]
 8005e8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f023 0301 	bic.w	r3, r3, #1
 8005e92:	63bb      	str	r3, [r7, #56]	; 0x38
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3314      	adds	r3, #20
 8005e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e9c:	623a      	str	r2, [r7, #32]
 8005e9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea0:	69f9      	ldr	r1, [r7, #28]
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	e841 2300 	strex	r3, r2, [r1]
 8005ea8:	61bb      	str	r3, [r7, #24]
   return(result);
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1e5      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ec8:	2303      	movs	r3, #3
 8005eca:	e00f      	b.n	8005eec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	bf0c      	ite	eq
 8005edc:	2301      	moveq	r3, #1
 8005ede:	2300      	movne	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d09f      	beq.n	8005e2a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3740      	adds	r7, #64	; 0x40
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	60f8      	str	r0, [r7, #12]
 8005efc:	60b9      	str	r1, [r7, #8]
 8005efe:	4613      	mov	r3, r2
 8005f00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	88fa      	ldrh	r2, [r7, #6]
 8005f12:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2222      	movs	r2, #34	; 0x22
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d007      	beq.n	8005f42 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f40:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f042 0201 	orr.w	r2, r2, #1
 8005f50:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68da      	ldr	r2, [r3, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f042 0220 	orr.w	r2, r2, #32
 8005f60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f62:	2300      	movs	r3, #0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b095      	sub	sp, #84	; 0x54
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	330c      	adds	r3, #12
 8005f7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f82:	e853 3f00 	ldrex	r3, [r3]
 8005f86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f98:	643a      	str	r2, [r7, #64]	; 0x40
 8005f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e5      	bne.n	8005f78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	e853 3f00 	ldrex	r3, [r3]
 8005fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f023 0301 	bic.w	r3, r3, #1
 8005fc2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd4:	e841 2300 	strex	r3, r2, [r1]
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e5      	bne.n	8005fac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d119      	bne.n	800601c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	330c      	adds	r3, #12
 8005fee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	e853 3f00 	ldrex	r3, [r3]
 8005ff6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	f023 0310 	bic.w	r3, r3, #16
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006008:	61ba      	str	r2, [r7, #24]
 800600a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600c:	6979      	ldr	r1, [r7, #20]
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	e841 2300 	strex	r3, r2, [r1]
 8006014:	613b      	str	r3, [r7, #16]
   return(result);
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1e5      	bne.n	8005fe8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2220      	movs	r2, #32
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	631a      	str	r2, [r3, #48]	; 0x30
}
 800602a:	bf00      	nop
 800602c:	3754      	adds	r7, #84	; 0x54
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fecb 	bl	8005dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b21      	cmp	r3, #33	; 0x21
 8006070:	d13e      	bne.n	80060f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800607a:	d114      	bne.n	80060a6 <UART_Transmit_IT+0x48>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d110      	bne.n	80060a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	461a      	mov	r2, r3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006098:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	1c9a      	adds	r2, r3, #2
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	621a      	str	r2, [r3, #32]
 80060a4:	e008      	b.n	80060b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	1c59      	adds	r1, r3, #1
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	6211      	str	r1, [r2, #32]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	4619      	mov	r1, r3
 80060c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10f      	bne.n	80060ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
 80060ee:	e000      	b.n	80060f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060f0:	2302      	movs	r3, #2
  }
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b082      	sub	sp, #8
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68da      	ldr	r2, [r3, #12]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006114:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2220      	movs	r2, #32
 800611a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fe5a 	bl	8005dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}

0800612e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800612e:	b580      	push	{r7, lr}
 8006130:	b08c      	sub	sp, #48	; 0x30
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b22      	cmp	r3, #34	; 0x22
 8006140:	f040 80ab 	bne.w	800629a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614c:	d117      	bne.n	800617e <UART_Receive_IT+0x50>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d113      	bne.n	800617e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006156:	2300      	movs	r3, #0
 8006158:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	b29b      	uxth	r3, r3
 8006168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616c:	b29a      	uxth	r2, r3
 800616e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006170:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	1c9a      	adds	r2, r3, #2
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	629a      	str	r2, [r3, #40]	; 0x28
 800617c:	e026      	b.n	80061cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006184:	2300      	movs	r3, #0
 8006186:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006190:	d007      	beq.n	80061a2 <UART_Receive_IT+0x74>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <UART_Receive_IT+0x82>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ac:	701a      	strb	r2, [r3, #0]
 80061ae:	e008      	b.n	80061c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c6:	1c5a      	adds	r2, r3, #1
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	4619      	mov	r1, r3
 80061da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d15a      	bne.n	8006296 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f022 0220 	bic.w	r2, r2, #32
 80061ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	695a      	ldr	r2, [r3, #20]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0201 	bic.w	r2, r2, #1
 800620e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621c:	2b01      	cmp	r3, #1
 800621e:	d135      	bne.n	800628c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	330c      	adds	r3, #12
 800622c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	e853 3f00 	ldrex	r3, [r3]
 8006234:	613b      	str	r3, [r7, #16]
   return(result);
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	f023 0310 	bic.w	r3, r3, #16
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	330c      	adds	r3, #12
 8006244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006246:	623a      	str	r2, [r7, #32]
 8006248:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624a:	69f9      	ldr	r1, [r7, #28]
 800624c:	6a3a      	ldr	r2, [r7, #32]
 800624e:	e841 2300 	strex	r3, r2, [r1]
 8006252:	61bb      	str	r3, [r7, #24]
   return(result);
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1e5      	bne.n	8006226 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0310 	and.w	r3, r3, #16
 8006264:	2b10      	cmp	r3, #16
 8006266:	d10a      	bne.n	800627e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006268:	2300      	movs	r3, #0
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7ff fdbb 	bl	8005e00 <HAL_UARTEx_RxEventCallback>
 800628a:	e002      	b.n	8006292 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7fa f929 	bl	80004e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	e002      	b.n	800629c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e000      	b.n	800629c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800629a:	2302      	movs	r3, #2
  }
}
 800629c:	4618      	mov	r0, r3
 800629e:	3730      	adds	r7, #48	; 0x30
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a8:	b0c0      	sub	sp, #256	; 0x100
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	68d9      	ldr	r1, [r3, #12]
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	ea40 0301 	orr.w	r3, r0, r1
 80062cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d2:	689a      	ldr	r2, [r3, #8]
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	431a      	orrs	r2, r3
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e0:	695b      	ldr	r3, [r3, #20]
 80062e2:	431a      	orrs	r2, r3
 80062e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062fc:	f021 010c 	bic.w	r1, r1, #12
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800630a:	430b      	orrs	r3, r1
 800630c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800631e:	6999      	ldr	r1, [r3, #24]
 8006320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	ea40 0301 	orr.w	r3, r0, r1
 800632a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b8f      	ldr	r3, [pc, #572]	; (8006570 <UART_SetConfig+0x2cc>)
 8006334:	429a      	cmp	r2, r3
 8006336:	d005      	beq.n	8006344 <UART_SetConfig+0xa0>
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	4b8d      	ldr	r3, [pc, #564]	; (8006574 <UART_SetConfig+0x2d0>)
 8006340:	429a      	cmp	r2, r3
 8006342:	d104      	bne.n	800634e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006344:	f7fd f9bc 	bl	80036c0 <HAL_RCC_GetPCLK2Freq>
 8006348:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800634c:	e003      	b.n	8006356 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800634e:	f7fd f9a3 	bl	8003698 <HAL_RCC_GetPCLK1Freq>
 8006352:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006360:	f040 810c 	bne.w	800657c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006368:	2200      	movs	r2, #0
 800636a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800636e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006372:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006376:	4622      	mov	r2, r4
 8006378:	462b      	mov	r3, r5
 800637a:	1891      	adds	r1, r2, r2
 800637c:	65b9      	str	r1, [r7, #88]	; 0x58
 800637e:	415b      	adcs	r3, r3
 8006380:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006382:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006386:	4621      	mov	r1, r4
 8006388:	eb12 0801 	adds.w	r8, r2, r1
 800638c:	4629      	mov	r1, r5
 800638e:	eb43 0901 	adc.w	r9, r3, r1
 8006392:	f04f 0200 	mov.w	r2, #0
 8006396:	f04f 0300 	mov.w	r3, #0
 800639a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800639e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063a6:	4690      	mov	r8, r2
 80063a8:	4699      	mov	r9, r3
 80063aa:	4623      	mov	r3, r4
 80063ac:	eb18 0303 	adds.w	r3, r8, r3
 80063b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063b4:	462b      	mov	r3, r5
 80063b6:	eb49 0303 	adc.w	r3, r9, r3
 80063ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063d2:	460b      	mov	r3, r1
 80063d4:	18db      	adds	r3, r3, r3
 80063d6:	653b      	str	r3, [r7, #80]	; 0x50
 80063d8:	4613      	mov	r3, r2
 80063da:	eb42 0303 	adc.w	r3, r2, r3
 80063de:	657b      	str	r3, [r7, #84]	; 0x54
 80063e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063e8:	f7f9 fefa 	bl	80001e0 <__aeabi_uldivmod>
 80063ec:	4602      	mov	r2, r0
 80063ee:	460b      	mov	r3, r1
 80063f0:	4b61      	ldr	r3, [pc, #388]	; (8006578 <UART_SetConfig+0x2d4>)
 80063f2:	fba3 2302 	umull	r2, r3, r3, r2
 80063f6:	095b      	lsrs	r3, r3, #5
 80063f8:	011c      	lsls	r4, r3, #4
 80063fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063fe:	2200      	movs	r2, #0
 8006400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006404:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006408:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800640c:	4642      	mov	r2, r8
 800640e:	464b      	mov	r3, r9
 8006410:	1891      	adds	r1, r2, r2
 8006412:	64b9      	str	r1, [r7, #72]	; 0x48
 8006414:	415b      	adcs	r3, r3
 8006416:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006418:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800641c:	4641      	mov	r1, r8
 800641e:	eb12 0a01 	adds.w	sl, r2, r1
 8006422:	4649      	mov	r1, r9
 8006424:	eb43 0b01 	adc.w	fp, r3, r1
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006434:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800643c:	4692      	mov	sl, r2
 800643e:	469b      	mov	fp, r3
 8006440:	4643      	mov	r3, r8
 8006442:	eb1a 0303 	adds.w	r3, sl, r3
 8006446:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800644a:	464b      	mov	r3, r9
 800644c:	eb4b 0303 	adc.w	r3, fp, r3
 8006450:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006460:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006464:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006468:	460b      	mov	r3, r1
 800646a:	18db      	adds	r3, r3, r3
 800646c:	643b      	str	r3, [r7, #64]	; 0x40
 800646e:	4613      	mov	r3, r2
 8006470:	eb42 0303 	adc.w	r3, r2, r3
 8006474:	647b      	str	r3, [r7, #68]	; 0x44
 8006476:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800647a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800647e:	f7f9 feaf 	bl	80001e0 <__aeabi_uldivmod>
 8006482:	4602      	mov	r2, r0
 8006484:	460b      	mov	r3, r1
 8006486:	4611      	mov	r1, r2
 8006488:	4b3b      	ldr	r3, [pc, #236]	; (8006578 <UART_SetConfig+0x2d4>)
 800648a:	fba3 2301 	umull	r2, r3, r3, r1
 800648e:	095b      	lsrs	r3, r3, #5
 8006490:	2264      	movs	r2, #100	; 0x64
 8006492:	fb02 f303 	mul.w	r3, r2, r3
 8006496:	1acb      	subs	r3, r1, r3
 8006498:	00db      	lsls	r3, r3, #3
 800649a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800649e:	4b36      	ldr	r3, [pc, #216]	; (8006578 <UART_SetConfig+0x2d4>)
 80064a0:	fba3 2302 	umull	r2, r3, r3, r2
 80064a4:	095b      	lsrs	r3, r3, #5
 80064a6:	005b      	lsls	r3, r3, #1
 80064a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ac:	441c      	add	r4, r3
 80064ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064c0:	4642      	mov	r2, r8
 80064c2:	464b      	mov	r3, r9
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80064c8:	415b      	adcs	r3, r3
 80064ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064d0:	4641      	mov	r1, r8
 80064d2:	1851      	adds	r1, r2, r1
 80064d4:	6339      	str	r1, [r7, #48]	; 0x30
 80064d6:	4649      	mov	r1, r9
 80064d8:	414b      	adcs	r3, r1
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
 80064dc:	f04f 0200 	mov.w	r2, #0
 80064e0:	f04f 0300 	mov.w	r3, #0
 80064e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064e8:	4659      	mov	r1, fp
 80064ea:	00cb      	lsls	r3, r1, #3
 80064ec:	4651      	mov	r1, sl
 80064ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f2:	4651      	mov	r1, sl
 80064f4:	00ca      	lsls	r2, r1, #3
 80064f6:	4610      	mov	r0, r2
 80064f8:	4619      	mov	r1, r3
 80064fa:	4603      	mov	r3, r0
 80064fc:	4642      	mov	r2, r8
 80064fe:	189b      	adds	r3, r3, r2
 8006500:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006504:	464b      	mov	r3, r9
 8006506:	460a      	mov	r2, r1
 8006508:	eb42 0303 	adc.w	r3, r2, r3
 800650c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800651c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006520:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006524:	460b      	mov	r3, r1
 8006526:	18db      	adds	r3, r3, r3
 8006528:	62bb      	str	r3, [r7, #40]	; 0x28
 800652a:	4613      	mov	r3, r2
 800652c:	eb42 0303 	adc.w	r3, r2, r3
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006532:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006536:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800653a:	f7f9 fe51 	bl	80001e0 <__aeabi_uldivmod>
 800653e:	4602      	mov	r2, r0
 8006540:	460b      	mov	r3, r1
 8006542:	4b0d      	ldr	r3, [pc, #52]	; (8006578 <UART_SetConfig+0x2d4>)
 8006544:	fba3 1302 	umull	r1, r3, r3, r2
 8006548:	095b      	lsrs	r3, r3, #5
 800654a:	2164      	movs	r1, #100	; 0x64
 800654c:	fb01 f303 	mul.w	r3, r1, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	3332      	adds	r3, #50	; 0x32
 8006556:	4a08      	ldr	r2, [pc, #32]	; (8006578 <UART_SetConfig+0x2d4>)
 8006558:	fba2 2303 	umull	r2, r3, r2, r3
 800655c:	095b      	lsrs	r3, r3, #5
 800655e:	f003 0207 	and.w	r2, r3, #7
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4422      	add	r2, r4
 800656a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800656c:	e105      	b.n	800677a <UART_SetConfig+0x4d6>
 800656e:	bf00      	nop
 8006570:	40011000 	.word	0x40011000
 8006574:	40011400 	.word	0x40011400
 8006578:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800657c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006580:	2200      	movs	r2, #0
 8006582:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006586:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800658a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800658e:	4642      	mov	r2, r8
 8006590:	464b      	mov	r3, r9
 8006592:	1891      	adds	r1, r2, r2
 8006594:	6239      	str	r1, [r7, #32]
 8006596:	415b      	adcs	r3, r3
 8006598:	627b      	str	r3, [r7, #36]	; 0x24
 800659a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800659e:	4641      	mov	r1, r8
 80065a0:	1854      	adds	r4, r2, r1
 80065a2:	4649      	mov	r1, r9
 80065a4:	eb43 0501 	adc.w	r5, r3, r1
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	00eb      	lsls	r3, r5, #3
 80065b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b6:	00e2      	lsls	r2, r4, #3
 80065b8:	4614      	mov	r4, r2
 80065ba:	461d      	mov	r5, r3
 80065bc:	4643      	mov	r3, r8
 80065be:	18e3      	adds	r3, r4, r3
 80065c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065c4:	464b      	mov	r3, r9
 80065c6:	eb45 0303 	adc.w	r3, r5, r3
 80065ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065de:	f04f 0200 	mov.w	r2, #0
 80065e2:	f04f 0300 	mov.w	r3, #0
 80065e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ea:	4629      	mov	r1, r5
 80065ec:	008b      	lsls	r3, r1, #2
 80065ee:	4621      	mov	r1, r4
 80065f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f4:	4621      	mov	r1, r4
 80065f6:	008a      	lsls	r2, r1, #2
 80065f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065fc:	f7f9 fdf0 	bl	80001e0 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4b60      	ldr	r3, [pc, #384]	; (8006788 <UART_SetConfig+0x4e4>)
 8006606:	fba3 2302 	umull	r2, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	011c      	lsls	r4, r3, #4
 800660e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006612:	2200      	movs	r2, #0
 8006614:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006618:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800661c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006620:	4642      	mov	r2, r8
 8006622:	464b      	mov	r3, r9
 8006624:	1891      	adds	r1, r2, r2
 8006626:	61b9      	str	r1, [r7, #24]
 8006628:	415b      	adcs	r3, r3
 800662a:	61fb      	str	r3, [r7, #28]
 800662c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006630:	4641      	mov	r1, r8
 8006632:	1851      	adds	r1, r2, r1
 8006634:	6139      	str	r1, [r7, #16]
 8006636:	4649      	mov	r1, r9
 8006638:	414b      	adcs	r3, r1
 800663a:	617b      	str	r3, [r7, #20]
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006648:	4659      	mov	r1, fp
 800664a:	00cb      	lsls	r3, r1, #3
 800664c:	4651      	mov	r1, sl
 800664e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006652:	4651      	mov	r1, sl
 8006654:	00ca      	lsls	r2, r1, #3
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	4603      	mov	r3, r0
 800665c:	4642      	mov	r2, r8
 800665e:	189b      	adds	r3, r3, r2
 8006660:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006664:	464b      	mov	r3, r9
 8006666:	460a      	mov	r2, r1
 8006668:	eb42 0303 	adc.w	r3, r2, r3
 800666c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	67bb      	str	r3, [r7, #120]	; 0x78
 800667a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800667c:	f04f 0200 	mov.w	r2, #0
 8006680:	f04f 0300 	mov.w	r3, #0
 8006684:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006688:	4649      	mov	r1, r9
 800668a:	008b      	lsls	r3, r1, #2
 800668c:	4641      	mov	r1, r8
 800668e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006692:	4641      	mov	r1, r8
 8006694:	008a      	lsls	r2, r1, #2
 8006696:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800669a:	f7f9 fda1 	bl	80001e0 <__aeabi_uldivmod>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4b39      	ldr	r3, [pc, #228]	; (8006788 <UART_SetConfig+0x4e4>)
 80066a4:	fba3 1302 	umull	r1, r3, r3, r2
 80066a8:	095b      	lsrs	r3, r3, #5
 80066aa:	2164      	movs	r1, #100	; 0x64
 80066ac:	fb01 f303 	mul.w	r3, r1, r3
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	3332      	adds	r3, #50	; 0x32
 80066b6:	4a34      	ldr	r2, [pc, #208]	; (8006788 <UART_SetConfig+0x4e4>)
 80066b8:	fba2 2303 	umull	r2, r3, r2, r3
 80066bc:	095b      	lsrs	r3, r3, #5
 80066be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066c2:	441c      	add	r4, r3
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c8:	2200      	movs	r2, #0
 80066ca:	673b      	str	r3, [r7, #112]	; 0x70
 80066cc:	677a      	str	r2, [r7, #116]	; 0x74
 80066ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066d2:	4642      	mov	r2, r8
 80066d4:	464b      	mov	r3, r9
 80066d6:	1891      	adds	r1, r2, r2
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	415b      	adcs	r3, r3
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066e2:	4641      	mov	r1, r8
 80066e4:	1851      	adds	r1, r2, r1
 80066e6:	6039      	str	r1, [r7, #0]
 80066e8:	4649      	mov	r1, r9
 80066ea:	414b      	adcs	r3, r1
 80066ec:	607b      	str	r3, [r7, #4]
 80066ee:	f04f 0200 	mov.w	r2, #0
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066fa:	4659      	mov	r1, fp
 80066fc:	00cb      	lsls	r3, r1, #3
 80066fe:	4651      	mov	r1, sl
 8006700:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006704:	4651      	mov	r1, sl
 8006706:	00ca      	lsls	r2, r1, #3
 8006708:	4610      	mov	r0, r2
 800670a:	4619      	mov	r1, r3
 800670c:	4603      	mov	r3, r0
 800670e:	4642      	mov	r2, r8
 8006710:	189b      	adds	r3, r3, r2
 8006712:	66bb      	str	r3, [r7, #104]	; 0x68
 8006714:	464b      	mov	r3, r9
 8006716:	460a      	mov	r2, r1
 8006718:	eb42 0303 	adc.w	r3, r2, r3
 800671c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	663b      	str	r3, [r7, #96]	; 0x60
 8006728:	667a      	str	r2, [r7, #100]	; 0x64
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006736:	4649      	mov	r1, r9
 8006738:	008b      	lsls	r3, r1, #2
 800673a:	4641      	mov	r1, r8
 800673c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006740:	4641      	mov	r1, r8
 8006742:	008a      	lsls	r2, r1, #2
 8006744:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006748:	f7f9 fd4a 	bl	80001e0 <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4b0d      	ldr	r3, [pc, #52]	; (8006788 <UART_SetConfig+0x4e4>)
 8006752:	fba3 1302 	umull	r1, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	2164      	movs	r1, #100	; 0x64
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	3332      	adds	r3, #50	; 0x32
 8006764:	4a08      	ldr	r2, [pc, #32]	; (8006788 <UART_SetConfig+0x4e4>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f003 020f 	and.w	r2, r3, #15
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4422      	add	r2, r4
 8006778:	609a      	str	r2, [r3, #8]
}
 800677a:	bf00      	nop
 800677c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	51eb851f 	.word	0x51eb851f

0800678c <__NVIC_SetPriority>:
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	4603      	mov	r3, r0
 8006794:	6039      	str	r1, [r7, #0]
 8006796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800679c:	2b00      	cmp	r3, #0
 800679e:	db0a      	blt.n	80067b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	b2da      	uxtb	r2, r3
 80067a4:	490c      	ldr	r1, [pc, #48]	; (80067d8 <__NVIC_SetPriority+0x4c>)
 80067a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067aa:	0112      	lsls	r2, r2, #4
 80067ac:	b2d2      	uxtb	r2, r2
 80067ae:	440b      	add	r3, r1
 80067b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80067b4:	e00a      	b.n	80067cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	4908      	ldr	r1, [pc, #32]	; (80067dc <__NVIC_SetPriority+0x50>)
 80067bc:	79fb      	ldrb	r3, [r7, #7]
 80067be:	f003 030f 	and.w	r3, r3, #15
 80067c2:	3b04      	subs	r3, #4
 80067c4:	0112      	lsls	r2, r2, #4
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	440b      	add	r3, r1
 80067ca:	761a      	strb	r2, [r3, #24]
}
 80067cc:	bf00      	nop
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	e000e100 	.word	0xe000e100
 80067dc:	e000ed00 	.word	0xe000ed00

080067e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80067e4:	4b05      	ldr	r3, [pc, #20]	; (80067fc <SysTick_Handler+0x1c>)
 80067e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80067e8:	f002 f85a 	bl	80088a0 <xTaskGetSchedulerState>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b01      	cmp	r3, #1
 80067f0:	d001      	beq.n	80067f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80067f2:	f002 ff41 	bl	8009678 <xPortSysTickHandler>
  }
}
 80067f6:	bf00      	nop
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	e000e010 	.word	0xe000e010

08006800 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006804:	2100      	movs	r1, #0
 8006806:	f06f 0004 	mvn.w	r0, #4
 800680a:	f7ff ffbf 	bl	800678c <__NVIC_SetPriority>
#endif
}
 800680e:	bf00      	nop
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800681a:	f3ef 8305 	mrs	r3, IPSR
 800681e:	603b      	str	r3, [r7, #0]
  return(result);
 8006820:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006822:	2b00      	cmp	r3, #0
 8006824:	d003      	beq.n	800682e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006826:	f06f 0305 	mvn.w	r3, #5
 800682a:	607b      	str	r3, [r7, #4]
 800682c:	e00c      	b.n	8006848 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800682e:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <osKernelInitialize+0x44>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006836:	4b08      	ldr	r3, [pc, #32]	; (8006858 <osKernelInitialize+0x44>)
 8006838:	2201      	movs	r2, #1
 800683a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800683c:	2300      	movs	r3, #0
 800683e:	607b      	str	r3, [r7, #4]
 8006840:	e002      	b.n	8006848 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006842:	f04f 33ff 	mov.w	r3, #4294967295
 8006846:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006848:	687b      	ldr	r3, [r7, #4]
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20000920 	.word	0x20000920

0800685c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006862:	f3ef 8305 	mrs	r3, IPSR
 8006866:	603b      	str	r3, [r7, #0]
  return(result);
 8006868:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <osKernelStart+0x1a>
    stat = osErrorISR;
 800686e:	f06f 0305 	mvn.w	r3, #5
 8006872:	607b      	str	r3, [r7, #4]
 8006874:	e010      	b.n	8006898 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006876:	4b0b      	ldr	r3, [pc, #44]	; (80068a4 <osKernelStart+0x48>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d109      	bne.n	8006892 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800687e:	f7ff ffbf 	bl	8006800 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006882:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <osKernelStart+0x48>)
 8006884:	2202      	movs	r2, #2
 8006886:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006888:	f001 fb9e 	bl	8007fc8 <vTaskStartScheduler>
      stat = osOK;
 800688c:	2300      	movs	r3, #0
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	e002      	b.n	8006898 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006898:	687b      	ldr	r3, [r7, #4]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000920 	.word	0x20000920

080068a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08e      	sub	sp, #56	; 0x38
 80068ac:	af04      	add	r7, sp, #16
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80068b4:	2300      	movs	r3, #0
 80068b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b8:	f3ef 8305 	mrs	r3, IPSR
 80068bc:	617b      	str	r3, [r7, #20]
  return(result);
 80068be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d17e      	bne.n	80069c2 <osThreadNew+0x11a>
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d07b      	beq.n	80069c2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80068ce:	2318      	movs	r3, #24
 80068d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80068d6:	f04f 33ff 	mov.w	r3, #4294967295
 80068da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d045      	beq.n	800696e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <osThreadNew+0x48>
        name = attr->name;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d008      	beq.n	8006916 <osThreadNew+0x6e>
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	2b38      	cmp	r3, #56	; 0x38
 8006908:	d805      	bhi.n	8006916 <osThreadNew+0x6e>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d001      	beq.n	800691a <osThreadNew+0x72>
        return (NULL);
 8006916:	2300      	movs	r3, #0
 8006918:	e054      	b.n	80069c4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	089b      	lsrs	r3, r3, #2
 8006928:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00e      	beq.n	8006950 <osThreadNew+0xa8>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	2bbb      	cmp	r3, #187	; 0xbb
 8006938:	d90a      	bls.n	8006950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800693e:	2b00      	cmp	r3, #0
 8006940:	d006      	beq.n	8006950 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d002      	beq.n	8006950 <osThreadNew+0xa8>
        mem = 1;
 800694a:	2301      	movs	r3, #1
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e010      	b.n	8006972 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10c      	bne.n	8006972 <osThreadNew+0xca>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d108      	bne.n	8006972 <osThreadNew+0xca>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d104      	bne.n	8006972 <osThreadNew+0xca>
          mem = 0;
 8006968:	2300      	movs	r3, #0
 800696a:	61bb      	str	r3, [r7, #24]
 800696c:	e001      	b.n	8006972 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800696e:	2300      	movs	r3, #0
 8006970:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d110      	bne.n	800699a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006980:	9202      	str	r2, [sp, #8]
 8006982:	9301      	str	r3, [sp, #4]
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	6a3a      	ldr	r2, [r7, #32]
 800698c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f001 f92e 	bl	8007bf0 <xTaskCreateStatic>
 8006994:	4603      	mov	r3, r0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	e013      	b.n	80069c2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d110      	bne.n	80069c2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	9300      	str	r3, [sp, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f001 f979 	bl	8007caa <xTaskCreate>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d001      	beq.n	80069c2 <osThreadNew+0x11a>
            hTask = NULL;
 80069be:	2300      	movs	r3, #0
 80069c0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80069c2:	693b      	ldr	r3, [r7, #16]
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3728      	adds	r7, #40	; 0x28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069d4:	f3ef 8305 	mrs	r3, IPSR
 80069d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80069da:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <osDelay+0x1c>
    stat = osErrorISR;
 80069e0:	f06f 0305 	mvn.w	r3, #5
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e007      	b.n	80069f8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f001 fab4 	bl	8007f60 <vTaskDelay>
    }
  }

  return (stat);
 80069f8:	68fb      	ldr	r3, [r7, #12]
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b088      	sub	sp, #32
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a0e:	f3ef 8305 	mrs	r3, IPSR
 8006a12:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a14:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d174      	bne.n	8006b04 <osMutexNew+0x102>
    if (attr != NULL) {
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <osMutexNew+0x26>
      type = attr->attr_bits;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	e001      	b.n	8006a2c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d002      	beq.n	8006a3c <osMutexNew+0x3a>
      rmtx = 1U;
 8006a36:	2301      	movs	r3, #1
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e001      	b.n	8006a40 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d15c      	bne.n	8006b04 <osMutexNew+0x102>
      mem = -1;
 8006a4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d015      	beq.n	8006a82 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d006      	beq.n	8006a6c <osMutexNew+0x6a>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b4f      	cmp	r3, #79	; 0x4f
 8006a64:	d902      	bls.n	8006a6c <osMutexNew+0x6a>
          mem = 1;
 8006a66:	2301      	movs	r3, #1
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	e00c      	b.n	8006a86 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d108      	bne.n	8006a86 <osMutexNew+0x84>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d104      	bne.n	8006a86 <osMutexNew+0x84>
            mem = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	e001      	b.n	8006a86 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006a82:	2300      	movs	r3, #0
 8006a84:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d112      	bne.n	8006ab2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d007      	beq.n	8006aa2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	4619      	mov	r1, r3
 8006a98:	2004      	movs	r0, #4
 8006a9a:	f000 fb18 	bl	80070ce <xQueueCreateMutexStatic>
 8006a9e:	61f8      	str	r0, [r7, #28]
 8006aa0:	e016      	b.n	8006ad0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	f000 fb10 	bl	80070ce <xQueueCreateMutexStatic>
 8006aae:	61f8      	str	r0, [r7, #28]
 8006ab0:	e00e      	b.n	8006ad0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10b      	bne.n	8006ad0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8006abe:	2004      	movs	r0, #4
 8006ac0:	f000 faed 	bl	800709e <xQueueCreateMutex>
 8006ac4:	61f8      	str	r0, [r7, #28]
 8006ac6:	e003      	b.n	8006ad0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006ac8:	2001      	movs	r0, #1
 8006aca:	f000 fae8 	bl	800709e <xQueueCreateMutex>
 8006ace:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d00c      	beq.n	8006af0 <osMutexNew+0xee>
        if (attr != NULL) {
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <osMutexNew+0xe2>
          name = attr->name;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e001      	b.n	8006ae8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	69f8      	ldr	r0, [r7, #28]
 8006aec:	f001 f822 	bl	8007b34 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d006      	beq.n	8006b04 <osMutexNew+0x102>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f043 0301 	orr.w	r3, r3, #1
 8006b02:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006b04:	69fb      	ldr	r3, [r7, #28]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	3720      	adds	r7, #32
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}

08006b0e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006b0e:	b580      	push	{r7, lr}
 8006b10:	b086      	sub	sp, #24
 8006b12:	af00      	add	r7, sp, #0
 8006b14:	6078      	str	r0, [r7, #4]
 8006b16:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b2c:	f3ef 8305 	mrs	r3, IPSR
 8006b30:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b32:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d003      	beq.n	8006b40 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8006b38:	f06f 0305 	mvn.w	r3, #5
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e02c      	b.n	8006b9a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d103      	bne.n	8006b4e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006b46:	f06f 0303 	mvn.w	r3, #3
 8006b4a:	617b      	str	r3, [r7, #20]
 8006b4c:	e025      	b.n	8006b9a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d011      	beq.n	8006b78 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6938      	ldr	r0, [r7, #16]
 8006b58:	f000 fb08 	bl	800716c <xQueueTakeMutexRecursive>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d01b      	beq.n	8006b9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d003      	beq.n	8006b70 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006b68:	f06f 0301 	mvn.w	r3, #1
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e014      	b.n	8006b9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006b70:	f06f 0302 	mvn.w	r3, #2
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	e010      	b.n	8006b9a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6938      	ldr	r0, [r7, #16]
 8006b7c:	f000 fda6 	bl	80076cc <xQueueSemaphoreTake>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d009      	beq.n	8006b9a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d003      	beq.n	8006b94 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006b8c:	f06f 0301 	mvn.w	r3, #1
 8006b90:	617b      	str	r3, [r7, #20]
 8006b92:	e002      	b.n	8006b9a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006b94:	f06f 0302 	mvn.w	r3, #2
 8006b98:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006b9a:	697b      	ldr	r3, [r7, #20]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f023 0301 	bic.w	r3, r3, #1
 8006bb2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc0:	f3ef 8305 	mrs	r3, IPSR
 8006bc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8006bc6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006bcc:	f06f 0305 	mvn.w	r3, #5
 8006bd0:	617b      	str	r3, [r7, #20]
 8006bd2:	e01f      	b.n	8006c14 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d103      	bne.n	8006be2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006bda:	f06f 0303 	mvn.w	r3, #3
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e018      	b.n	8006c14 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d009      	beq.n	8006bfc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006be8:	6938      	ldr	r0, [r7, #16]
 8006bea:	f000 fa8b 	bl	8007104 <xQueueGiveMutexRecursive>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d00f      	beq.n	8006c14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006bf4:	f06f 0302 	mvn.w	r3, #2
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	e00b      	b.n	8006c14 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	2200      	movs	r2, #0
 8006c00:	2100      	movs	r1, #0
 8006c02:	6938      	ldr	r0, [r7, #16]
 8006c04:	f000 fae8 	bl	80071d8 <xQueueGenericSend>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d002      	beq.n	8006c14 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006c0e:	f06f 0302 	mvn.w	r3, #2
 8006c12:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8006c14:	697b      	ldr	r3, [r7, #20]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a07      	ldr	r2, [pc, #28]	; (8006c4c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	4a06      	ldr	r2, [pc, #24]	; (8006c50 <vApplicationGetIdleTaskMemory+0x30>)
 8006c36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2280      	movs	r2, #128	; 0x80
 8006c3c:	601a      	str	r2, [r3, #0]
}
 8006c3e:	bf00      	nop
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	20000924 	.word	0x20000924
 8006c50:	200009e0 	.word	0x200009e0

08006c54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4a07      	ldr	r2, [pc, #28]	; (8006c80 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4a06      	ldr	r2, [pc, #24]	; (8006c84 <vApplicationGetTimerTaskMemory+0x30>)
 8006c6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c72:	601a      	str	r2, [r3, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3714      	adds	r7, #20
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000be0 	.word	0x20000be0
 8006c84:	20000c9c 	.word	0x20000c9c

08006c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f103 0208 	add.w	r2, r3, #8
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f103 0208 	add.w	r2, r3, #8
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f103 0208 	add.w	r2, r3, #8
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr

08006cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cd6:	bf00      	nop
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	689a      	ldr	r2, [r3, #8]
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	683a      	ldr	r2, [r7, #0]
 8006d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	601a      	str	r2, [r3, #0]
}
 8006d1e:	bf00      	nop
 8006d20:	3714      	adds	r7, #20
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr

08006d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d40:	d103      	bne.n	8006d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	e00c      	b.n	8006d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e002      	b.n	8006d58 <vListInsert+0x2e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	60fb      	str	r3, [r7, #12]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d2f6      	bcs.n	8006d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	685a      	ldr	r2, [r3, #4]
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	683a      	ldr	r2, [r7, #0]
 8006d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	1c5a      	adds	r2, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	601a      	str	r2, [r3, #0]
}
 8006d90:	bf00      	nop
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	6892      	ldr	r2, [r2, #8]
 8006db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	6852      	ldr	r2, [r2, #4]
 8006dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d103      	bne.n	8006dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	1e5a      	subs	r2, r3, #1
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d10a      	bne.n	8006e1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e08:	f383 8811 	msr	BASEPRI, r3
 8006e0c:	f3bf 8f6f 	isb	sy
 8006e10:	f3bf 8f4f 	dsb	sy
 8006e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e16:	bf00      	nop
 8006e18:	e7fe      	b.n	8006e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e1a:	f002 fb9b 	bl	8009554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	441a      	add	r2, r3
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	68f9      	ldr	r1, [r7, #12]
 8006e4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e50:	fb01 f303 	mul.w	r3, r1, r3
 8006e54:	441a      	add	r2, r3
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	22ff      	movs	r2, #255	; 0xff
 8006e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	22ff      	movs	r2, #255	; 0xff
 8006e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d114      	bne.n	8006e9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d01a      	beq.n	8006eae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	3310      	adds	r3, #16
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f001 fb3d 	bl	80084fc <xTaskRemoveFromEventList>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d012      	beq.n	8006eae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e88:	4b0c      	ldr	r3, [pc, #48]	; (8006ebc <xQueueGenericReset+0xcc>)
 8006e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e8e:	601a      	str	r2, [r3, #0]
 8006e90:	f3bf 8f4f 	dsb	sy
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	e009      	b.n	8006eae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3310      	adds	r3, #16
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7ff fef2 	bl	8006c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3324      	adds	r3, #36	; 0x24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7ff feed 	bl	8006c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006eae:	f002 fb81 	bl	80095b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eb2:	2301      	movs	r3, #1
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	e000ed04 	.word	0xe000ed04

08006ec0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08e      	sub	sp, #56	; 0x38
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d10a      	bne.n	8006eea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed8:	f383 8811 	msr	BASEPRI, r3
 8006edc:	f3bf 8f6f 	isb	sy
 8006ee0:	f3bf 8f4f 	dsb	sy
 8006ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006ee6:	bf00      	nop
 8006ee8:	e7fe      	b.n	8006ee8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d10a      	bne.n	8006f06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <xQueueGenericCreateStatic+0x52>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <xQueueGenericCreateStatic+0x56>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueGenericCreateStatic+0x58>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10a      	bne.n	8006f32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	623b      	str	r3, [r7, #32]
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d102      	bne.n	8006f3e <xQueueGenericCreateStatic+0x7e>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d101      	bne.n	8006f42 <xQueueGenericCreateStatic+0x82>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <xQueueGenericCreateStatic+0x84>
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	61fb      	str	r3, [r7, #28]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f5e:	2350      	movs	r3, #80	; 0x50
 8006f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	2b50      	cmp	r3, #80	; 0x50
 8006f66:	d00a      	beq.n	8006f7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6c:	f383 8811 	msr	BASEPRI, r3
 8006f70:	f3bf 8f6f 	isb	sy
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	61bb      	str	r3, [r7, #24]
}
 8006f7a:	bf00      	nop
 8006f7c:	e7fe      	b.n	8006f7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00d      	beq.n	8006fa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	687a      	ldr	r2, [r7, #4]
 8006f9e:	68b9      	ldr	r1, [r7, #8]
 8006fa0:	68f8      	ldr	r0, [r7, #12]
 8006fa2:	f000 f83f 	bl	8007024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b08a      	sub	sp, #40	; 0x28
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10a      	bne.n	8006fda <xQueueGenericCreate+0x2a>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	613b      	str	r3, [r7, #16]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	fb02 f303 	mul.w	r3, r2, r3
 8006fe2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	3350      	adds	r3, #80	; 0x50
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f002 fbd5 	bl	8009798 <pvPortMalloc>
 8006fee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d011      	beq.n	800701a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	3350      	adds	r3, #80	; 0x50
 8006ffe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007008:	79fa      	ldrb	r2, [r7, #7]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	4613      	mov	r3, r2
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 f805 	bl	8007024 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800701a:	69bb      	ldr	r3, [r7, #24]
	}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	607a      	str	r2, [r7, #4]
 8007030:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d103      	bne.n	8007040 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	601a      	str	r2, [r3, #0]
 800703e:	e002      	b.n	8007046 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007052:	2101      	movs	r1, #1
 8007054:	69b8      	ldr	r0, [r7, #24]
 8007056:	f7ff fecb 	bl	8006df0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800705a:	69bb      	ldr	r3, [r7, #24]
 800705c:	78fa      	ldrb	r2, [r7, #3]
 800705e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007062:	bf00      	nop
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00e      	beq.n	8007096 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2200      	movs	r2, #0
 800707c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800708a:	2300      	movs	r3, #0
 800708c:	2200      	movs	r2, #0
 800708e:	2100      	movs	r1, #0
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8a1 	bl	80071d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b086      	sub	sp, #24
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	4603      	mov	r3, r0
 80070a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070a8:	2301      	movs	r3, #1
 80070aa:	617b      	str	r3, [r7, #20]
 80070ac:	2300      	movs	r3, #0
 80070ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80070b0:	79fb      	ldrb	r3, [r7, #7]
 80070b2:	461a      	mov	r2, r3
 80070b4:	6939      	ldr	r1, [r7, #16]
 80070b6:	6978      	ldr	r0, [r7, #20]
 80070b8:	f7ff ff7a 	bl	8006fb0 <xQueueGenericCreate>
 80070bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f7ff ffd3 	bl	800706a <prvInitialiseMutex>

		return xNewQueue;
 80070c4:	68fb      	ldr	r3, [r7, #12]
	}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b088      	sub	sp, #32
 80070d2:	af02      	add	r7, sp, #8
 80070d4:	4603      	mov	r3, r0
 80070d6:	6039      	str	r1, [r7, #0]
 80070d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80070e2:	79fb      	ldrb	r3, [r7, #7]
 80070e4:	9300      	str	r3, [sp, #0]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	2200      	movs	r2, #0
 80070ea:	6939      	ldr	r1, [r7, #16]
 80070ec:	6978      	ldr	r0, [r7, #20]
 80070ee:	f7ff fee7 	bl	8006ec0 <xQueueGenericCreateStatic>
 80070f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f7ff ffb8 	bl	800706a <prvInitialiseMutex>

		return xNewQueue;
 80070fa:	68fb      	ldr	r3, [r7, #12]
	}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3718      	adds	r7, #24
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}

08007104 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007104:	b590      	push	{r4, r7, lr}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d10a      	bne.n	800712c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	60fb      	str	r3, [r7, #12]
}
 8007128:	bf00      	nop
 800712a:	e7fe      	b.n	800712a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	689c      	ldr	r4, [r3, #8]
 8007130:	f001 fba6 	bl	8008880 <xTaskGetCurrentTaskHandle>
 8007134:	4603      	mov	r3, r0
 8007136:	429c      	cmp	r4, r3
 8007138:	d111      	bne.n	800715e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	1e5a      	subs	r2, r3, #1
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d105      	bne.n	8007158 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800714c:	2300      	movs	r3, #0
 800714e:	2200      	movs	r2, #0
 8007150:	2100      	movs	r1, #0
 8007152:	6938      	ldr	r0, [r7, #16]
 8007154:	f000 f840 	bl	80071d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007158:	2301      	movs	r3, #1
 800715a:	617b      	str	r3, [r7, #20]
 800715c:	e001      	b.n	8007162 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007162:	697b      	ldr	r3, [r7, #20]
	}
 8007164:	4618      	mov	r0, r3
 8007166:	371c      	adds	r7, #28
 8007168:	46bd      	mov	sp, r7
 800716a:	bd90      	pop	{r4, r7, pc}

0800716c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800716c:	b590      	push	{r4, r7, lr}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10a      	bne.n	8007196 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
}
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	689c      	ldr	r4, [r3, #8]
 800719a:	f001 fb71 	bl	8008880 <xTaskGetCurrentTaskHandle>
 800719e:	4603      	mov	r3, r0
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d107      	bne.n	80071b4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80071ae:	2301      	movs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]
 80071b2:	e00c      	b.n	80071ce <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80071b4:	6839      	ldr	r1, [r7, #0]
 80071b6:	6938      	ldr	r0, [r7, #16]
 80071b8:	f000 fa88 	bl	80076cc <xQueueSemaphoreTake>
 80071bc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80071ce:	697b      	ldr	r3, [r7, #20]
	}
 80071d0:	4618      	mov	r0, r3
 80071d2:	371c      	adds	r7, #28
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd90      	pop	{r4, r7, pc}

080071d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	; 0x38
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80071e6:	2300      	movs	r3, #0
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueGenericSend+0x32>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d103      	bne.n	8007218 <xQueueGenericSend+0x40>
 8007210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <xQueueGenericSend+0x44>
 8007218:	2301      	movs	r3, #1
 800721a:	e000      	b.n	800721e <xQueueGenericSend+0x46>
 800721c:	2300      	movs	r3, #0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <xQueueGenericSend+0x60>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b02      	cmp	r3, #2
 800723c:	d103      	bne.n	8007246 <xQueueGenericSend+0x6e>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <xQueueGenericSend+0x72>
 8007246:	2301      	movs	r3, #1
 8007248:	e000      	b.n	800724c <xQueueGenericSend+0x74>
 800724a:	2300      	movs	r3, #0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d10a      	bne.n	8007266 <xQueueGenericSend+0x8e>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	623b      	str	r3, [r7, #32]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007266:	f001 fb1b 	bl	80088a0 <xTaskGetSchedulerState>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d102      	bne.n	8007276 <xQueueGenericSend+0x9e>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d101      	bne.n	800727a <xQueueGenericSend+0xa2>
 8007276:	2301      	movs	r3, #1
 8007278:	e000      	b.n	800727c <xQueueGenericSend+0xa4>
 800727a:	2300      	movs	r3, #0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10a      	bne.n	8007296 <xQueueGenericSend+0xbe>
	__asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	61fb      	str	r3, [r7, #28]
}
 8007292:	bf00      	nop
 8007294:	e7fe      	b.n	8007294 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007296:	f002 f95d 	bl	8009554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800729a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800729c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800729e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d302      	bcc.n	80072ac <xQueueGenericSend+0xd4>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d129      	bne.n	8007300 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072ac:	683a      	ldr	r2, [r7, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072b2:	f000 fb2f 	bl	8007914 <prvCopyDataToQueue>
 80072b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d010      	beq.n	80072e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	4618      	mov	r0, r3
 80072c6:	f001 f919 	bl	80084fc <xTaskRemoveFromEventList>
 80072ca:	4603      	mov	r3, r0
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d013      	beq.n	80072f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80072d0:	4b3f      	ldr	r3, [pc, #252]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80072d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	e00a      	b.n	80072f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80072e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80072e8:	4b39      	ldr	r3, [pc, #228]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80072ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80072f8:	f002 f95c 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 80072fc:	2301      	movs	r3, #1
 80072fe:	e063      	b.n	80073c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007306:	f002 f955 	bl	80095b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800730a:	2300      	movs	r3, #0
 800730c:	e05c      	b.n	80073c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800730e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007310:	2b00      	cmp	r3, #0
 8007312:	d106      	bne.n	8007322 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007314:	f107 0314 	add.w	r3, r7, #20
 8007318:	4618      	mov	r0, r3
 800731a:	f001 f953 	bl	80085c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007322:	f002 f947 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007326:	f000 febf 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800732a:	f002 f913 	bl	8009554 <vPortEnterCritical>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007334:	b25b      	sxtb	r3, r3
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d103      	bne.n	8007344 <xQueueGenericSend+0x16c>
 800733c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733e:	2200      	movs	r2, #0
 8007340:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800734a:	b25b      	sxtb	r3, r3
 800734c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007350:	d103      	bne.n	800735a <xQueueGenericSend+0x182>
 8007352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800735a:	f002 f92b 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800735e:	1d3a      	adds	r2, r7, #4
 8007360:	f107 0314 	add.w	r3, r7, #20
 8007364:	4611      	mov	r1, r2
 8007366:	4618      	mov	r0, r3
 8007368:	f001 f942 	bl	80085f0 <xTaskCheckForTimeOut>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d124      	bne.n	80073bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007372:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007374:	f000 fbc6 	bl	8007b04 <prvIsQueueFull>
 8007378:	4603      	mov	r3, r0
 800737a:	2b00      	cmp	r3, #0
 800737c:	d018      	beq.n	80073b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	3310      	adds	r3, #16
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	4611      	mov	r1, r2
 8007386:	4618      	mov	r0, r3
 8007388:	f001 f868 	bl	800845c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800738c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800738e:	f000 fb51 	bl	8007a34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007392:	f000 fe97 	bl	80080c4 <xTaskResumeAll>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	f47f af7c 	bne.w	8007296 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800739e:	4b0c      	ldr	r3, [pc, #48]	; (80073d0 <xQueueGenericSend+0x1f8>)
 80073a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073a4:	601a      	str	r2, [r3, #0]
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	f3bf 8f6f 	isb	sy
 80073ae:	e772      	b.n	8007296 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073b2:	f000 fb3f 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073b6:	f000 fe85 	bl	80080c4 <xTaskResumeAll>
 80073ba:	e76c      	b.n	8007296 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80073bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073be:	f000 fb39 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80073c2:	f000 fe7f 	bl	80080c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80073c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3738      	adds	r7, #56	; 0x38
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}
 80073d0:	e000ed04 	.word	0xe000ed04

080073d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b090      	sub	sp, #64	; 0x40
 80073d8:	af00      	add	r7, sp, #0
 80073da:	60f8      	str	r0, [r7, #12]
 80073dc:	60b9      	str	r1, [r7, #8]
 80073de:	607a      	str	r2, [r7, #4]
 80073e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80073e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10a      	bne.n	8007402 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80073fe:	bf00      	nop
 8007400:	e7fe      	b.n	8007400 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d103      	bne.n	8007410 <xQueueGenericSendFromISR+0x3c>
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <xQueueGenericSendFromISR+0x40>
 8007410:	2301      	movs	r3, #1
 8007412:	e000      	b.n	8007416 <xQueueGenericSendFromISR+0x42>
 8007414:	2300      	movs	r3, #0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10a      	bne.n	8007430 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800741a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800741e:	f383 8811 	msr	BASEPRI, r3
 8007422:	f3bf 8f6f 	isb	sy
 8007426:	f3bf 8f4f 	dsb	sy
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800742c:	bf00      	nop
 800742e:	e7fe      	b.n	800742e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d103      	bne.n	800743e <xQueueGenericSendFromISR+0x6a>
 8007436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	2b01      	cmp	r3, #1
 800743c:	d101      	bne.n	8007442 <xQueueGenericSendFromISR+0x6e>
 800743e:	2301      	movs	r3, #1
 8007440:	e000      	b.n	8007444 <xQueueGenericSendFromISR+0x70>
 8007442:	2300      	movs	r3, #0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10a      	bne.n	800745e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	623b      	str	r3, [r7, #32]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800745e:	f002 f95b 	bl	8009718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007462:	f3ef 8211 	mrs	r2, BASEPRI
 8007466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	61fa      	str	r2, [r7, #28]
 8007478:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800747a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007484:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007486:	429a      	cmp	r2, r3
 8007488:	d302      	bcc.n	8007490 <xQueueGenericSendFromISR+0xbc>
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	2b02      	cmp	r3, #2
 800748e:	d12f      	bne.n	80074f0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	68b9      	ldr	r1, [r7, #8]
 80074a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074a6:	f000 fa35 	bl	8007914 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074aa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b2:	d112      	bne.n	80074da <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d016      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	3324      	adds	r3, #36	; 0x24
 80074c0:	4618      	mov	r0, r3
 80074c2:	f001 f81b 	bl	80084fc <xTaskRemoveFromEventList>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00b      	beq.n	80074ea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e007      	b.n	80074ea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80074da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80074de:	3301      	adds	r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	b25a      	sxtb	r2, r3
 80074e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80074ea:	2301      	movs	r3, #1
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80074ee:	e001      	b.n	80074f4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80074f0:	2300      	movs	r3, #0
 80074f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074f6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80074fe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007502:	4618      	mov	r0, r3
 8007504:	3740      	adds	r7, #64	; 0x40
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
	...

0800750c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08c      	sub	sp, #48	; 0x30
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007518:	2300      	movs	r3, #0
 800751a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10a      	bne.n	800753c <xQueueReceive+0x30>
	__asm volatile
 8007526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752a:	f383 8811 	msr	BASEPRI, r3
 800752e:	f3bf 8f6f 	isb	sy
 8007532:	f3bf 8f4f 	dsb	sy
 8007536:	623b      	str	r3, [r7, #32]
}
 8007538:	bf00      	nop
 800753a:	e7fe      	b.n	800753a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <xQueueReceive+0x3e>
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <xQueueReceive+0x42>
 800754a:	2301      	movs	r3, #1
 800754c:	e000      	b.n	8007550 <xQueueReceive+0x44>
 800754e:	2300      	movs	r3, #0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10a      	bne.n	800756a <xQueueReceive+0x5e>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	61fb      	str	r3, [r7, #28]
}
 8007566:	bf00      	nop
 8007568:	e7fe      	b.n	8007568 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800756a:	f001 f999 	bl	80088a0 <xTaskGetSchedulerState>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <xQueueReceive+0x6e>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d101      	bne.n	800757e <xQueueReceive+0x72>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <xQueueReceive+0x74>
 800757e:	2300      	movs	r3, #0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d10a      	bne.n	800759a <xQueueReceive+0x8e>
	__asm volatile
 8007584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007588:	f383 8811 	msr	BASEPRI, r3
 800758c:	f3bf 8f6f 	isb	sy
 8007590:	f3bf 8f4f 	dsb	sy
 8007594:	61bb      	str	r3, [r7, #24]
}
 8007596:	bf00      	nop
 8007598:	e7fe      	b.n	8007598 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800759a:	f001 ffdb 	bl	8009554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d01f      	beq.n	80075ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ae:	f000 fa1b 	bl	80079e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	1e5a      	subs	r2, r3, #1
 80075b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00f      	beq.n	80075e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075c4:	3310      	adds	r3, #16
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 ff98 	bl	80084fc <xTaskRemoveFromEventList>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d007      	beq.n	80075e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80075d2:	4b3d      	ldr	r3, [pc, #244]	; (80076c8 <xQueueReceive+0x1bc>)
 80075d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80075e2:	f001 ffe7 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 80075e6:	2301      	movs	r3, #1
 80075e8:	e069      	b.n	80076be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80075f0:	f001 ffe0 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e062      	b.n	80076be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80075f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d106      	bne.n	800760c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80075fe:	f107 0310 	add.w	r3, r7, #16
 8007602:	4618      	mov	r0, r3
 8007604:	f000 ffde 	bl	80085c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007608:	2301      	movs	r3, #1
 800760a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800760c:	f001 ffd2 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007610:	f000 fd4a 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007614:	f001 ff9e 	bl	8009554 <vPortEnterCritical>
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800761e:	b25b      	sxtb	r3, r3
 8007620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007624:	d103      	bne.n	800762e <xQueueReceive+0x122>
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800762e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007634:	b25b      	sxtb	r3, r3
 8007636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800763a:	d103      	bne.n	8007644 <xQueueReceive+0x138>
 800763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007644:	f001 ffb6 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007648:	1d3a      	adds	r2, r7, #4
 800764a:	f107 0310 	add.w	r3, r7, #16
 800764e:	4611      	mov	r1, r2
 8007650:	4618      	mov	r0, r3
 8007652:	f000 ffcd 	bl	80085f0 <xTaskCheckForTimeOut>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d123      	bne.n	80076a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800765c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800765e:	f000 fa3b 	bl	8007ad8 <prvIsQueueEmpty>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d017      	beq.n	8007698 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766a:	3324      	adds	r3, #36	; 0x24
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	4611      	mov	r1, r2
 8007670:	4618      	mov	r0, r3
 8007672:	f000 fef3 	bl	800845c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007676:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007678:	f000 f9dc 	bl	8007a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800767c:	f000 fd22 	bl	80080c4 <xTaskResumeAll>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d189      	bne.n	800759a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007686:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <xQueueReceive+0x1bc>)
 8007688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768c:	601a      	str	r2, [r3, #0]
 800768e:	f3bf 8f4f 	dsb	sy
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	e780      	b.n	800759a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800769a:	f000 f9cb 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800769e:	f000 fd11 	bl	80080c4 <xTaskResumeAll>
 80076a2:	e77a      	b.n	800759a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 f9c5 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076aa:	f000 fd0b 	bl	80080c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b0:	f000 fa12 	bl	8007ad8 <prvIsQueueEmpty>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f af6f 	beq.w	800759a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80076bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3730      	adds	r7, #48	; 0x30
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b08e      	sub	sp, #56	; 0x38
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80076d6:	2300      	movs	r3, #0
 80076d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80076de:	2300      	movs	r3, #0
 80076e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80076e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10a      	bne.n	80076fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	623b      	str	r3, [r7, #32]
}
 80076fa:	bf00      	nop
 80076fc:	e7fe      	b.n	80076fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	61fb      	str	r3, [r7, #28]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800771c:	f001 f8c0 	bl	80088a0 <xTaskGetSchedulerState>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d102      	bne.n	800772c <xQueueSemaphoreTake+0x60>
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <xQueueSemaphoreTake+0x64>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <xQueueSemaphoreTake+0x66>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d10a      	bne.n	800774c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773a:	f383 8811 	msr	BASEPRI, r3
 800773e:	f3bf 8f6f 	isb	sy
 8007742:	f3bf 8f4f 	dsb	sy
 8007746:	61bb      	str	r3, [r7, #24]
}
 8007748:	bf00      	nop
 800774a:	e7fe      	b.n	800774a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800774c:	f001 ff02 	bl	8009554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007754:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2b00      	cmp	r3, #0
 800775a:	d024      	beq.n	80077a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	1e5a      	subs	r2, r3, #1
 8007760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007762:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d104      	bne.n	8007776 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800776c:	f001 fa0e 	bl	8008b8c <pvTaskIncrementMutexHeldCount>
 8007770:	4602      	mov	r2, r0
 8007772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007774:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00f      	beq.n	800779e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007780:	3310      	adds	r3, #16
 8007782:	4618      	mov	r0, r3
 8007784:	f000 feba 	bl	80084fc <xTaskRemoveFromEventList>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800778e:	4b54      	ldr	r3, [pc, #336]	; (80078e0 <xQueueSemaphoreTake+0x214>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800779e:	f001 ff09 	bl	80095b4 <vPortExitCritical>
				return pdPASS;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e097      	b.n	80078d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d111      	bne.n	80077d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00a      	beq.n	80077c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	617b      	str	r3, [r7, #20]
}
 80077c4:	bf00      	nop
 80077c6:	e7fe      	b.n	80077c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80077c8:	f001 fef4 	bl	80095b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80077cc:	2300      	movs	r3, #0
 80077ce:	e082      	b.n	80078d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077d6:	f107 030c 	add.w	r3, r7, #12
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 fef2 	bl	80085c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80077e0:	2301      	movs	r3, #1
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80077e4:	f001 fee6 	bl	80095b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80077e8:	f000 fc5e 	bl	80080a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80077ec:	f001 feb2 	bl	8009554 <vPortEnterCritical>
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077f6:	b25b      	sxtb	r3, r3
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d103      	bne.n	8007806 <xQueueSemaphoreTake+0x13a>
 80077fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007800:	2200      	movs	r2, #0
 8007802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007808:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800780c:	b25b      	sxtb	r3, r3
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d103      	bne.n	800781c <xQueueSemaphoreTake+0x150>
 8007814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800781c:	f001 feca 	bl	80095b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007820:	463a      	mov	r2, r7
 8007822:	f107 030c 	add.w	r3, r7, #12
 8007826:	4611      	mov	r1, r2
 8007828:	4618      	mov	r0, r3
 800782a:	f000 fee1 	bl	80085f0 <xTaskCheckForTimeOut>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d132      	bne.n	800789a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007836:	f000 f94f 	bl	8007ad8 <prvIsQueueEmpty>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d026      	beq.n	800788e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d109      	bne.n	800785c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007848:	f001 fe84 	bl	8009554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800784c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	4618      	mov	r0, r3
 8007852:	f001 f843 	bl	80088dc <xTaskPriorityInherit>
 8007856:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007858:	f001 feac 	bl	80095b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	4611      	mov	r1, r2
 8007864:	4618      	mov	r0, r3
 8007866:	f000 fdf9 	bl	800845c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800786a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800786c:	f000 f8e2 	bl	8007a34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007870:	f000 fc28 	bl	80080c4 <xTaskResumeAll>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f af68 	bne.w	800774c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800787c:	4b18      	ldr	r3, [pc, #96]	; (80078e0 <xQueueSemaphoreTake+0x214>)
 800787e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007882:	601a      	str	r2, [r3, #0]
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	e75e      	b.n	800774c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800788e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007890:	f000 f8d0 	bl	8007a34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007894:	f000 fc16 	bl	80080c4 <xTaskResumeAll>
 8007898:	e758      	b.n	800774c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800789a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800789c:	f000 f8ca 	bl	8007a34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078a0:	f000 fc10 	bl	80080c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078a6:	f000 f917 	bl	8007ad8 <prvIsQueueEmpty>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	f43f af4d 	beq.w	800774c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00d      	beq.n	80078d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80078b8:	f001 fe4c 	bl	8009554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80078bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80078be:	f000 f811 	bl	80078e4 <prvGetDisinheritPriorityAfterTimeout>
 80078c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80078c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f001 f8dc 	bl	8008a88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80078d0:	f001 fe70 	bl	80095b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80078d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3738      	adds	r7, #56	; 0x38
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	e000ed04 	.word	0xe000ed04

080078e4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d006      	beq.n	8007902 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	e001      	b.n	8007906 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007906:	68fb      	ldr	r3, [r7, #12]
	}
 8007908:	4618      	mov	r0, r3
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007928:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d14d      	bne.n	80079d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	4618      	mov	r0, r3
 8007940:	f001 f834 	bl	80089ac <xTaskPriorityDisinherit>
 8007944:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2200      	movs	r2, #0
 800794a:	609a      	str	r2, [r3, #8]
 800794c:	e043      	b.n	80079d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d119      	bne.n	8007988 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6858      	ldr	r0, [r3, #4]
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795c:	461a      	mov	r2, r3
 800795e:	68b9      	ldr	r1, [r7, #8]
 8007960:	f002 fa27 	bl	8009db2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796c:	441a      	add	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	429a      	cmp	r2, r3
 800797c:	d32b      	bcc.n	80079d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681a      	ldr	r2, [r3, #0]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	605a      	str	r2, [r3, #4]
 8007986:	e026      	b.n	80079d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	68d8      	ldr	r0, [r3, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007990:	461a      	mov	r2, r3
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	f002 fa0d 	bl	8009db2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	425b      	negs	r3, r3
 80079a2:	441a      	add	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	68da      	ldr	r2, [r3, #12]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d207      	bcs.n	80079c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	689a      	ldr	r2, [r3, #8]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079bc:	425b      	negs	r3, r3
 80079be:	441a      	add	r2, r3
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d105      	bne.n	80079d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d002      	beq.n	80079d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	3b01      	subs	r3, #1
 80079d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1c5a      	adds	r2, r3, #1
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80079de:	697b      	ldr	r3, [r7, #20]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3718      	adds	r7, #24
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d018      	beq.n	8007a2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a02:	441a      	add	r2, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	68da      	ldr	r2, [r3, #12]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d303      	bcc.n	8007a1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68d9      	ldr	r1, [r3, #12]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	461a      	mov	r2, r3
 8007a26:	6838      	ldr	r0, [r7, #0]
 8007a28:	f002 f9c3 	bl	8009db2 <memcpy>
	}
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007a3c:	f001 fd8a 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a48:	e011      	b.n	8007a6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d012      	beq.n	8007a78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3324      	adds	r3, #36	; 0x24
 8007a56:	4618      	mov	r0, r3
 8007a58:	f000 fd50 	bl	80084fc <xTaskRemoveFromEventList>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007a62:	f000 fe27 	bl	80086b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007a66:	7bfb      	ldrb	r3, [r7, #15]
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	dce9      	bgt.n	8007a4a <prvUnlockQueue+0x16>
 8007a76:	e000      	b.n	8007a7a <prvUnlockQueue+0x46>
					break;
 8007a78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	22ff      	movs	r2, #255	; 0xff
 8007a7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007a82:	f001 fd97 	bl	80095b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007a86:	f001 fd65 	bl	8009554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007a92:	e011      	b.n	8007ab8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d012      	beq.n	8007ac2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	3310      	adds	r3, #16
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fd2b 	bl	80084fc <xTaskRemoveFromEventList>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007aac:	f000 fe02 	bl	80086b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007ab0:	7bbb      	ldrb	r3, [r7, #14]
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	dce9      	bgt.n	8007a94 <prvUnlockQueue+0x60>
 8007ac0:	e000      	b.n	8007ac4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007ac2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	22ff      	movs	r2, #255	; 0xff
 8007ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007acc:	f001 fd72 	bl	80095b4 <vPortExitCritical>
}
 8007ad0:	bf00      	nop
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ae0:	f001 fd38 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d102      	bne.n	8007af2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007aec:	2301      	movs	r3, #1
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	e001      	b.n	8007af6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007af6:	f001 fd5d 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8007afa:	68fb      	ldr	r3, [r7, #12]
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007b0c:	f001 fd22 	bl	8009554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d102      	bne.n	8007b22 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	e001      	b.n	8007b26 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 fd45 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60fb      	str	r3, [r7, #12]
 8007b42:	e014      	b.n	8007b6e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007b44:	4a0f      	ldr	r2, [pc, #60]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10b      	bne.n	8007b68 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007b50:	490c      	ldr	r1, [pc, #48]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007b5a:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <vQueueAddToRegistry+0x50>)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4413      	add	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007b66:	e006      	b.n	8007b76 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b07      	cmp	r3, #7
 8007b72:	d9e7      	bls.n	8007b44 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr
 8007b82:	bf00      	nop
 8007b84:	2000109c 	.word	0x2000109c

08007b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b086      	sub	sp, #24
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007b98:	f001 fcdc 	bl	8009554 <vPortEnterCritical>
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ba2:	b25b      	sxtb	r3, r3
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d103      	bne.n	8007bb2 <vQueueWaitForMessageRestricted+0x2a>
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	2200      	movs	r2, #0
 8007bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bb8:	b25b      	sxtb	r3, r3
 8007bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bbe:	d103      	bne.n	8007bc8 <vQueueWaitForMessageRestricted+0x40>
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bc8:	f001 fcf4 	bl	80095b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d106      	bne.n	8007be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	3324      	adds	r3, #36	; 0x24
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	68b9      	ldr	r1, [r7, #8]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f000 fc61 	bl	80084a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007be2:	6978      	ldr	r0, [r7, #20]
 8007be4:	f7ff ff26 	bl	8007a34 <prvUnlockQueue>
	}
 8007be8:	bf00      	nop
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b08e      	sub	sp, #56	; 0x38
 8007bf4:	af04      	add	r7, sp, #16
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	623b      	str	r3, [r7, #32]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	61fb      	str	r3, [r7, #28]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007c36:	23bc      	movs	r3, #188	; 0xbc
 8007c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2bbc      	cmp	r3, #188	; 0xbc
 8007c3e:	d00a      	beq.n	8007c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c44:	f383 8811 	msr	BASEPRI, r3
 8007c48:	f3bf 8f6f 	isb	sy
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	61bb      	str	r3, [r7, #24]
}
 8007c52:	bf00      	nop
 8007c54:	e7fe      	b.n	8007c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01e      	beq.n	8007c9c <xTaskCreateStatic+0xac>
 8007c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c70:	2202      	movs	r2, #2
 8007c72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007c76:	2300      	movs	r3, #0
 8007c78:	9303      	str	r3, [sp, #12]
 8007c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7c:	9302      	str	r3, [sp, #8]
 8007c7e:	f107 0314 	add.w	r3, r7, #20
 8007c82:	9301      	str	r3, [sp, #4]
 8007c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f000 f850 	bl	8007d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007c96:	f000 f8f3 	bl	8007e80 <prvAddNewTaskToReadyList>
 8007c9a:	e001      	b.n	8007ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007ca0:	697b      	ldr	r3, [r7, #20]
	}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3728      	adds	r7, #40	; 0x28
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}

08007caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007caa:	b580      	push	{r7, lr}
 8007cac:	b08c      	sub	sp, #48	; 0x30
 8007cae:	af04      	add	r7, sp, #16
 8007cb0:	60f8      	str	r0, [r7, #12]
 8007cb2:	60b9      	str	r1, [r7, #8]
 8007cb4:	603b      	str	r3, [r7, #0]
 8007cb6:	4613      	mov	r3, r2
 8007cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007cba:	88fb      	ldrh	r3, [r7, #6]
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f001 fd6a 	bl	8009798 <pvPortMalloc>
 8007cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00e      	beq.n	8007cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007ccc:	20bc      	movs	r0, #188	; 0xbc
 8007cce:	f001 fd63 	bl	8009798 <pvPortMalloc>
 8007cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	631a      	str	r2, [r3, #48]	; 0x30
 8007ce0:	e005      	b.n	8007cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f001 fe24 	bl	8009930 <vPortFree>
 8007ce8:	e001      	b.n	8007cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007cea:	2300      	movs	r3, #0
 8007cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007cee:	69fb      	ldr	r3, [r7, #28]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d017      	beq.n	8007d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007cfc:	88fa      	ldrh	r2, [r7, #6]
 8007cfe:	2300      	movs	r3, #0
 8007d00:	9303      	str	r3, [sp, #12]
 8007d02:	69fb      	ldr	r3, [r7, #28]
 8007d04:	9302      	str	r3, [sp, #8]
 8007d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	68b9      	ldr	r1, [r7, #8]
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f000 f80e 	bl	8007d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d18:	69f8      	ldr	r0, [r7, #28]
 8007d1a:	f000 f8b1 	bl	8007e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	61bb      	str	r3, [r7, #24]
 8007d22:	e002      	b.n	8007d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007d24:	f04f 33ff 	mov.w	r3, #4294967295
 8007d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3720      	adds	r7, #32
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b088      	sub	sp, #32
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	009b      	lsls	r3, r3, #2
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	21a5      	movs	r1, #165	; 0xa5
 8007d4e:	f002 f83e 	bl	8009dce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007d64:	69bb      	ldr	r3, [r7, #24]
 8007d66:	f023 0307 	bic.w	r3, r3, #7
 8007d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	f003 0307 	and.w	r3, r3, #7
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	617b      	str	r3, [r7, #20]
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d01f      	beq.n	8007dd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007d92:	2300      	movs	r3, #0
 8007d94:	61fb      	str	r3, [r7, #28]
 8007d96:	e012      	b.n	8007dbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	7819      	ldrb	r1, [r3, #0]
 8007da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da2:	69fb      	ldr	r3, [r7, #28]
 8007da4:	4413      	add	r3, r2
 8007da6:	3334      	adds	r3, #52	; 0x34
 8007da8:	460a      	mov	r2, r1
 8007daa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	4413      	add	r3, r2
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d006      	beq.n	8007dc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	61fb      	str	r3, [r7, #28]
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2b0f      	cmp	r3, #15
 8007dc2:	d9e9      	bls.n	8007d98 <prvInitialiseNewTask+0x64>
 8007dc4:	e000      	b.n	8007dc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8007dc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007dd0:	e003      	b.n	8007dda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ddc:	2b37      	cmp	r3, #55	; 0x37
 8007dde:	d901      	bls.n	8007de4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007de0:	2337      	movs	r3, #55	; 0x37
 8007de2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007de8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df2:	2200      	movs	r2, #0
 8007df4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe ff64 	bl	8006cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	3318      	adds	r3, #24
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fe ff5f 	bl	8006cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	3354      	adds	r3, #84	; 0x54
 8007e34:	2260      	movs	r2, #96	; 0x60
 8007e36:	2100      	movs	r1, #0
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f001 ffc8 	bl	8009dce <memset>
 8007e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e40:	4a0c      	ldr	r2, [pc, #48]	; (8007e74 <prvInitialiseNewTask+0x140>)
 8007e42:	659a      	str	r2, [r3, #88]	; 0x58
 8007e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e46:	4a0c      	ldr	r2, [pc, #48]	; (8007e78 <prvInitialiseNewTask+0x144>)
 8007e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8007e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <prvInitialiseNewTask+0x148>)
 8007e4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	68f9      	ldr	r1, [r7, #12]
 8007e54:	69b8      	ldr	r0, [r7, #24]
 8007e56:	f001 fa4f 	bl	80092f8 <pxPortInitialiseStack>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e6c:	bf00      	nop
 8007e6e:	3720      	adds	r7, #32
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	0800a8a0 	.word	0x0800a8a0
 8007e78:	0800a8c0 	.word	0x0800a8c0
 8007e7c:	0800a880 	.word	0x0800a880

08007e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007e88:	f001 fb64 	bl	8009554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007e8c:	4b2d      	ldr	r3, [pc, #180]	; (8007f44 <prvAddNewTaskToReadyList+0xc4>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	3301      	adds	r3, #1
 8007e92:	4a2c      	ldr	r2, [pc, #176]	; (8007f44 <prvAddNewTaskToReadyList+0xc4>)
 8007e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007e96:	4b2c      	ldr	r3, [pc, #176]	; (8007f48 <prvAddNewTaskToReadyList+0xc8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d109      	bne.n	8007eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007e9e:	4a2a      	ldr	r2, [pc, #168]	; (8007f48 <prvAddNewTaskToReadyList+0xc8>)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <prvAddNewTaskToReadyList+0xc4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d110      	bne.n	8007ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007eac:	f000 fc26 	bl	80086fc <prvInitialiseTaskLists>
 8007eb0:	e00d      	b.n	8007ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007eb2:	4b26      	ldr	r3, [pc, #152]	; (8007f4c <prvAddNewTaskToReadyList+0xcc>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d109      	bne.n	8007ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007eba:	4b23      	ldr	r3, [pc, #140]	; (8007f48 <prvAddNewTaskToReadyList+0xc8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d802      	bhi.n	8007ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <prvAddNewTaskToReadyList+0xc8>)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ece:	4b20      	ldr	r3, [pc, #128]	; (8007f50 <prvAddNewTaskToReadyList+0xd0>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	4a1e      	ldr	r2, [pc, #120]	; (8007f50 <prvAddNewTaskToReadyList+0xd0>)
 8007ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007ed8:	4b1d      	ldr	r3, [pc, #116]	; (8007f50 <prvAddNewTaskToReadyList+0xd0>)
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ee4:	4b1b      	ldr	r3, [pc, #108]	; (8007f54 <prvAddNewTaskToReadyList+0xd4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d903      	bls.n	8007ef4 <prvAddNewTaskToReadyList+0x74>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef0:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <prvAddNewTaskToReadyList+0xd4>)
 8007ef2:	6013      	str	r3, [r2, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef8:	4613      	mov	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4a15      	ldr	r2, [pc, #84]	; (8007f58 <prvAddNewTaskToReadyList+0xd8>)
 8007f02:	441a      	add	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	3304      	adds	r3, #4
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7fe fee9 	bl	8006ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007f10:	f001 fb50 	bl	80095b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007f14:	4b0d      	ldr	r3, [pc, #52]	; (8007f4c <prvAddNewTaskToReadyList+0xcc>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d00e      	beq.n	8007f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	; (8007f48 <prvAddNewTaskToReadyList+0xc8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d207      	bcs.n	8007f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007f2a:	4b0c      	ldr	r3, [pc, #48]	; (8007f5c <prvAddNewTaskToReadyList+0xdc>)
 8007f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200015b0 	.word	0x200015b0
 8007f48:	200010dc 	.word	0x200010dc
 8007f4c:	200015bc 	.word	0x200015bc
 8007f50:	200015cc 	.word	0x200015cc
 8007f54:	200015b8 	.word	0x200015b8
 8007f58:	200010e0 	.word	0x200010e0
 8007f5c:	e000ed04 	.word	0xe000ed04

08007f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b084      	sub	sp, #16
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d017      	beq.n	8007fa2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007f72:	4b13      	ldr	r3, [pc, #76]	; (8007fc0 <vTaskDelay+0x60>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00a      	beq.n	8007f90 <vTaskDelay+0x30>
	__asm volatile
 8007f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f7e:	f383 8811 	msr	BASEPRI, r3
 8007f82:	f3bf 8f6f 	isb	sy
 8007f86:	f3bf 8f4f 	dsb	sy
 8007f8a:	60bb      	str	r3, [r7, #8]
}
 8007f8c:	bf00      	nop
 8007f8e:	e7fe      	b.n	8007f8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007f90:	f000 f88a 	bl	80080a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007f94:	2100      	movs	r1, #0
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fe0c 	bl	8008bb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007f9c:	f000 f892 	bl	80080c4 <xTaskResumeAll>
 8007fa0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d107      	bne.n	8007fb8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007fa8:	4b06      	ldr	r3, [pc, #24]	; (8007fc4 <vTaskDelay+0x64>)
 8007faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fae:	601a      	str	r2, [r3, #0]
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007fb8:	bf00      	nop
 8007fba:	3710      	adds	r7, #16
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	bd80      	pop	{r7, pc}
 8007fc0:	200015d8 	.word	0x200015d8
 8007fc4:	e000ed04 	.word	0xe000ed04

08007fc8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b08a      	sub	sp, #40	; 0x28
 8007fcc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007fd6:	463a      	mov	r2, r7
 8007fd8:	1d39      	adds	r1, r7, #4
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe fe1e 	bl	8006c20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	9202      	str	r2, [sp, #8]
 8007fec:	9301      	str	r3, [sp, #4]
 8007fee:	2300      	movs	r3, #0
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	460a      	mov	r2, r1
 8007ff6:	4924      	ldr	r1, [pc, #144]	; (8008088 <vTaskStartScheduler+0xc0>)
 8007ff8:	4824      	ldr	r0, [pc, #144]	; (800808c <vTaskStartScheduler+0xc4>)
 8007ffa:	f7ff fdf9 	bl	8007bf0 <xTaskCreateStatic>
 8007ffe:	4603      	mov	r3, r0
 8008000:	4a23      	ldr	r2, [pc, #140]	; (8008090 <vTaskStartScheduler+0xc8>)
 8008002:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008004:	4b22      	ldr	r3, [pc, #136]	; (8008090 <vTaskStartScheduler+0xc8>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e001      	b.n	8008016 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008012:	2300      	movs	r3, #0
 8008014:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d102      	bne.n	8008022 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800801c:	f000 fe1e 	bl	8008c5c <xTimerCreateTimerTask>
 8008020:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d11b      	bne.n	8008060 <vTaskStartScheduler+0x98>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	613b      	str	r3, [r7, #16]
}
 800803a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800803c:	4b15      	ldr	r3, [pc, #84]	; (8008094 <vTaskStartScheduler+0xcc>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3354      	adds	r3, #84	; 0x54
 8008042:	4a15      	ldr	r2, [pc, #84]	; (8008098 <vTaskStartScheduler+0xd0>)
 8008044:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008046:	4b15      	ldr	r3, [pc, #84]	; (800809c <vTaskStartScheduler+0xd4>)
 8008048:	f04f 32ff 	mov.w	r2, #4294967295
 800804c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800804e:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <vTaskStartScheduler+0xd8>)
 8008050:	2201      	movs	r2, #1
 8008052:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008054:	4b13      	ldr	r3, [pc, #76]	; (80080a4 <vTaskStartScheduler+0xdc>)
 8008056:	2200      	movs	r2, #0
 8008058:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800805a:	f001 f9d9 	bl	8009410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800805e:	e00e      	b.n	800807e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d10a      	bne.n	800807e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60fb      	str	r3, [r7, #12]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <vTaskStartScheduler+0xb4>
}
 800807e:	bf00      	nop
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	0800a7b0 	.word	0x0800a7b0
 800808c:	080086cd 	.word	0x080086cd
 8008090:	200015d4 	.word	0x200015d4
 8008094:	200010dc 	.word	0x200010dc
 8008098:	20000018 	.word	0x20000018
 800809c:	200015d0 	.word	0x200015d0
 80080a0:	200015bc 	.word	0x200015bc
 80080a4:	200015b4 	.word	0x200015b4

080080a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80080ac:	4b04      	ldr	r3, [pc, #16]	; (80080c0 <vTaskSuspendAll+0x18>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3301      	adds	r3, #1
 80080b2:	4a03      	ldr	r2, [pc, #12]	; (80080c0 <vTaskSuspendAll+0x18>)
 80080b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80080b6:	bf00      	nop
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	200015d8 	.word	0x200015d8

080080c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80080ce:	2300      	movs	r3, #0
 80080d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80080d2:	4b42      	ldr	r3, [pc, #264]	; (80081dc <xTaskResumeAll+0x118>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10a      	bne.n	80080f0 <xTaskResumeAll+0x2c>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	603b      	str	r3, [r7, #0]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80080f0:	f001 fa30 	bl	8009554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80080f4:	4b39      	ldr	r3, [pc, #228]	; (80081dc <xTaskResumeAll+0x118>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	3b01      	subs	r3, #1
 80080fa:	4a38      	ldr	r2, [pc, #224]	; (80081dc <xTaskResumeAll+0x118>)
 80080fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080fe:	4b37      	ldr	r3, [pc, #220]	; (80081dc <xTaskResumeAll+0x118>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d162      	bne.n	80081cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008106:	4b36      	ldr	r3, [pc, #216]	; (80081e0 <xTaskResumeAll+0x11c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d05e      	beq.n	80081cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800810e:	e02f      	b.n	8008170 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008110:	4b34      	ldr	r3, [pc, #208]	; (80081e4 <xTaskResumeAll+0x120>)
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	3318      	adds	r3, #24
 800811c:	4618      	mov	r0, r3
 800811e:	f7fe fe3d 	bl	8006d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3304      	adds	r3, #4
 8008126:	4618      	mov	r0, r3
 8008128:	f7fe fe38 	bl	8006d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008130:	4b2d      	ldr	r3, [pc, #180]	; (80081e8 <xTaskResumeAll+0x124>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	429a      	cmp	r2, r3
 8008136:	d903      	bls.n	8008140 <xTaskResumeAll+0x7c>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	4a2a      	ldr	r2, [pc, #168]	; (80081e8 <xTaskResumeAll+0x124>)
 800813e:	6013      	str	r3, [r2, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008144:	4613      	mov	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	4413      	add	r3, r2
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4a27      	ldr	r2, [pc, #156]	; (80081ec <xTaskResumeAll+0x128>)
 800814e:	441a      	add	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3304      	adds	r3, #4
 8008154:	4619      	mov	r1, r3
 8008156:	4610      	mov	r0, r2
 8008158:	f7fe fdc3 	bl	8006ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008160:	4b23      	ldr	r3, [pc, #140]	; (80081f0 <xTaskResumeAll+0x12c>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008166:	429a      	cmp	r2, r3
 8008168:	d302      	bcc.n	8008170 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800816a:	4b22      	ldr	r3, [pc, #136]	; (80081f4 <xTaskResumeAll+0x130>)
 800816c:	2201      	movs	r2, #1
 800816e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008170:	4b1c      	ldr	r3, [pc, #112]	; (80081e4 <xTaskResumeAll+0x120>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1cb      	bne.n	8008110 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800817e:	f000 fb5f 	bl	8008840 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008182:	4b1d      	ldr	r3, [pc, #116]	; (80081f8 <xTaskResumeAll+0x134>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d010      	beq.n	80081b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800818e:	f000 f847 	bl	8008220 <xTaskIncrementTick>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d002      	beq.n	800819e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008198:	4b16      	ldr	r3, [pc, #88]	; (80081f4 <xTaskResumeAll+0x130>)
 800819a:	2201      	movs	r2, #1
 800819c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d1f1      	bne.n	800818e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80081aa:	4b13      	ldr	r3, [pc, #76]	; (80081f8 <xTaskResumeAll+0x134>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <xTaskResumeAll+0x130>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d009      	beq.n	80081cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80081b8:	2301      	movs	r3, #1
 80081ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <xTaskResumeAll+0x138>)
 80081be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081c2:	601a      	str	r2, [r3, #0]
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081cc:	f001 f9f2 	bl	80095b4 <vPortExitCritical>

	return xAlreadyYielded;
 80081d0:	68bb      	ldr	r3, [r7, #8]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	200015d8 	.word	0x200015d8
 80081e0:	200015b0 	.word	0x200015b0
 80081e4:	20001570 	.word	0x20001570
 80081e8:	200015b8 	.word	0x200015b8
 80081ec:	200010e0 	.word	0x200010e0
 80081f0:	200010dc 	.word	0x200010dc
 80081f4:	200015c4 	.word	0x200015c4
 80081f8:	200015c0 	.word	0x200015c0
 80081fc:	e000ed04 	.word	0xe000ed04

08008200 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008206:	4b05      	ldr	r3, [pc, #20]	; (800821c <xTaskGetTickCount+0x1c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800820c:	687b      	ldr	r3, [r7, #4]
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	200015b4 	.word	0x200015b4

08008220 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b086      	sub	sp, #24
 8008224:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008226:	2300      	movs	r3, #0
 8008228:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800822a:	4b4f      	ldr	r3, [pc, #316]	; (8008368 <xTaskIncrementTick+0x148>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f040 808f 	bne.w	8008352 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008234:	4b4d      	ldr	r3, [pc, #308]	; (800836c <xTaskIncrementTick+0x14c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3301      	adds	r3, #1
 800823a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800823c:	4a4b      	ldr	r2, [pc, #300]	; (800836c <xTaskIncrementTick+0x14c>)
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d120      	bne.n	800828a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008248:	4b49      	ldr	r3, [pc, #292]	; (8008370 <xTaskIncrementTick+0x150>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00a      	beq.n	8008268 <xTaskIncrementTick+0x48>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	603b      	str	r3, [r7, #0]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <xTaskIncrementTick+0x46>
 8008268:	4b41      	ldr	r3, [pc, #260]	; (8008370 <xTaskIncrementTick+0x150>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	60fb      	str	r3, [r7, #12]
 800826e:	4b41      	ldr	r3, [pc, #260]	; (8008374 <xTaskIncrementTick+0x154>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a3f      	ldr	r2, [pc, #252]	; (8008370 <xTaskIncrementTick+0x150>)
 8008274:	6013      	str	r3, [r2, #0]
 8008276:	4a3f      	ldr	r2, [pc, #252]	; (8008374 <xTaskIncrementTick+0x154>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6013      	str	r3, [r2, #0]
 800827c:	4b3e      	ldr	r3, [pc, #248]	; (8008378 <xTaskIncrementTick+0x158>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3301      	adds	r3, #1
 8008282:	4a3d      	ldr	r2, [pc, #244]	; (8008378 <xTaskIncrementTick+0x158>)
 8008284:	6013      	str	r3, [r2, #0]
 8008286:	f000 fadb 	bl	8008840 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800828a:	4b3c      	ldr	r3, [pc, #240]	; (800837c <xTaskIncrementTick+0x15c>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	429a      	cmp	r2, r3
 8008292:	d349      	bcc.n	8008328 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008294:	4b36      	ldr	r3, [pc, #216]	; (8008370 <xTaskIncrementTick+0x150>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d104      	bne.n	80082a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800829e:	4b37      	ldr	r3, [pc, #220]	; (800837c <xTaskIncrementTick+0x15c>)
 80082a0:	f04f 32ff 	mov.w	r2, #4294967295
 80082a4:	601a      	str	r2, [r3, #0]
					break;
 80082a6:	e03f      	b.n	8008328 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a8:	4b31      	ldr	r3, [pc, #196]	; (8008370 <xTaskIncrementTick+0x150>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80082b8:	693a      	ldr	r2, [r7, #16]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d203      	bcs.n	80082c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80082c0:	4a2e      	ldr	r2, [pc, #184]	; (800837c <xTaskIncrementTick+0x15c>)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80082c6:	e02f      	b.n	8008328 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3304      	adds	r3, #4
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fe fd65 	bl	8006d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d004      	beq.n	80082e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	3318      	adds	r3, #24
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fe fd5c 	bl	8006d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082e8:	4b25      	ldr	r3, [pc, #148]	; (8008380 <xTaskIncrementTick+0x160>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d903      	bls.n	80082f8 <xTaskIncrementTick+0xd8>
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f4:	4a22      	ldr	r2, [pc, #136]	; (8008380 <xTaskIncrementTick+0x160>)
 80082f6:	6013      	str	r3, [r2, #0]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082fc:	4613      	mov	r3, r2
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4a1f      	ldr	r2, [pc, #124]	; (8008384 <xTaskIncrementTick+0x164>)
 8008306:	441a      	add	r2, r3
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	3304      	adds	r3, #4
 800830c:	4619      	mov	r1, r3
 800830e:	4610      	mov	r0, r2
 8008310:	f7fe fce7 	bl	8006ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008318:	4b1b      	ldr	r3, [pc, #108]	; (8008388 <xTaskIncrementTick+0x168>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800831e:	429a      	cmp	r2, r3
 8008320:	d3b8      	bcc.n	8008294 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008322:	2301      	movs	r3, #1
 8008324:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008326:	e7b5      	b.n	8008294 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008328:	4b17      	ldr	r3, [pc, #92]	; (8008388 <xTaskIncrementTick+0x168>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	4915      	ldr	r1, [pc, #84]	; (8008384 <xTaskIncrementTick+0x164>)
 8008330:	4613      	mov	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4413      	add	r3, r2
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	440b      	add	r3, r1
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d901      	bls.n	8008344 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008344:	4b11      	ldr	r3, [pc, #68]	; (800838c <xTaskIncrementTick+0x16c>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800834c:	2301      	movs	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	e004      	b.n	800835c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008352:	4b0f      	ldr	r3, [pc, #60]	; (8008390 <xTaskIncrementTick+0x170>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3301      	adds	r3, #1
 8008358:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <xTaskIncrementTick+0x170>)
 800835a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800835c:	697b      	ldr	r3, [r7, #20]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3718      	adds	r7, #24
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}
 8008366:	bf00      	nop
 8008368:	200015d8 	.word	0x200015d8
 800836c:	200015b4 	.word	0x200015b4
 8008370:	20001568 	.word	0x20001568
 8008374:	2000156c 	.word	0x2000156c
 8008378:	200015c8 	.word	0x200015c8
 800837c:	200015d0 	.word	0x200015d0
 8008380:	200015b8 	.word	0x200015b8
 8008384:	200010e0 	.word	0x200010e0
 8008388:	200010dc 	.word	0x200010dc
 800838c:	200015c4 	.word	0x200015c4
 8008390:	200015c0 	.word	0x200015c0

08008394 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800839a:	4b2a      	ldr	r3, [pc, #168]	; (8008444 <vTaskSwitchContext+0xb0>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d003      	beq.n	80083aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80083a2:	4b29      	ldr	r3, [pc, #164]	; (8008448 <vTaskSwitchContext+0xb4>)
 80083a4:	2201      	movs	r2, #1
 80083a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80083a8:	e046      	b.n	8008438 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80083aa:	4b27      	ldr	r3, [pc, #156]	; (8008448 <vTaskSwitchContext+0xb4>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b0:	4b26      	ldr	r3, [pc, #152]	; (800844c <vTaskSwitchContext+0xb8>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e010      	b.n	80083da <vTaskSwitchContext+0x46>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10a      	bne.n	80083d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
 80083d2:	e7fe      	b.n	80083d2 <vTaskSwitchContext+0x3e>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
 80083da:	491d      	ldr	r1, [pc, #116]	; (8008450 <vTaskSwitchContext+0xbc>)
 80083dc:	68fa      	ldr	r2, [r7, #12]
 80083de:	4613      	mov	r3, r2
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	4413      	add	r3, r2
 80083e4:	009b      	lsls	r3, r3, #2
 80083e6:	440b      	add	r3, r1
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d0e4      	beq.n	80083b8 <vTaskSwitchContext+0x24>
 80083ee:	68fa      	ldr	r2, [r7, #12]
 80083f0:	4613      	mov	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	4a15      	ldr	r2, [pc, #84]	; (8008450 <vTaskSwitchContext+0xbc>)
 80083fa:	4413      	add	r3, r2
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	605a      	str	r2, [r3, #4]
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3308      	adds	r3, #8
 8008410:	429a      	cmp	r2, r3
 8008412:	d104      	bne.n	800841e <vTaskSwitchContext+0x8a>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	685a      	ldr	r2, [r3, #4]
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	4a0b      	ldr	r2, [pc, #44]	; (8008454 <vTaskSwitchContext+0xc0>)
 8008426:	6013      	str	r3, [r2, #0]
 8008428:	4a08      	ldr	r2, [pc, #32]	; (800844c <vTaskSwitchContext+0xb8>)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800842e:	4b09      	ldr	r3, [pc, #36]	; (8008454 <vTaskSwitchContext+0xc0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	3354      	adds	r3, #84	; 0x54
 8008434:	4a08      	ldr	r2, [pc, #32]	; (8008458 <vTaskSwitchContext+0xc4>)
 8008436:	6013      	str	r3, [r2, #0]
}
 8008438:	bf00      	nop
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr
 8008444:	200015d8 	.word	0x200015d8
 8008448:	200015c4 	.word	0x200015c4
 800844c:	200015b8 	.word	0x200015b8
 8008450:	200010e0 	.word	0x200010e0
 8008454:	200010dc 	.word	0x200010dc
 8008458:	20000018 	.word	0x20000018

0800845c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d10a      	bne.n	8008482 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	60fb      	str	r3, [r7, #12]
}
 800847e:	bf00      	nop
 8008480:	e7fe      	b.n	8008480 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <vTaskPlaceOnEventList+0x44>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	3318      	adds	r3, #24
 8008488:	4619      	mov	r1, r3
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7fe fc4d 	bl	8006d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008490:	2101      	movs	r1, #1
 8008492:	6838      	ldr	r0, [r7, #0]
 8008494:	f000 fb8e 	bl	8008bb4 <prvAddCurrentTaskToDelayedList>
}
 8008498:	bf00      	nop
 800849a:	3710      	adds	r7, #16
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	200010dc 	.word	0x200010dc

080084a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b086      	sub	sp, #24
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	60f8      	str	r0, [r7, #12]
 80084ac:	60b9      	str	r1, [r7, #8]
 80084ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10a      	bne.n	80084cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	617b      	str	r3, [r7, #20]
}
 80084c8:	bf00      	nop
 80084ca:	e7fe      	b.n	80084ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	3318      	adds	r3, #24
 80084d2:	4619      	mov	r1, r3
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7fe fc04 	bl	8006ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d002      	beq.n	80084e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80084e0:	f04f 33ff 	mov.w	r3, #4294967295
 80084e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80084e6:	6879      	ldr	r1, [r7, #4]
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	f000 fb63 	bl	8008bb4 <prvAddCurrentTaskToDelayedList>
	}
 80084ee:	bf00      	nop
 80084f0:	3718      	adds	r7, #24
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	200010dc 	.word	0x200010dc

080084fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10a      	bne.n	8008528 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008516:	f383 8811 	msr	BASEPRI, r3
 800851a:	f3bf 8f6f 	isb	sy
 800851e:	f3bf 8f4f 	dsb	sy
 8008522:	60fb      	str	r3, [r7, #12]
}
 8008524:	bf00      	nop
 8008526:	e7fe      	b.n	8008526 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3318      	adds	r3, #24
 800852c:	4618      	mov	r0, r3
 800852e:	f7fe fc35 	bl	8006d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008532:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <xTaskRemoveFromEventList+0xb0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d11d      	bne.n	8008576 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	3304      	adds	r3, #4
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fc2c 	bl	8006d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008548:	4b19      	ldr	r3, [pc, #100]	; (80085b0 <xTaskRemoveFromEventList+0xb4>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	429a      	cmp	r2, r3
 800854e:	d903      	bls.n	8008558 <xTaskRemoveFromEventList+0x5c>
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008554:	4a16      	ldr	r2, [pc, #88]	; (80085b0 <xTaskRemoveFromEventList+0xb4>)
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800855c:	4613      	mov	r3, r2
 800855e:	009b      	lsls	r3, r3, #2
 8008560:	4413      	add	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	4a13      	ldr	r2, [pc, #76]	; (80085b4 <xTaskRemoveFromEventList+0xb8>)
 8008566:	441a      	add	r2, r3
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	3304      	adds	r3, #4
 800856c:	4619      	mov	r1, r3
 800856e:	4610      	mov	r0, r2
 8008570:	f7fe fbb7 	bl	8006ce2 <vListInsertEnd>
 8008574:	e005      	b.n	8008582 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	3318      	adds	r3, #24
 800857a:	4619      	mov	r1, r3
 800857c:	480e      	ldr	r0, [pc, #56]	; (80085b8 <xTaskRemoveFromEventList+0xbc>)
 800857e:	f7fe fbb0 	bl	8006ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <xTaskRemoveFromEventList+0xc0>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	429a      	cmp	r2, r3
 800858e:	d905      	bls.n	800859c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008590:	2301      	movs	r3, #1
 8008592:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008594:	4b0a      	ldr	r3, [pc, #40]	; (80085c0 <xTaskRemoveFromEventList+0xc4>)
 8008596:	2201      	movs	r2, #1
 8008598:	601a      	str	r2, [r3, #0]
 800859a:	e001      	b.n	80085a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800859c:	2300      	movs	r3, #0
 800859e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80085a0:	697b      	ldr	r3, [r7, #20]
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	200015d8 	.word	0x200015d8
 80085b0:	200015b8 	.word	0x200015b8
 80085b4:	200010e0 	.word	0x200010e0
 80085b8:	20001570 	.word	0x20001570
 80085bc:	200010dc 	.word	0x200010dc
 80085c0:	200015c4 	.word	0x200015c4

080085c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80085cc:	4b06      	ldr	r3, [pc, #24]	; (80085e8 <vTaskInternalSetTimeOutState+0x24>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80085d4:	4b05      	ldr	r3, [pc, #20]	; (80085ec <vTaskInternalSetTimeOutState+0x28>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr
 80085e8:	200015c8 	.word	0x200015c8
 80085ec:	200015b4 	.word	0x200015b4

080085f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	613b      	str	r3, [r7, #16]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	60fb      	str	r3, [r7, #12]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008632:	f000 ff8f 	bl	8009554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008636:	4b1d      	ldr	r3, [pc, #116]	; (80086ac <xTaskCheckForTimeOut+0xbc>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	69ba      	ldr	r2, [r7, #24]
 8008642:	1ad3      	subs	r3, r2, r3
 8008644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864e:	d102      	bne.n	8008656 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	61fb      	str	r3, [r7, #28]
 8008654:	e023      	b.n	800869e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <xTaskCheckForTimeOut+0xc0>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	429a      	cmp	r2, r3
 8008660:	d007      	beq.n	8008672 <xTaskCheckForTimeOut+0x82>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	429a      	cmp	r2, r3
 800866a:	d302      	bcc.n	8008672 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800866c:	2301      	movs	r3, #1
 800866e:	61fb      	str	r3, [r7, #28]
 8008670:	e015      	b.n	800869e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	429a      	cmp	r2, r3
 800867a:	d20b      	bcs.n	8008694 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	1ad2      	subs	r2, r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff ff9b 	bl	80085c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
 8008692:	e004      	b.n	800869e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800869a:	2301      	movs	r3, #1
 800869c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800869e:	f000 ff89 	bl	80095b4 <vPortExitCritical>

	return xReturn;
 80086a2:	69fb      	ldr	r3, [r7, #28]
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	200015b4 	.word	0x200015b4
 80086b0:	200015c8 	.word	0x200015c8

080086b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80086b4:	b480      	push	{r7}
 80086b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80086b8:	4b03      	ldr	r3, [pc, #12]	; (80086c8 <vTaskMissedYield+0x14>)
 80086ba:	2201      	movs	r2, #1
 80086bc:	601a      	str	r2, [r3, #0]
}
 80086be:	bf00      	nop
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr
 80086c8:	200015c4 	.word	0x200015c4

080086cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b082      	sub	sp, #8
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80086d4:	f000 f852 	bl	800877c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80086d8:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <prvIdleTask+0x28>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2b01      	cmp	r3, #1
 80086de:	d9f9      	bls.n	80086d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <prvIdleTask+0x2c>)
 80086e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e6:	601a      	str	r2, [r3, #0]
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80086f0:	e7f0      	b.n	80086d4 <prvIdleTask+0x8>
 80086f2:	bf00      	nop
 80086f4:	200010e0 	.word	0x200010e0
 80086f8:	e000ed04 	.word	0xe000ed04

080086fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b082      	sub	sp, #8
 8008700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008702:	2300      	movs	r3, #0
 8008704:	607b      	str	r3, [r7, #4]
 8008706:	e00c      	b.n	8008722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <prvInitialiseTaskLists+0x60>)
 8008714:	4413      	add	r3, r2
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe fab6 	bl	8006c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	3301      	adds	r3, #1
 8008720:	607b      	str	r3, [r7, #4]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2b37      	cmp	r3, #55	; 0x37
 8008726:	d9ef      	bls.n	8008708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008728:	480d      	ldr	r0, [pc, #52]	; (8008760 <prvInitialiseTaskLists+0x64>)
 800872a:	f7fe faad 	bl	8006c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800872e:	480d      	ldr	r0, [pc, #52]	; (8008764 <prvInitialiseTaskLists+0x68>)
 8008730:	f7fe faaa 	bl	8006c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008734:	480c      	ldr	r0, [pc, #48]	; (8008768 <prvInitialiseTaskLists+0x6c>)
 8008736:	f7fe faa7 	bl	8006c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800873a:	480c      	ldr	r0, [pc, #48]	; (800876c <prvInitialiseTaskLists+0x70>)
 800873c:	f7fe faa4 	bl	8006c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008740:	480b      	ldr	r0, [pc, #44]	; (8008770 <prvInitialiseTaskLists+0x74>)
 8008742:	f7fe faa1 	bl	8006c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008746:	4b0b      	ldr	r3, [pc, #44]	; (8008774 <prvInitialiseTaskLists+0x78>)
 8008748:	4a05      	ldr	r2, [pc, #20]	; (8008760 <prvInitialiseTaskLists+0x64>)
 800874a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800874c:	4b0a      	ldr	r3, [pc, #40]	; (8008778 <prvInitialiseTaskLists+0x7c>)
 800874e:	4a05      	ldr	r2, [pc, #20]	; (8008764 <prvInitialiseTaskLists+0x68>)
 8008750:	601a      	str	r2, [r3, #0]
}
 8008752:	bf00      	nop
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}
 800875a:	bf00      	nop
 800875c:	200010e0 	.word	0x200010e0
 8008760:	20001540 	.word	0x20001540
 8008764:	20001554 	.word	0x20001554
 8008768:	20001570 	.word	0x20001570
 800876c:	20001584 	.word	0x20001584
 8008770:	2000159c 	.word	0x2000159c
 8008774:	20001568 	.word	0x20001568
 8008778:	2000156c 	.word	0x2000156c

0800877c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b082      	sub	sp, #8
 8008780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008782:	e019      	b.n	80087b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008784:	f000 fee6 	bl	8009554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008788:	4b10      	ldr	r3, [pc, #64]	; (80087cc <prvCheckTasksWaitingTermination+0x50>)
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3304      	adds	r3, #4
 8008794:	4618      	mov	r0, r3
 8008796:	f7fe fb01 	bl	8006d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800879a:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <prvCheckTasksWaitingTermination+0x54>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	3b01      	subs	r3, #1
 80087a0:	4a0b      	ldr	r2, [pc, #44]	; (80087d0 <prvCheckTasksWaitingTermination+0x54>)
 80087a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80087a4:	4b0b      	ldr	r3, [pc, #44]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	4a0a      	ldr	r2, [pc, #40]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80087ae:	f000 ff01 	bl	80095b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f810 	bl	80087d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80087b8:	4b06      	ldr	r3, [pc, #24]	; (80087d4 <prvCheckTasksWaitingTermination+0x58>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e1      	bne.n	8008784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80087c0:	bf00      	nop
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	20001584 	.word	0x20001584
 80087d0:	200015b0 	.word	0x200015b0
 80087d4:	20001598 	.word	0x20001598

080087d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	3354      	adds	r3, #84	; 0x54
 80087e4:	4618      	mov	r0, r3
 80087e6:	f001 fc13 	bl	800a010 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d108      	bne.n	8008806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f8:	4618      	mov	r0, r3
 80087fa:	f001 f899 	bl	8009930 <vPortFree>
				vPortFree( pxTCB );
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f001 f896 	bl	8009930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008804:	e018      	b.n	8008838 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800880c:	2b01      	cmp	r3, #1
 800880e:	d103      	bne.n	8008818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f001 f88d 	bl	8009930 <vPortFree>
	}
 8008816:	e00f      	b.n	8008838 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800881e:	2b02      	cmp	r3, #2
 8008820:	d00a      	beq.n	8008838 <prvDeleteTCB+0x60>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	60fb      	str	r3, [r7, #12]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <prvDeleteTCB+0x5e>
	}
 8008838:	bf00      	nop
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008846:	4b0c      	ldr	r3, [pc, #48]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d104      	bne.n	800885a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008850:	4b0a      	ldr	r3, [pc, #40]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 8008852:	f04f 32ff 	mov.w	r2, #4294967295
 8008856:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008858:	e008      	b.n	800886c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885a:	4b07      	ldr	r3, [pc, #28]	; (8008878 <prvResetNextTaskUnblockTime+0x38>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	4a04      	ldr	r2, [pc, #16]	; (800887c <prvResetNextTaskUnblockTime+0x3c>)
 800886a:	6013      	str	r3, [r2, #0]
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr
 8008878:	20001568 	.word	0x20001568
 800887c:	200015d0 	.word	0x200015d0

08008880 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008880:	b480      	push	{r7}
 8008882:	b083      	sub	sp, #12
 8008884:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008886:	4b05      	ldr	r3, [pc, #20]	; (800889c <xTaskGetCurrentTaskHandle+0x1c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800888c:	687b      	ldr	r3, [r7, #4]
	}
 800888e:	4618      	mov	r0, r3
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	200010dc 	.word	0x200010dc

080088a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80088a6:	4b0b      	ldr	r3, [pc, #44]	; (80088d4 <xTaskGetSchedulerState+0x34>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80088ae:	2301      	movs	r3, #1
 80088b0:	607b      	str	r3, [r7, #4]
 80088b2:	e008      	b.n	80088c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b4:	4b08      	ldr	r3, [pc, #32]	; (80088d8 <xTaskGetSchedulerState+0x38>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d102      	bne.n	80088c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80088bc:	2302      	movs	r3, #2
 80088be:	607b      	str	r3, [r7, #4]
 80088c0:	e001      	b.n	80088c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80088c2:	2300      	movs	r3, #0
 80088c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80088c6:	687b      	ldr	r3, [r7, #4]
	}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr
 80088d4:	200015bc 	.word	0x200015bc
 80088d8:	200015d8 	.word	0x200015d8

080088dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d051      	beq.n	8008996 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f6:	4b2a      	ldr	r3, [pc, #168]	; (80089a0 <xTaskPriorityInherit+0xc4>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d241      	bcs.n	8008984 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	699b      	ldr	r3, [r3, #24]
 8008904:	2b00      	cmp	r3, #0
 8008906:	db06      	blt.n	8008916 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008908:	4b25      	ldr	r3, [pc, #148]	; (80089a0 <xTaskPriorityInherit+0xc4>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6959      	ldr	r1, [r3, #20]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <xTaskPriorityInherit+0xc8>)
 8008928:	4413      	add	r3, r2
 800892a:	4299      	cmp	r1, r3
 800892c:	d122      	bne.n	8008974 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3304      	adds	r3, #4
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fa32 	bl	8006d9c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008938:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <xTaskPriorityInherit+0xc4>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008946:	4b18      	ldr	r3, [pc, #96]	; (80089a8 <xTaskPriorityInherit+0xcc>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	429a      	cmp	r2, r3
 800894c:	d903      	bls.n	8008956 <xTaskPriorityInherit+0x7a>
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <xTaskPriorityInherit+0xcc>)
 8008954:	6013      	str	r3, [r2, #0]
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895a:	4613      	mov	r3, r2
 800895c:	009b      	lsls	r3, r3, #2
 800895e:	4413      	add	r3, r2
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4a10      	ldr	r2, [pc, #64]	; (80089a4 <xTaskPriorityInherit+0xc8>)
 8008964:	441a      	add	r2, r3
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3304      	adds	r3, #4
 800896a:	4619      	mov	r1, r3
 800896c:	4610      	mov	r0, r2
 800896e:	f7fe f9b8 	bl	8006ce2 <vListInsertEnd>
 8008972:	e004      	b.n	800897e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008974:	4b0a      	ldr	r3, [pc, #40]	; (80089a0 <xTaskPriorityInherit+0xc4>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800897e:	2301      	movs	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
 8008982:	e008      	b.n	8008996 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008988:	4b05      	ldr	r3, [pc, #20]	; (80089a0 <xTaskPriorityInherit+0xc4>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	429a      	cmp	r2, r3
 8008990:	d201      	bcs.n	8008996 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008996:	68fb      	ldr	r3, [r7, #12]
	}
 8008998:	4618      	mov	r0, r3
 800899a:	3710      	adds	r7, #16
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	200010dc 	.word	0x200010dc
 80089a4:	200010e0 	.word	0x200010e0
 80089a8:	200015b8 	.word	0x200015b8

080089ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d056      	beq.n	8008a70 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089c2:	4b2e      	ldr	r3, [pc, #184]	; (8008a7c <xTaskPriorityDisinherit+0xd0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	429a      	cmp	r2, r3
 80089ca:	d00a      	beq.n	80089e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60fb      	str	r3, [r7, #12]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10a      	bne.n	8008a00 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80089ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ee:	f383 8811 	msr	BASEPRI, r3
 80089f2:	f3bf 8f6f 	isb	sy
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	60bb      	str	r3, [r7, #8]
}
 80089fc:	bf00      	nop
 80089fe:	e7fe      	b.n	80089fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a04:	1e5a      	subs	r2, r3, #1
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d02c      	beq.n	8008a70 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d128      	bne.n	8008a70 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	3304      	adds	r3, #4
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fe f9ba 	bl	8006d9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a40:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <xTaskPriorityDisinherit+0xd4>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d903      	bls.n	8008a50 <xTaskPriorityDisinherit+0xa4>
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4a0c      	ldr	r2, [pc, #48]	; (8008a80 <xTaskPriorityDisinherit+0xd4>)
 8008a4e:	6013      	str	r3, [r2, #0]
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4a09      	ldr	r2, [pc, #36]	; (8008a84 <xTaskPriorityDisinherit+0xd8>)
 8008a5e:	441a      	add	r2, r3
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3304      	adds	r3, #4
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	f7fe f93b 	bl	8006ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a70:	697b      	ldr	r3, [r7, #20]
	}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3718      	adds	r7, #24
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	200010dc 	.word	0x200010dc
 8008a80:	200015b8 	.word	0x200015b8
 8008a84:	200010e0 	.word	0x200010e0

08008a88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d06a      	beq.n	8008b76 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d10a      	bne.n	8008abe <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	60fb      	str	r3, [r7, #12]
}
 8008aba:	bf00      	nop
 8008abc:	e7fe      	b.n	8008abc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac2:	683a      	ldr	r2, [r7, #0]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d902      	bls.n	8008ace <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	61fb      	str	r3, [r7, #28]
 8008acc:	e002      	b.n	8008ad4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008ad4:	69bb      	ldr	r3, [r7, #24]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	429a      	cmp	r2, r3
 8008adc:	d04b      	beq.n	8008b76 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d146      	bne.n	8008b76 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008ae8:	4b25      	ldr	r3, [pc, #148]	; (8008b80 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d10a      	bne.n	8008b08 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8008af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008af6:	f383 8811 	msr	BASEPRI, r3
 8008afa:	f3bf 8f6f 	isb	sy
 8008afe:	f3bf 8f4f 	dsb	sy
 8008b02:	60bb      	str	r3, [r7, #8]
}
 8008b04:	bf00      	nop
 8008b06:	e7fe      	b.n	8008b06 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008b08:	69bb      	ldr	r3, [r7, #24]
 8008b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	69fa      	ldr	r2, [r7, #28]
 8008b12:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008b14:	69bb      	ldr	r3, [r7, #24]
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	db04      	blt.n	8008b26 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	6959      	ldr	r1, [r3, #20]
 8008b2a:	693a      	ldr	r2, [r7, #16]
 8008b2c:	4613      	mov	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	4413      	add	r3, r2
 8008b32:	009b      	lsls	r3, r3, #2
 8008b34:	4a13      	ldr	r2, [pc, #76]	; (8008b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b36:	4413      	add	r3, r2
 8008b38:	4299      	cmp	r1, r3
 8008b3a:	d11c      	bne.n	8008b76 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe f92b 	bl	8006d9c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b4a:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d903      	bls.n	8008b5a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b56:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008b58:	6013      	str	r3, [r2, #0]
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b5e:	4613      	mov	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4413      	add	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4a07      	ldr	r2, [pc, #28]	; (8008b84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008b68:	441a      	add	r2, r3
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	4619      	mov	r1, r3
 8008b70:	4610      	mov	r0, r2
 8008b72:	f7fe f8b6 	bl	8006ce2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b76:	bf00      	nop
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	200010dc 	.word	0x200010dc
 8008b84:	200010e0 	.word	0x200010e0
 8008b88:	200015b8 	.word	0x200015b8

08008b8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008b98:	4b05      	ldr	r3, [pc, #20]	; (8008bb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b9e:	3201      	adds	r2, #1
 8008ba0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8008ba2:	4b03      	ldr	r3, [pc, #12]	; (8008bb0 <pvTaskIncrementMutexHeldCount+0x24>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
	}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	200010dc 	.word	0x200010dc

08008bb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bbe:	4b21      	ldr	r3, [pc, #132]	; (8008c44 <prvAddCurrentTaskToDelayedList+0x90>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bc4:	4b20      	ldr	r3, [pc, #128]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	3304      	adds	r3, #4
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7fe f8e6 	bl	8006d9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bd6:	d10a      	bne.n	8008bee <prvAddCurrentTaskToDelayedList+0x3a>
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d007      	beq.n	8008bee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bde:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4819      	ldr	r0, [pc, #100]	; (8008c4c <prvAddCurrentTaskToDelayedList+0x98>)
 8008be8:	f7fe f87b 	bl	8006ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008bec:	e026      	b.n	8008c3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008bee:	68fa      	ldr	r2, [r7, #12]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bf6:	4b14      	ldr	r3, [pc, #80]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	429a      	cmp	r2, r3
 8008c04:	d209      	bcs.n	8008c1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c06:	4b12      	ldr	r3, [pc, #72]	; (8008c50 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	4619      	mov	r1, r3
 8008c12:	4610      	mov	r0, r2
 8008c14:	f7fe f889 	bl	8006d2a <vListInsert>
}
 8008c18:	e010      	b.n	8008c3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c1a:	4b0e      	ldr	r3, [pc, #56]	; (8008c54 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	4b0a      	ldr	r3, [pc, #40]	; (8008c48 <prvAddCurrentTaskToDelayedList+0x94>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3304      	adds	r3, #4
 8008c24:	4619      	mov	r1, r3
 8008c26:	4610      	mov	r0, r2
 8008c28:	f7fe f87f 	bl	8006d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c2c:	4b0a      	ldr	r3, [pc, #40]	; (8008c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d202      	bcs.n	8008c3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008c36:	4a08      	ldr	r2, [pc, #32]	; (8008c58 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	6013      	str	r3, [r2, #0]
}
 8008c3c:	bf00      	nop
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	200015b4 	.word	0x200015b4
 8008c48:	200010dc 	.word	0x200010dc
 8008c4c:	2000159c 	.word	0x2000159c
 8008c50:	2000156c 	.word	0x2000156c
 8008c54:	20001568 	.word	0x20001568
 8008c58:	200015d0 	.word	0x200015d0

08008c5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b08a      	sub	sp, #40	; 0x28
 8008c60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c66:	f000 fb07 	bl	8009278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c6a:	4b1c      	ldr	r3, [pc, #112]	; (8008cdc <xTimerCreateTimerTask+0x80>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d021      	beq.n	8008cb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c7a:	1d3a      	adds	r2, r7, #4
 8008c7c:	f107 0108 	add.w	r1, r7, #8
 8008c80:	f107 030c 	add.w	r3, r7, #12
 8008c84:	4618      	mov	r0, r3
 8008c86:	f7fd ffe5 	bl	8006c54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c8a:	6879      	ldr	r1, [r7, #4]
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	68fa      	ldr	r2, [r7, #12]
 8008c90:	9202      	str	r2, [sp, #8]
 8008c92:	9301      	str	r3, [sp, #4]
 8008c94:	2302      	movs	r3, #2
 8008c96:	9300      	str	r3, [sp, #0]
 8008c98:	2300      	movs	r3, #0
 8008c9a:	460a      	mov	r2, r1
 8008c9c:	4910      	ldr	r1, [pc, #64]	; (8008ce0 <xTimerCreateTimerTask+0x84>)
 8008c9e:	4811      	ldr	r0, [pc, #68]	; (8008ce4 <xTimerCreateTimerTask+0x88>)
 8008ca0:	f7fe ffa6 	bl	8007bf0 <xTaskCreateStatic>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	4a10      	ldr	r2, [pc, #64]	; (8008ce8 <xTimerCreateTimerTask+0x8c>)
 8008ca8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008caa:	4b0f      	ldr	r3, [pc, #60]	; (8008ce8 <xTimerCreateTimerTask+0x8c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d001      	beq.n	8008cb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d10a      	bne.n	8008cd2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc0:	f383 8811 	msr	BASEPRI, r3
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	f3bf 8f4f 	dsb	sy
 8008ccc:	613b      	str	r3, [r7, #16]
}
 8008cce:	bf00      	nop
 8008cd0:	e7fe      	b.n	8008cd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008cd2:	697b      	ldr	r3, [r7, #20]
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	2000160c 	.word	0x2000160c
 8008ce0:	0800a7b8 	.word	0x0800a7b8
 8008ce4:	08008e21 	.word	0x08008e21
 8008ce8:	20001610 	.word	0x20001610

08008cec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b08a      	sub	sp, #40	; 0x28
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	60f8      	str	r0, [r7, #12]
 8008cf4:	60b9      	str	r1, [r7, #8]
 8008cf6:	607a      	str	r2, [r7, #4]
 8008cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d08:	f383 8811 	msr	BASEPRI, r3
 8008d0c:	f3bf 8f6f 	isb	sy
 8008d10:	f3bf 8f4f 	dsb	sy
 8008d14:	623b      	str	r3, [r7, #32]
}
 8008d16:	bf00      	nop
 8008d18:	e7fe      	b.n	8008d18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	; (8008d84 <xTimerGenericCommand+0x98>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d02a      	beq.n	8008d78 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	2b05      	cmp	r3, #5
 8008d32:	dc18      	bgt.n	8008d66 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008d34:	f7ff fdb4 	bl	80088a0 <xTaskGetSchedulerState>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d109      	bne.n	8008d52 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008d3e:	4b11      	ldr	r3, [pc, #68]	; (8008d84 <xTimerGenericCommand+0x98>)
 8008d40:	6818      	ldr	r0, [r3, #0]
 8008d42:	f107 0110 	add.w	r1, r7, #16
 8008d46:	2300      	movs	r3, #0
 8008d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d4a:	f7fe fa45 	bl	80071d8 <xQueueGenericSend>
 8008d4e:	6278      	str	r0, [r7, #36]	; 0x24
 8008d50:	e012      	b.n	8008d78 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d52:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <xTimerGenericCommand+0x98>)
 8008d54:	6818      	ldr	r0, [r3, #0]
 8008d56:	f107 0110 	add.w	r1, r7, #16
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f7fe fa3b 	bl	80071d8 <xQueueGenericSend>
 8008d62:	6278      	str	r0, [r7, #36]	; 0x24
 8008d64:	e008      	b.n	8008d78 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d66:	4b07      	ldr	r3, [pc, #28]	; (8008d84 <xTimerGenericCommand+0x98>)
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	f107 0110 	add.w	r1, r7, #16
 8008d6e:	2300      	movs	r3, #0
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	f7fe fb2f 	bl	80073d4 <xQueueGenericSendFromISR>
 8008d76:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3728      	adds	r7, #40	; 0x28
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	2000160c 	.word	0x2000160c

08008d88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b088      	sub	sp, #32
 8008d8c:	af02      	add	r7, sp, #8
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d92:	4b22      	ldr	r3, [pc, #136]	; (8008e1c <prvProcessExpiredTimer+0x94>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4618      	mov	r0, r3
 8008da2:	f7fd fffb 	bl	8006d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008dac:	f003 0304 	and.w	r3, r3, #4
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d022      	beq.n	8008dfa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	699a      	ldr	r2, [r3, #24]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	18d1      	adds	r1, r2, r3
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	683a      	ldr	r2, [r7, #0]
 8008dc0:	6978      	ldr	r0, [r7, #20]
 8008dc2:	f000 f8d1 	bl	8008f68 <prvInsertTimerInActiveList>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d01f      	beq.n	8008e0c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008dcc:	2300      	movs	r3, #0
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	6978      	ldr	r0, [r7, #20]
 8008dd8:	f7ff ff88 	bl	8008cec <xTimerGenericCommand>
 8008ddc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d113      	bne.n	8008e0c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	60fb      	str	r3, [r7, #12]
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e00:	f023 0301 	bic.w	r3, r3, #1
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	6978      	ldr	r0, [r7, #20]
 8008e12:	4798      	blx	r3
}
 8008e14:	bf00      	nop
 8008e16:	3718      	adds	r7, #24
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}
 8008e1c:	20001604 	.word	0x20001604

08008e20 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e28:	f107 0308 	add.w	r3, r7, #8
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f857 	bl	8008ee0 <prvGetNextExpireTime>
 8008e32:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4619      	mov	r1, r3
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f803 	bl	8008e44 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008e3e:	f000 f8d5 	bl	8008fec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e42:	e7f1      	b.n	8008e28 <prvTimerTask+0x8>

08008e44 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b084      	sub	sp, #16
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e4e:	f7ff f92b 	bl	80080a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e52:	f107 0308 	add.w	r3, r7, #8
 8008e56:	4618      	mov	r0, r3
 8008e58:	f000 f866 	bl	8008f28 <prvSampleTimeNow>
 8008e5c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d130      	bne.n	8008ec6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <prvProcessTimerOrBlockTask+0x3c>
 8008e6a:	687a      	ldr	r2, [r7, #4]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d806      	bhi.n	8008e80 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e72:	f7ff f927 	bl	80080c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f7ff ff85 	bl	8008d88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e7e:	e024      	b.n	8008eca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d008      	beq.n	8008e98 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e86:	4b13      	ldr	r3, [pc, #76]	; (8008ed4 <prvProcessTimerOrBlockTask+0x90>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d101      	bne.n	8008e94 <prvProcessTimerOrBlockTask+0x50>
 8008e90:	2301      	movs	r3, #1
 8008e92:	e000      	b.n	8008e96 <prvProcessTimerOrBlockTask+0x52>
 8008e94:	2300      	movs	r3, #0
 8008e96:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e98:	4b0f      	ldr	r3, [pc, #60]	; (8008ed8 <prvProcessTimerOrBlockTask+0x94>)
 8008e9a:	6818      	ldr	r0, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	f7fe fe6f 	bl	8007b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008eaa:	f7ff f90b 	bl	80080c4 <xTaskResumeAll>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008eb4:	4b09      	ldr	r3, [pc, #36]	; (8008edc <prvProcessTimerOrBlockTask+0x98>)
 8008eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	f3bf 8f6f 	isb	sy
}
 8008ec4:	e001      	b.n	8008eca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008ec6:	f7ff f8fd 	bl	80080c4 <xTaskResumeAll>
}
 8008eca:	bf00      	nop
 8008ecc:	3710      	adds	r7, #16
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	bf00      	nop
 8008ed4:	20001608 	.word	0x20001608
 8008ed8:	2000160c 	.word	0x2000160c
 8008edc:	e000ed04 	.word	0xe000ed04

08008ee0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b085      	sub	sp, #20
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008ee8:	4b0e      	ldr	r3, [pc, #56]	; (8008f24 <prvGetNextExpireTime+0x44>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <prvGetNextExpireTime+0x16>
 8008ef2:	2201      	movs	r2, #1
 8008ef4:	e000      	b.n	8008ef8 <prvGetNextExpireTime+0x18>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d105      	bne.n	8008f10 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008f04:	4b07      	ldr	r3, [pc, #28]	; (8008f24 <prvGetNextExpireTime+0x44>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	e001      	b.n	8008f14 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008f14:	68fb      	ldr	r3, [r7, #12]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3714      	adds	r7, #20
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20001604 	.word	0x20001604

08008f28 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008f30:	f7ff f966 	bl	8008200 <xTaskGetTickCount>
 8008f34:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008f36:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <prvSampleTimeNow+0x3c>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68fa      	ldr	r2, [r7, #12]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d205      	bcs.n	8008f4c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f40:	f000 f936 	bl	80091b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e002      	b.n	8008f52 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f52:	4a04      	ldr	r2, [pc, #16]	; (8008f64 <prvSampleTimeNow+0x3c>)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f58:	68fb      	ldr	r3, [r7, #12]
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20001614 	.word	0x20001614

08008f68 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f76:	2300      	movs	r3, #0
 8008f78:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f86:	68ba      	ldr	r2, [r7, #8]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d812      	bhi.n	8008fb4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d302      	bcc.n	8008fa2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	617b      	str	r3, [r7, #20]
 8008fa0:	e01b      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008fa2:	4b10      	ldr	r3, [pc, #64]	; (8008fe4 <prvInsertTimerInActiveList+0x7c>)
 8008fa4:	681a      	ldr	r2, [r3, #0]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	3304      	adds	r3, #4
 8008faa:	4619      	mov	r1, r3
 8008fac:	4610      	mov	r0, r2
 8008fae:	f7fd febc 	bl	8006d2a <vListInsert>
 8008fb2:	e012      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	429a      	cmp	r2, r3
 8008fba:	d206      	bcs.n	8008fca <prvInsertTimerInActiveList+0x62>
 8008fbc:	68ba      	ldr	r2, [r7, #8]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	429a      	cmp	r2, r3
 8008fc2:	d302      	bcc.n	8008fca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	617b      	str	r3, [r7, #20]
 8008fc8:	e007      	b.n	8008fda <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008fca:	4b07      	ldr	r3, [pc, #28]	; (8008fe8 <prvInsertTimerInActiveList+0x80>)
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	4610      	mov	r0, r2
 8008fd6:	f7fd fea8 	bl	8006d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008fda:	697b      	ldr	r3, [r7, #20]
}
 8008fdc:	4618      	mov	r0, r3
 8008fde:	3718      	adds	r7, #24
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	20001608 	.word	0x20001608
 8008fe8:	20001604 	.word	0x20001604

08008fec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b08e      	sub	sp, #56	; 0x38
 8008ff0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ff2:	e0ca      	b.n	800918a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	da18      	bge.n	800902c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ffa:	1d3b      	adds	r3, r7, #4
 8008ffc:	3304      	adds	r3, #4
 8008ffe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	61fb      	str	r3, [r7, #28]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800901c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009022:	6850      	ldr	r0, [r2, #4]
 8009024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009026:	6892      	ldr	r2, [r2, #8]
 8009028:	4611      	mov	r1, r2
 800902a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2b00      	cmp	r3, #0
 8009030:	f2c0 80aa 	blt.w	8009188 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903a:	695b      	ldr	r3, [r3, #20]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d004      	beq.n	800904a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	3304      	adds	r3, #4
 8009044:	4618      	mov	r0, r3
 8009046:	f7fd fea9 	bl	8006d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800904a:	463b      	mov	r3, r7
 800904c:	4618      	mov	r0, r3
 800904e:	f7ff ff6b 	bl	8008f28 <prvSampleTimeNow>
 8009052:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b09      	cmp	r3, #9
 8009058:	f200 8097 	bhi.w	800918a <prvProcessReceivedCommands+0x19e>
 800905c:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <prvProcessReceivedCommands+0x78>)
 800905e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009062:	bf00      	nop
 8009064:	0800908d 	.word	0x0800908d
 8009068:	0800908d 	.word	0x0800908d
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009101 	.word	0x08009101
 8009074:	08009115 	.word	0x08009115
 8009078:	0800915f 	.word	0x0800915f
 800907c:	0800908d 	.word	0x0800908d
 8009080:	0800908d 	.word	0x0800908d
 8009084:	08009101 	.word	0x08009101
 8009088:	08009115 	.word	0x08009115
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800908c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009092:	f043 0301 	orr.w	r3, r3, #1
 8009096:	b2da      	uxtb	r2, r3
 8009098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800909e:	68ba      	ldr	r2, [r7, #8]
 80090a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	18d1      	adds	r1, r2, r3
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ac:	f7ff ff5c 	bl	8008f68 <prvInsertTimerInActiveList>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d069      	beq.n	800918a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d05e      	beq.n	800918a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80090cc:	68ba      	ldr	r2, [r7, #8]
 80090ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	441a      	add	r2, r3
 80090d4:	2300      	movs	r3, #0
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	2300      	movs	r3, #0
 80090da:	2100      	movs	r1, #0
 80090dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090de:	f7ff fe05 	bl	8008cec <xTimerGenericCommand>
 80090e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d14f      	bne.n	800918a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	61bb      	str	r3, [r7, #24]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009106:	f023 0301 	bic.w	r3, r3, #1
 800910a:	b2da      	uxtb	r2, r3
 800910c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009112:	e03a      	b.n	800918a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800911a:	f043 0301 	orr.w	r3, r3, #1
 800911e:	b2da      	uxtb	r2, r3
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10a      	bne.n	800914a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	617b      	str	r3, [r7, #20]
}
 8009146:	bf00      	nop
 8009148:	e7fe      	b.n	8009148 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800914a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800914c:	699a      	ldr	r2, [r3, #24]
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	18d1      	adds	r1, r2, r3
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009156:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009158:	f7ff ff06 	bl	8008f68 <prvInsertTimerInActiveList>
					break;
 800915c:	e015      	b.n	800918a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009164:	f003 0302 	and.w	r3, r3, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d103      	bne.n	8009174 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800916c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800916e:	f000 fbdf 	bl	8009930 <vPortFree>
 8009172:	e00a      	b.n	800918a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009176:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800917a:	f023 0301 	bic.w	r3, r3, #1
 800917e:	b2da      	uxtb	r2, r3
 8009180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009182:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009186:	e000      	b.n	800918a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800918a:	4b08      	ldr	r3, [pc, #32]	; (80091ac <prvProcessReceivedCommands+0x1c0>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	1d39      	adds	r1, r7, #4
 8009190:	2200      	movs	r2, #0
 8009192:	4618      	mov	r0, r3
 8009194:	f7fe f9ba 	bl	800750c <xQueueReceive>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	f47f af2a 	bne.w	8008ff4 <prvProcessReceivedCommands+0x8>
	}
}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	3730      	adds	r7, #48	; 0x30
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
 80091aa:	bf00      	nop
 80091ac:	2000160c 	.word	0x2000160c

080091b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091b6:	e048      	b.n	800924a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80091b8:	4b2d      	ldr	r3, [pc, #180]	; (8009270 <prvSwitchTimerLists+0xc0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c2:	4b2b      	ldr	r3, [pc, #172]	; (8009270 <prvSwitchTimerLists+0xc0>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	68db      	ldr	r3, [r3, #12]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	3304      	adds	r3, #4
 80091d0:	4618      	mov	r0, r3
 80091d2:	f7fd fde3 	bl	8006d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	68f8      	ldr	r0, [r7, #12]
 80091dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d02e      	beq.n	800924a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	699b      	ldr	r3, [r3, #24]
 80091f0:	693a      	ldr	r2, [r7, #16]
 80091f2:	4413      	add	r3, r2
 80091f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	d90e      	bls.n	800921c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800920a:	4b19      	ldr	r3, [pc, #100]	; (8009270 <prvSwitchTimerLists+0xc0>)
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	3304      	adds	r3, #4
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7fd fd88 	bl	8006d2a <vListInsert>
 800921a:	e016      	b.n	800924a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800921c:	2300      	movs	r3, #0
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	2300      	movs	r3, #0
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	2100      	movs	r1, #0
 8009226:	68f8      	ldr	r0, [r7, #12]
 8009228:	f7ff fd60 	bl	8008cec <xTimerGenericCommand>
 800922c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	603b      	str	r3, [r7, #0]
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800924a:	4b09      	ldr	r3, [pc, #36]	; (8009270 <prvSwitchTimerLists+0xc0>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d1b1      	bne.n	80091b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009254:	4b06      	ldr	r3, [pc, #24]	; (8009270 <prvSwitchTimerLists+0xc0>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800925a:	4b06      	ldr	r3, [pc, #24]	; (8009274 <prvSwitchTimerLists+0xc4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	4a04      	ldr	r2, [pc, #16]	; (8009270 <prvSwitchTimerLists+0xc0>)
 8009260:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009262:	4a04      	ldr	r2, [pc, #16]	; (8009274 <prvSwitchTimerLists+0xc4>)
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	6013      	str	r3, [r2, #0]
}
 8009268:	bf00      	nop
 800926a:	3718      	adds	r7, #24
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	20001604 	.word	0x20001604
 8009274:	20001608 	.word	0x20001608

08009278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800927e:	f000 f969 	bl	8009554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009282:	4b15      	ldr	r3, [pc, #84]	; (80092d8 <prvCheckForValidListAndQueue+0x60>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d120      	bne.n	80092cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800928a:	4814      	ldr	r0, [pc, #80]	; (80092dc <prvCheckForValidListAndQueue+0x64>)
 800928c:	f7fd fcfc 	bl	8006c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009290:	4813      	ldr	r0, [pc, #76]	; (80092e0 <prvCheckForValidListAndQueue+0x68>)
 8009292:	f7fd fcf9 	bl	8006c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009296:	4b13      	ldr	r3, [pc, #76]	; (80092e4 <prvCheckForValidListAndQueue+0x6c>)
 8009298:	4a10      	ldr	r2, [pc, #64]	; (80092dc <prvCheckForValidListAndQueue+0x64>)
 800929a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800929c:	4b12      	ldr	r3, [pc, #72]	; (80092e8 <prvCheckForValidListAndQueue+0x70>)
 800929e:	4a10      	ldr	r2, [pc, #64]	; (80092e0 <prvCheckForValidListAndQueue+0x68>)
 80092a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80092a2:	2300      	movs	r3, #0
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	4b11      	ldr	r3, [pc, #68]	; (80092ec <prvCheckForValidListAndQueue+0x74>)
 80092a8:	4a11      	ldr	r2, [pc, #68]	; (80092f0 <prvCheckForValidListAndQueue+0x78>)
 80092aa:	2110      	movs	r1, #16
 80092ac:	200a      	movs	r0, #10
 80092ae:	f7fd fe07 	bl	8006ec0 <xQueueGenericCreateStatic>
 80092b2:	4603      	mov	r3, r0
 80092b4:	4a08      	ldr	r2, [pc, #32]	; (80092d8 <prvCheckForValidListAndQueue+0x60>)
 80092b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80092b8:	4b07      	ldr	r3, [pc, #28]	; (80092d8 <prvCheckForValidListAndQueue+0x60>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80092c0:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <prvCheckForValidListAndQueue+0x60>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	490b      	ldr	r1, [pc, #44]	; (80092f4 <prvCheckForValidListAndQueue+0x7c>)
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fc34 	bl	8007b34 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80092cc:	f000 f972 	bl	80095b4 <vPortExitCritical>
}
 80092d0:	bf00      	nop
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop
 80092d8:	2000160c 	.word	0x2000160c
 80092dc:	200015dc 	.word	0x200015dc
 80092e0:	200015f0 	.word	0x200015f0
 80092e4:	20001604 	.word	0x20001604
 80092e8:	20001608 	.word	0x20001608
 80092ec:	200016b8 	.word	0x200016b8
 80092f0:	20001618 	.word	0x20001618
 80092f4:	0800a7c0 	.word	0x0800a7c0

080092f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3b04      	subs	r3, #4
 8009308:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3b04      	subs	r3, #4
 8009316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f023 0201 	bic.w	r2, r3, #1
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3b04      	subs	r3, #4
 8009326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009328:	4a0c      	ldr	r2, [pc, #48]	; (800935c <pxPortInitialiseStack+0x64>)
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	3b14      	subs	r3, #20
 8009332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3b04      	subs	r3, #4
 800933e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f06f 0202 	mvn.w	r2, #2
 8009346:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	3b20      	subs	r3, #32
 800934c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800934e:	68fb      	ldr	r3, [r7, #12]
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr
 800935c:	08009361 	.word	0x08009361

08009360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800936a:	4b12      	ldr	r3, [pc, #72]	; (80093b4 <prvTaskExitError+0x54>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d00a      	beq.n	800938a <prvTaskExitError+0x2a>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <prvTaskExitError+0x28>
	__asm volatile
 800938a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938e:	f383 8811 	msr	BASEPRI, r3
 8009392:	f3bf 8f6f 	isb	sy
 8009396:	f3bf 8f4f 	dsb	sy
 800939a:	60bb      	str	r3, [r7, #8]
}
 800939c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800939e:	bf00      	nop
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d0fc      	beq.n	80093a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr
 80093b4:	20000014 	.word	0x20000014
	...

080093c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80093c0:	4b07      	ldr	r3, [pc, #28]	; (80093e0 <pxCurrentTCBConst2>)
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	6808      	ldr	r0, [r1, #0]
 80093c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093ca:	f380 8809 	msr	PSP, r0
 80093ce:	f3bf 8f6f 	isb	sy
 80093d2:	f04f 0000 	mov.w	r0, #0
 80093d6:	f380 8811 	msr	BASEPRI, r0
 80093da:	4770      	bx	lr
 80093dc:	f3af 8000 	nop.w

080093e0 <pxCurrentTCBConst2>:
 80093e0:	200010dc 	.word	0x200010dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093e4:	bf00      	nop
 80093e6:	bf00      	nop

080093e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093e8:	4808      	ldr	r0, [pc, #32]	; (800940c <prvPortStartFirstTask+0x24>)
 80093ea:	6800      	ldr	r0, [r0, #0]
 80093ec:	6800      	ldr	r0, [r0, #0]
 80093ee:	f380 8808 	msr	MSP, r0
 80093f2:	f04f 0000 	mov.w	r0, #0
 80093f6:	f380 8814 	msr	CONTROL, r0
 80093fa:	b662      	cpsie	i
 80093fc:	b661      	cpsie	f
 80093fe:	f3bf 8f4f 	dsb	sy
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	df00      	svc	0
 8009408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800940a:	bf00      	nop
 800940c:	e000ed08 	.word	0xe000ed08

08009410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b086      	sub	sp, #24
 8009414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009416:	4b46      	ldr	r3, [pc, #280]	; (8009530 <xPortStartScheduler+0x120>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a46      	ldr	r2, [pc, #280]	; (8009534 <xPortStartScheduler+0x124>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10a      	bne.n	8009436 <xPortStartScheduler+0x26>
	__asm volatile
 8009420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	613b      	str	r3, [r7, #16]
}
 8009432:	bf00      	nop
 8009434:	e7fe      	b.n	8009434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009436:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <xPortStartScheduler+0x120>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a3f      	ldr	r2, [pc, #252]	; (8009538 <xPortStartScheduler+0x128>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d10a      	bne.n	8009456 <xPortStartScheduler+0x46>
	__asm volatile
 8009440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009444:	f383 8811 	msr	BASEPRI, r3
 8009448:	f3bf 8f6f 	isb	sy
 800944c:	f3bf 8f4f 	dsb	sy
 8009450:	60fb      	str	r3, [r7, #12]
}
 8009452:	bf00      	nop
 8009454:	e7fe      	b.n	8009454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009456:	4b39      	ldr	r3, [pc, #228]	; (800953c <xPortStartScheduler+0x12c>)
 8009458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	b2db      	uxtb	r3, r3
 8009460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	b2db      	uxtb	r3, r3
 800946e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	b2db      	uxtb	r3, r3
 8009474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009478:	b2da      	uxtb	r2, r3
 800947a:	4b31      	ldr	r3, [pc, #196]	; (8009540 <xPortStartScheduler+0x130>)
 800947c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800947e:	4b31      	ldr	r3, [pc, #196]	; (8009544 <xPortStartScheduler+0x134>)
 8009480:	2207      	movs	r2, #7
 8009482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009484:	e009      	b.n	800949a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009486:	4b2f      	ldr	r3, [pc, #188]	; (8009544 <xPortStartScheduler+0x134>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3b01      	subs	r3, #1
 800948c:	4a2d      	ldr	r2, [pc, #180]	; (8009544 <xPortStartScheduler+0x134>)
 800948e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009490:	78fb      	ldrb	r3, [r7, #3]
 8009492:	b2db      	uxtb	r3, r3
 8009494:	005b      	lsls	r3, r3, #1
 8009496:	b2db      	uxtb	r3, r3
 8009498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	b2db      	uxtb	r3, r3
 800949e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094a2:	2b80      	cmp	r3, #128	; 0x80
 80094a4:	d0ef      	beq.n	8009486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80094a6:	4b27      	ldr	r3, [pc, #156]	; (8009544 <xPortStartScheduler+0x134>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	f1c3 0307 	rsb	r3, r3, #7
 80094ae:	2b04      	cmp	r3, #4
 80094b0:	d00a      	beq.n	80094c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	60bb      	str	r3, [r7, #8]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80094c8:	4b1e      	ldr	r3, [pc, #120]	; (8009544 <xPortStartScheduler+0x134>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	021b      	lsls	r3, r3, #8
 80094ce:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <xPortStartScheduler+0x134>)
 80094d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <xPortStartScheduler+0x134>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <xPortStartScheduler+0x134>)
 80094dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <xPortStartScheduler+0x138>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4a17      	ldr	r2, [pc, #92]	; (8009548 <xPortStartScheduler+0x138>)
 80094ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80094f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094f2:	4b15      	ldr	r3, [pc, #84]	; (8009548 <xPortStartScheduler+0x138>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a14      	ldr	r2, [pc, #80]	; (8009548 <xPortStartScheduler+0x138>)
 80094f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80094fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094fe:	f000 f8dd 	bl	80096bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009502:	4b12      	ldr	r3, [pc, #72]	; (800954c <xPortStartScheduler+0x13c>)
 8009504:	2200      	movs	r2, #0
 8009506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009508:	f000 f8fc 	bl	8009704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <xPortStartScheduler+0x140>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a0f      	ldr	r2, [pc, #60]	; (8009550 <xPortStartScheduler+0x140>)
 8009512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009518:	f7ff ff66 	bl	80093e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800951c:	f7fe ff3a 	bl	8008394 <vTaskSwitchContext>
	prvTaskExitError();
 8009520:	f7ff ff1e 	bl	8009360 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed00 	.word	0xe000ed00
 8009534:	410fc271 	.word	0x410fc271
 8009538:	410fc270 	.word	0x410fc270
 800953c:	e000e400 	.word	0xe000e400
 8009540:	20001708 	.word	0x20001708
 8009544:	2000170c 	.word	0x2000170c
 8009548:	e000ed20 	.word	0xe000ed20
 800954c:	20000014 	.word	0x20000014
 8009550:	e000ef34 	.word	0xe000ef34

08009554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
	__asm volatile
 800955a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800955e:	f383 8811 	msr	BASEPRI, r3
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	f3bf 8f4f 	dsb	sy
 800956a:	607b      	str	r3, [r7, #4]
}
 800956c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800956e:	4b0f      	ldr	r3, [pc, #60]	; (80095ac <vPortEnterCritical+0x58>)
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	3301      	adds	r3, #1
 8009574:	4a0d      	ldr	r2, [pc, #52]	; (80095ac <vPortEnterCritical+0x58>)
 8009576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009578:	4b0c      	ldr	r3, [pc, #48]	; (80095ac <vPortEnterCritical+0x58>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d10f      	bne.n	80095a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009580:	4b0b      	ldr	r3, [pc, #44]	; (80095b0 <vPortEnterCritical+0x5c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	b2db      	uxtb	r3, r3
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00a      	beq.n	80095a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800958a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800958e:	f383 8811 	msr	BASEPRI, r3
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	f3bf 8f4f 	dsb	sy
 800959a:	603b      	str	r3, [r7, #0]
}
 800959c:	bf00      	nop
 800959e:	e7fe      	b.n	800959e <vPortEnterCritical+0x4a>
	}
}
 80095a0:	bf00      	nop
 80095a2:	370c      	adds	r7, #12
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr
 80095ac:	20000014 	.word	0x20000014
 80095b0:	e000ed04 	.word	0xe000ed04

080095b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80095b4:	b480      	push	{r7}
 80095b6:	b083      	sub	sp, #12
 80095b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80095ba:	4b12      	ldr	r3, [pc, #72]	; (8009604 <vPortExitCritical+0x50>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d10a      	bne.n	80095d8 <vPortExitCritical+0x24>
	__asm volatile
 80095c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c6:	f383 8811 	msr	BASEPRI, r3
 80095ca:	f3bf 8f6f 	isb	sy
 80095ce:	f3bf 8f4f 	dsb	sy
 80095d2:	607b      	str	r3, [r7, #4]
}
 80095d4:	bf00      	nop
 80095d6:	e7fe      	b.n	80095d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095d8:	4b0a      	ldr	r3, [pc, #40]	; (8009604 <vPortExitCritical+0x50>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	3b01      	subs	r3, #1
 80095de:	4a09      	ldr	r2, [pc, #36]	; (8009604 <vPortExitCritical+0x50>)
 80095e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095e2:	4b08      	ldr	r3, [pc, #32]	; (8009604 <vPortExitCritical+0x50>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <vPortExitCritical+0x42>
 80095ea:	2300      	movs	r3, #0
 80095ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	f383 8811 	msr	BASEPRI, r3
}
 80095f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095f6:	bf00      	nop
 80095f8:	370c      	adds	r7, #12
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20000014 	.word	0x20000014
	...

08009610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009610:	f3ef 8009 	mrs	r0, PSP
 8009614:	f3bf 8f6f 	isb	sy
 8009618:	4b15      	ldr	r3, [pc, #84]	; (8009670 <pxCurrentTCBConst>)
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	f01e 0f10 	tst.w	lr, #16
 8009620:	bf08      	it	eq
 8009622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800962a:	6010      	str	r0, [r2, #0]
 800962c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009634:	f380 8811 	msr	BASEPRI, r0
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	f3bf 8f6f 	isb	sy
 8009640:	f7fe fea8 	bl	8008394 <vTaskSwitchContext>
 8009644:	f04f 0000 	mov.w	r0, #0
 8009648:	f380 8811 	msr	BASEPRI, r0
 800964c:	bc09      	pop	{r0, r3}
 800964e:	6819      	ldr	r1, [r3, #0]
 8009650:	6808      	ldr	r0, [r1, #0]
 8009652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009656:	f01e 0f10 	tst.w	lr, #16
 800965a:	bf08      	it	eq
 800965c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009660:	f380 8809 	msr	PSP, r0
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	f3af 8000 	nop.w

08009670 <pxCurrentTCBConst>:
 8009670:	200010dc 	.word	0x200010dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009674:	bf00      	nop
 8009676:	bf00      	nop

08009678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	607b      	str	r3, [r7, #4]
}
 8009690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009692:	f7fe fdc5 	bl	8008220 <xTaskIncrementTick>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d003      	beq.n	80096a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800969c:	4b06      	ldr	r3, [pc, #24]	; (80096b8 <xPortSysTickHandler+0x40>)
 800969e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	2300      	movs	r3, #0
 80096a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	f383 8811 	msr	BASEPRI, r3
}
 80096ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	e000ed04 	.word	0xe000ed04

080096bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80096bc:	b480      	push	{r7}
 80096be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80096c0:	4b0b      	ldr	r3, [pc, #44]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096c2:	2200      	movs	r2, #0
 80096c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80096c6:	4b0b      	ldr	r3, [pc, #44]	; (80096f4 <vPortSetupTimerInterrupt+0x38>)
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80096cc:	4b0a      	ldr	r3, [pc, #40]	; (80096f8 <vPortSetupTimerInterrupt+0x3c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a0a      	ldr	r2, [pc, #40]	; (80096fc <vPortSetupTimerInterrupt+0x40>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	099b      	lsrs	r3, r3, #6
 80096d8:	4a09      	ldr	r2, [pc, #36]	; (8009700 <vPortSetupTimerInterrupt+0x44>)
 80096da:	3b01      	subs	r3, #1
 80096dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096de:	4b04      	ldr	r3, [pc, #16]	; (80096f0 <vPortSetupTimerInterrupt+0x34>)
 80096e0:	2207      	movs	r2, #7
 80096e2:	601a      	str	r2, [r3, #0]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	e000e010 	.word	0xe000e010
 80096f4:	e000e018 	.word	0xe000e018
 80096f8:	20000008 	.word	0x20000008
 80096fc:	10624dd3 	.word	0x10624dd3
 8009700:	e000e014 	.word	0xe000e014

08009704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009714 <vPortEnableVFP+0x10>
 8009708:	6801      	ldr	r1, [r0, #0]
 800970a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800970e:	6001      	str	r1, [r0, #0]
 8009710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009712:	bf00      	nop
 8009714:	e000ed88 	.word	0xe000ed88

08009718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009718:	b480      	push	{r7}
 800971a:	b085      	sub	sp, #20
 800971c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800971e:	f3ef 8305 	mrs	r3, IPSR
 8009722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2b0f      	cmp	r3, #15
 8009728:	d914      	bls.n	8009754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800972a:	4a17      	ldr	r2, [pc, #92]	; (8009788 <vPortValidateInterruptPriority+0x70>)
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	4413      	add	r3, r2
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009734:	4b15      	ldr	r3, [pc, #84]	; (800978c <vPortValidateInterruptPriority+0x74>)
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	7afa      	ldrb	r2, [r7, #11]
 800973a:	429a      	cmp	r2, r3
 800973c:	d20a      	bcs.n	8009754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	607b      	str	r3, [r7, #4]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009754:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <vPortValidateInterruptPriority+0x78>)
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800975c:	4b0d      	ldr	r3, [pc, #52]	; (8009794 <vPortValidateInterruptPriority+0x7c>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d90a      	bls.n	800977a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	603b      	str	r3, [r7, #0]
}
 8009776:	bf00      	nop
 8009778:	e7fe      	b.n	8009778 <vPortValidateInterruptPriority+0x60>
	}
 800977a:	bf00      	nop
 800977c:	3714      	adds	r7, #20
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	e000e3f0 	.word	0xe000e3f0
 800978c:	20001708 	.word	0x20001708
 8009790:	e000ed0c 	.word	0xe000ed0c
 8009794:	2000170c 	.word	0x2000170c

08009798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b08a      	sub	sp, #40	; 0x28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80097a0:	2300      	movs	r3, #0
 80097a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80097a4:	f7fe fc80 	bl	80080a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80097a8:	4b5b      	ldr	r3, [pc, #364]	; (8009918 <pvPortMalloc+0x180>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d101      	bne.n	80097b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80097b0:	f000 f920 	bl	80099f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80097b4:	4b59      	ldr	r3, [pc, #356]	; (800991c <pvPortMalloc+0x184>)
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4013      	ands	r3, r2
 80097bc:	2b00      	cmp	r3, #0
 80097be:	f040 8093 	bne.w	80098e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01d      	beq.n	8009804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80097c8:	2208      	movs	r2, #8
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4413      	add	r3, r2
 80097ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f003 0307 	and.w	r3, r3, #7
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d014      	beq.n	8009804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f023 0307 	bic.w	r3, r3, #7
 80097e0:	3308      	adds	r3, #8
 80097e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f003 0307 	and.w	r3, r3, #7
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d00a      	beq.n	8009804 <pvPortMalloc+0x6c>
	__asm volatile
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	617b      	str	r3, [r7, #20]
}
 8009800:	bf00      	nop
 8009802:	e7fe      	b.n	8009802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d06e      	beq.n	80098e8 <pvPortMalloc+0x150>
 800980a:	4b45      	ldr	r3, [pc, #276]	; (8009920 <pvPortMalloc+0x188>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	687a      	ldr	r2, [r7, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d869      	bhi.n	80098e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009814:	4b43      	ldr	r3, [pc, #268]	; (8009924 <pvPortMalloc+0x18c>)
 8009816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009818:	4b42      	ldr	r3, [pc, #264]	; (8009924 <pvPortMalloc+0x18c>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800981e:	e004      	b.n	800982a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	429a      	cmp	r2, r3
 8009832:	d903      	bls.n	800983c <pvPortMalloc+0xa4>
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1f1      	bne.n	8009820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800983c:	4b36      	ldr	r3, [pc, #216]	; (8009918 <pvPortMalloc+0x180>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009842:	429a      	cmp	r2, r3
 8009844:	d050      	beq.n	80098e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	2208      	movs	r2, #8
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	6a3b      	ldr	r3, [r7, #32]
 8009856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	1ad2      	subs	r2, r2, r3
 8009860:	2308      	movs	r3, #8
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	429a      	cmp	r2, r3
 8009866:	d91f      	bls.n	80098a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4413      	add	r3, r2
 800986e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	f003 0307 	and.w	r3, r3, #7
 8009876:	2b00      	cmp	r3, #0
 8009878:	d00a      	beq.n	8009890 <pvPortMalloc+0xf8>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	613b      	str	r3, [r7, #16]
}
 800988c:	bf00      	nop
 800988e:	e7fe      	b.n	800988e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	1ad2      	subs	r2, r2, r3
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80098a2:	69b8      	ldr	r0, [r7, #24]
 80098a4:	f000 f908 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80098a8:	4b1d      	ldr	r3, [pc, #116]	; (8009920 <pvPortMalloc+0x188>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <pvPortMalloc+0x188>)
 80098b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80098b6:	4b1a      	ldr	r3, [pc, #104]	; (8009920 <pvPortMalloc+0x188>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b1b      	ldr	r3, [pc, #108]	; (8009928 <pvPortMalloc+0x190>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d203      	bcs.n	80098ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80098c2:	4b17      	ldr	r3, [pc, #92]	; (8009920 <pvPortMalloc+0x188>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a18      	ldr	r2, [pc, #96]	; (8009928 <pvPortMalloc+0x190>)
 80098c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098cc:	685a      	ldr	r2, [r3, #4]
 80098ce:	4b13      	ldr	r3, [pc, #76]	; (800991c <pvPortMalloc+0x184>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	431a      	orrs	r2, r3
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098de:	4b13      	ldr	r3, [pc, #76]	; (800992c <pvPortMalloc+0x194>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3301      	adds	r3, #1
 80098e4:	4a11      	ldr	r2, [pc, #68]	; (800992c <pvPortMalloc+0x194>)
 80098e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098e8:	f7fe fbec 	bl	80080c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00a      	beq.n	800990c <pvPortMalloc+0x174>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	60fb      	str	r3, [r7, #12]
}
 8009908:	bf00      	nop
 800990a:	e7fe      	b.n	800990a <pvPortMalloc+0x172>
	return pvReturn;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3728      	adds	r7, #40	; 0x28
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	20005318 	.word	0x20005318
 800991c:	2000532c 	.word	0x2000532c
 8009920:	2000531c 	.word	0x2000531c
 8009924:	20005310 	.word	0x20005310
 8009928:	20005320 	.word	0x20005320
 800992c:	20005324 	.word	0x20005324

08009930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d04d      	beq.n	80099de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009942:	2308      	movs	r3, #8
 8009944:	425b      	negs	r3, r3
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4413      	add	r3, r2
 800994a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	685a      	ldr	r2, [r3, #4]
 8009954:	4b24      	ldr	r3, [pc, #144]	; (80099e8 <vPortFree+0xb8>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4013      	ands	r3, r2
 800995a:	2b00      	cmp	r3, #0
 800995c:	d10a      	bne.n	8009974 <vPortFree+0x44>
	__asm volatile
 800995e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009962:	f383 8811 	msr	BASEPRI, r3
 8009966:	f3bf 8f6f 	isb	sy
 800996a:	f3bf 8f4f 	dsb	sy
 800996e:	60fb      	str	r3, [r7, #12]
}
 8009970:	bf00      	nop
 8009972:	e7fe      	b.n	8009972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d00a      	beq.n	8009992 <vPortFree+0x62>
	__asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
}
 800998e:	bf00      	nop
 8009990:	e7fe      	b.n	8009990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	685a      	ldr	r2, [r3, #4]
 8009996:	4b14      	ldr	r3, [pc, #80]	; (80099e8 <vPortFree+0xb8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4013      	ands	r3, r2
 800999c:	2b00      	cmp	r3, #0
 800999e:	d01e      	beq.n	80099de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80099a0:	693b      	ldr	r3, [r7, #16]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d11a      	bne.n	80099de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	685a      	ldr	r2, [r3, #4]
 80099ac:	4b0e      	ldr	r3, [pc, #56]	; (80099e8 <vPortFree+0xb8>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	43db      	mvns	r3, r3
 80099b2:	401a      	ands	r2, r3
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80099b8:	f7fe fb76 	bl	80080a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	685a      	ldr	r2, [r3, #4]
 80099c0:	4b0a      	ldr	r3, [pc, #40]	; (80099ec <vPortFree+0xbc>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4413      	add	r3, r2
 80099c6:	4a09      	ldr	r2, [pc, #36]	; (80099ec <vPortFree+0xbc>)
 80099c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f000 f874 	bl	8009ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099d0:	4b07      	ldr	r3, [pc, #28]	; (80099f0 <vPortFree+0xc0>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a06      	ldr	r2, [pc, #24]	; (80099f0 <vPortFree+0xc0>)
 80099d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099da:	f7fe fb73 	bl	80080c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099de:	bf00      	nop
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	2000532c 	.word	0x2000532c
 80099ec:	2000531c 	.word	0x2000531c
 80099f0:	20005328 	.word	0x20005328

080099f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80099fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009a00:	4b27      	ldr	r3, [pc, #156]	; (8009aa0 <prvHeapInit+0xac>)
 8009a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f003 0307 	and.w	r3, r3, #7
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3307      	adds	r3, #7
 8009a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f023 0307 	bic.w	r3, r3, #7
 8009a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1ad3      	subs	r3, r2, r3
 8009a22:	4a1f      	ldr	r2, [pc, #124]	; (8009aa0 <prvHeapInit+0xac>)
 8009a24:	4413      	add	r3, r2
 8009a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a2c:	4a1d      	ldr	r2, [pc, #116]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a32:	4b1c      	ldr	r3, [pc, #112]	; (8009aa4 <prvHeapInit+0xb0>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a40:	2208      	movs	r2, #8
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	1a9b      	subs	r3, r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f023 0307 	bic.w	r3, r3, #7
 8009a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a56:	4b14      	ldr	r3, [pc, #80]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a5e:	4b12      	ldr	r3, [pc, #72]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	68fa      	ldr	r2, [r7, #12]
 8009a6e:	1ad2      	subs	r2, r2, r3
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a74:	4b0c      	ldr	r3, [pc, #48]	; (8009aa8 <prvHeapInit+0xb4>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	4a0a      	ldr	r2, [pc, #40]	; (8009aac <prvHeapInit+0xb8>)
 8009a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	4a09      	ldr	r2, [pc, #36]	; (8009ab0 <prvHeapInit+0xbc>)
 8009a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a8c:	4b09      	ldr	r3, [pc, #36]	; (8009ab4 <prvHeapInit+0xc0>)
 8009a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a92:	601a      	str	r2, [r3, #0]
}
 8009a94:	bf00      	nop
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	20001710 	.word	0x20001710
 8009aa4:	20005310 	.word	0x20005310
 8009aa8:	20005318 	.word	0x20005318
 8009aac:	20005320 	.word	0x20005320
 8009ab0:	2000531c 	.word	0x2000531c
 8009ab4:	2000532c 	.word	0x2000532c

08009ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009ac0:	4b28      	ldr	r3, [pc, #160]	; (8009b64 <prvInsertBlockIntoFreeList+0xac>)
 8009ac2:	60fb      	str	r3, [r7, #12]
 8009ac4:	e002      	b.n	8009acc <prvInsertBlockIntoFreeList+0x14>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	60fb      	str	r3, [r7, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d8f7      	bhi.n	8009ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d108      	bne.n	8009afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	441a      	add	r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	685b      	ldr	r3, [r3, #4]
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	441a      	add	r2, r3
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	d118      	bne.n	8009b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	4b15      	ldr	r3, [pc, #84]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d00d      	beq.n	8009b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	441a      	add	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	e008      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b36:	4b0c      	ldr	r3, [pc, #48]	; (8009b68 <prvInsertBlockIntoFreeList+0xb0>)
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	601a      	str	r2, [r3, #0]
 8009b3e:	e003      	b.n	8009b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d002      	beq.n	8009b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b56:	bf00      	nop
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	20005310 	.word	0x20005310
 8009b68:	20005318 	.word	0x20005318

08009b6c <__errno>:
 8009b6c:	4b01      	ldr	r3, [pc, #4]	; (8009b74 <__errno+0x8>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000018 	.word	0x20000018

08009b78 <std>:
 8009b78:	2300      	movs	r3, #0
 8009b7a:	b510      	push	{r4, lr}
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b86:	6083      	str	r3, [r0, #8]
 8009b88:	8181      	strh	r1, [r0, #12]
 8009b8a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b8c:	81c2      	strh	r2, [r0, #14]
 8009b8e:	6183      	str	r3, [r0, #24]
 8009b90:	4619      	mov	r1, r3
 8009b92:	2208      	movs	r2, #8
 8009b94:	305c      	adds	r0, #92	; 0x5c
 8009b96:	f000 f91a 	bl	8009dce <memset>
 8009b9a:	4b05      	ldr	r3, [pc, #20]	; (8009bb0 <std+0x38>)
 8009b9c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b9e:	4b05      	ldr	r3, [pc, #20]	; (8009bb4 <std+0x3c>)
 8009ba0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ba2:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <std+0x40>)
 8009ba4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ba6:	4b05      	ldr	r3, [pc, #20]	; (8009bbc <std+0x44>)
 8009ba8:	6224      	str	r4, [r4, #32]
 8009baa:	6323      	str	r3, [r4, #48]	; 0x30
 8009bac:	bd10      	pop	{r4, pc}
 8009bae:	bf00      	nop
 8009bb0:	0800a0e9 	.word	0x0800a0e9
 8009bb4:	0800a10b 	.word	0x0800a10b
 8009bb8:	0800a143 	.word	0x0800a143
 8009bbc:	0800a167 	.word	0x0800a167

08009bc0 <_cleanup_r>:
 8009bc0:	4901      	ldr	r1, [pc, #4]	; (8009bc8 <_cleanup_r+0x8>)
 8009bc2:	f000 b8af 	b.w	8009d24 <_fwalk_reent>
 8009bc6:	bf00      	nop
 8009bc8:	0800a441 	.word	0x0800a441

08009bcc <__sfmoreglue>:
 8009bcc:	b570      	push	{r4, r5, r6, lr}
 8009bce:	2268      	movs	r2, #104	; 0x68
 8009bd0:	1e4d      	subs	r5, r1, #1
 8009bd2:	4355      	muls	r5, r2
 8009bd4:	460e      	mov	r6, r1
 8009bd6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009bda:	f000 f921 	bl	8009e20 <_malloc_r>
 8009bde:	4604      	mov	r4, r0
 8009be0:	b140      	cbz	r0, 8009bf4 <__sfmoreglue+0x28>
 8009be2:	2100      	movs	r1, #0
 8009be4:	e9c0 1600 	strd	r1, r6, [r0]
 8009be8:	300c      	adds	r0, #12
 8009bea:	60a0      	str	r0, [r4, #8]
 8009bec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009bf0:	f000 f8ed 	bl	8009dce <memset>
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}

08009bf8 <__sfp_lock_acquire>:
 8009bf8:	4801      	ldr	r0, [pc, #4]	; (8009c00 <__sfp_lock_acquire+0x8>)
 8009bfa:	f000 b8d8 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009bfe:	bf00      	nop
 8009c00:	20005331 	.word	0x20005331

08009c04 <__sfp_lock_release>:
 8009c04:	4801      	ldr	r0, [pc, #4]	; (8009c0c <__sfp_lock_release+0x8>)
 8009c06:	f000 b8d3 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c0a:	bf00      	nop
 8009c0c:	20005331 	.word	0x20005331

08009c10 <__sinit_lock_acquire>:
 8009c10:	4801      	ldr	r0, [pc, #4]	; (8009c18 <__sinit_lock_acquire+0x8>)
 8009c12:	f000 b8cc 	b.w	8009dae <__retarget_lock_acquire_recursive>
 8009c16:	bf00      	nop
 8009c18:	20005332 	.word	0x20005332

08009c1c <__sinit_lock_release>:
 8009c1c:	4801      	ldr	r0, [pc, #4]	; (8009c24 <__sinit_lock_release+0x8>)
 8009c1e:	f000 b8c7 	b.w	8009db0 <__retarget_lock_release_recursive>
 8009c22:	bf00      	nop
 8009c24:	20005332 	.word	0x20005332

08009c28 <__sinit>:
 8009c28:	b510      	push	{r4, lr}
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	f7ff fff0 	bl	8009c10 <__sinit_lock_acquire>
 8009c30:	69a3      	ldr	r3, [r4, #24]
 8009c32:	b11b      	cbz	r3, 8009c3c <__sinit+0x14>
 8009c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c38:	f7ff bff0 	b.w	8009c1c <__sinit_lock_release>
 8009c3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009c40:	6523      	str	r3, [r4, #80]	; 0x50
 8009c42:	4b13      	ldr	r3, [pc, #76]	; (8009c90 <__sinit+0x68>)
 8009c44:	4a13      	ldr	r2, [pc, #76]	; (8009c94 <__sinit+0x6c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	62a2      	str	r2, [r4, #40]	; 0x28
 8009c4a:	42a3      	cmp	r3, r4
 8009c4c:	bf04      	itt	eq
 8009c4e:	2301      	moveq	r3, #1
 8009c50:	61a3      	streq	r3, [r4, #24]
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 f820 	bl	8009c98 <__sfp>
 8009c58:	6060      	str	r0, [r4, #4]
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f000 f81c 	bl	8009c98 <__sfp>
 8009c60:	60a0      	str	r0, [r4, #8]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f000 f818 	bl	8009c98 <__sfp>
 8009c68:	2200      	movs	r2, #0
 8009c6a:	60e0      	str	r0, [r4, #12]
 8009c6c:	2104      	movs	r1, #4
 8009c6e:	6860      	ldr	r0, [r4, #4]
 8009c70:	f7ff ff82 	bl	8009b78 <std>
 8009c74:	68a0      	ldr	r0, [r4, #8]
 8009c76:	2201      	movs	r2, #1
 8009c78:	2109      	movs	r1, #9
 8009c7a:	f7ff ff7d 	bl	8009b78 <std>
 8009c7e:	68e0      	ldr	r0, [r4, #12]
 8009c80:	2202      	movs	r2, #2
 8009c82:	2112      	movs	r1, #18
 8009c84:	f7ff ff78 	bl	8009b78 <std>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	61a3      	str	r3, [r4, #24]
 8009c8c:	e7d2      	b.n	8009c34 <__sinit+0xc>
 8009c8e:	bf00      	nop
 8009c90:	0800a8e0 	.word	0x0800a8e0
 8009c94:	08009bc1 	.word	0x08009bc1

08009c98 <__sfp>:
 8009c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c9a:	4607      	mov	r7, r0
 8009c9c:	f7ff ffac 	bl	8009bf8 <__sfp_lock_acquire>
 8009ca0:	4b1e      	ldr	r3, [pc, #120]	; (8009d1c <__sfp+0x84>)
 8009ca2:	681e      	ldr	r6, [r3, #0]
 8009ca4:	69b3      	ldr	r3, [r6, #24]
 8009ca6:	b913      	cbnz	r3, 8009cae <__sfp+0x16>
 8009ca8:	4630      	mov	r0, r6
 8009caa:	f7ff ffbd 	bl	8009c28 <__sinit>
 8009cae:	3648      	adds	r6, #72	; 0x48
 8009cb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	d503      	bpl.n	8009cc0 <__sfp+0x28>
 8009cb8:	6833      	ldr	r3, [r6, #0]
 8009cba:	b30b      	cbz	r3, 8009d00 <__sfp+0x68>
 8009cbc:	6836      	ldr	r6, [r6, #0]
 8009cbe:	e7f7      	b.n	8009cb0 <__sfp+0x18>
 8009cc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009cc4:	b9d5      	cbnz	r5, 8009cfc <__sfp+0x64>
 8009cc6:	4b16      	ldr	r3, [pc, #88]	; (8009d20 <__sfp+0x88>)
 8009cc8:	60e3      	str	r3, [r4, #12]
 8009cca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009cce:	6665      	str	r5, [r4, #100]	; 0x64
 8009cd0:	f000 f86c 	bl	8009dac <__retarget_lock_init_recursive>
 8009cd4:	f7ff ff96 	bl	8009c04 <__sfp_lock_release>
 8009cd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009cdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ce0:	6025      	str	r5, [r4, #0]
 8009ce2:	61a5      	str	r5, [r4, #24]
 8009ce4:	2208      	movs	r2, #8
 8009ce6:	4629      	mov	r1, r5
 8009ce8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009cec:	f000 f86f 	bl	8009dce <memset>
 8009cf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009cf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cfc:	3468      	adds	r4, #104	; 0x68
 8009cfe:	e7d9      	b.n	8009cb4 <__sfp+0x1c>
 8009d00:	2104      	movs	r1, #4
 8009d02:	4638      	mov	r0, r7
 8009d04:	f7ff ff62 	bl	8009bcc <__sfmoreglue>
 8009d08:	4604      	mov	r4, r0
 8009d0a:	6030      	str	r0, [r6, #0]
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d1d5      	bne.n	8009cbc <__sfp+0x24>
 8009d10:	f7ff ff78 	bl	8009c04 <__sfp_lock_release>
 8009d14:	230c      	movs	r3, #12
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	e7ee      	b.n	8009cf8 <__sfp+0x60>
 8009d1a:	bf00      	nop
 8009d1c:	0800a8e0 	.word	0x0800a8e0
 8009d20:	ffff0001 	.word	0xffff0001

08009d24 <_fwalk_reent>:
 8009d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d28:	4606      	mov	r6, r0
 8009d2a:	4688      	mov	r8, r1
 8009d2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009d30:	2700      	movs	r7, #0
 8009d32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d36:	f1b9 0901 	subs.w	r9, r9, #1
 8009d3a:	d505      	bpl.n	8009d48 <_fwalk_reent+0x24>
 8009d3c:	6824      	ldr	r4, [r4, #0]
 8009d3e:	2c00      	cmp	r4, #0
 8009d40:	d1f7      	bne.n	8009d32 <_fwalk_reent+0xe>
 8009d42:	4638      	mov	r0, r7
 8009d44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d48:	89ab      	ldrh	r3, [r5, #12]
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d907      	bls.n	8009d5e <_fwalk_reent+0x3a>
 8009d4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d52:	3301      	adds	r3, #1
 8009d54:	d003      	beq.n	8009d5e <_fwalk_reent+0x3a>
 8009d56:	4629      	mov	r1, r5
 8009d58:	4630      	mov	r0, r6
 8009d5a:	47c0      	blx	r8
 8009d5c:	4307      	orrs	r7, r0
 8009d5e:	3568      	adds	r5, #104	; 0x68
 8009d60:	e7e9      	b.n	8009d36 <_fwalk_reent+0x12>
	...

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4d0d      	ldr	r5, [pc, #52]	; (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	; (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2600      	movs	r6, #0
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4d0b      	ldr	r5, [pc, #44]	; (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	; (8009da8 <__libc_init_array+0x44>)
 8009d78:	f000 fca2 	bl	800a6c0 <_init>
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2600      	movs	r6, #0
 8009d82:	42a6      	cmp	r6, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8c:	4798      	blx	r3
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d96:	4798      	blx	r3
 8009d98:	3601      	adds	r6, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	0800a8ec 	.word	0x0800a8ec
 8009da0:	0800a8ec 	.word	0x0800a8ec
 8009da4:	0800a8ec 	.word	0x0800a8ec
 8009da8:	0800a8f0 	.word	0x0800a8f0

08009dac <__retarget_lock_init_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_acquire_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <__retarget_lock_release_recursive>:
 8009db0:	4770      	bx	lr

08009db2 <memcpy>:
 8009db2:	440a      	add	r2, r1
 8009db4:	4291      	cmp	r1, r2
 8009db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dba:	d100      	bne.n	8009dbe <memcpy+0xc>
 8009dbc:	4770      	bx	lr
 8009dbe:	b510      	push	{r4, lr}
 8009dc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc8:	4291      	cmp	r1, r2
 8009dca:	d1f9      	bne.n	8009dc0 <memcpy+0xe>
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <memset>:
 8009dce:	4402      	add	r2, r0
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d100      	bne.n	8009dd8 <memset+0xa>
 8009dd6:	4770      	bx	lr
 8009dd8:	f803 1b01 	strb.w	r1, [r3], #1
 8009ddc:	e7f9      	b.n	8009dd2 <memset+0x4>
	...

08009de0 <sbrk_aligned>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	4e0e      	ldr	r6, [pc, #56]	; (8009e1c <sbrk_aligned+0x3c>)
 8009de4:	460c      	mov	r4, r1
 8009de6:	6831      	ldr	r1, [r6, #0]
 8009de8:	4605      	mov	r5, r0
 8009dea:	b911      	cbnz	r1, 8009df2 <sbrk_aligned+0x12>
 8009dec:	f000 f96c 	bl	800a0c8 <_sbrk_r>
 8009df0:	6030      	str	r0, [r6, #0]
 8009df2:	4621      	mov	r1, r4
 8009df4:	4628      	mov	r0, r5
 8009df6:	f000 f967 	bl	800a0c8 <_sbrk_r>
 8009dfa:	1c43      	adds	r3, r0, #1
 8009dfc:	d00a      	beq.n	8009e14 <sbrk_aligned+0x34>
 8009dfe:	1cc4      	adds	r4, r0, #3
 8009e00:	f024 0403 	bic.w	r4, r4, #3
 8009e04:	42a0      	cmp	r0, r4
 8009e06:	d007      	beq.n	8009e18 <sbrk_aligned+0x38>
 8009e08:	1a21      	subs	r1, r4, r0
 8009e0a:	4628      	mov	r0, r5
 8009e0c:	f000 f95c 	bl	800a0c8 <_sbrk_r>
 8009e10:	3001      	adds	r0, #1
 8009e12:	d101      	bne.n	8009e18 <sbrk_aligned+0x38>
 8009e14:	f04f 34ff 	mov.w	r4, #4294967295
 8009e18:	4620      	mov	r0, r4
 8009e1a:	bd70      	pop	{r4, r5, r6, pc}
 8009e1c:	20005338 	.word	0x20005338

08009e20 <_malloc_r>:
 8009e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e24:	1ccd      	adds	r5, r1, #3
 8009e26:	f025 0503 	bic.w	r5, r5, #3
 8009e2a:	3508      	adds	r5, #8
 8009e2c:	2d0c      	cmp	r5, #12
 8009e2e:	bf38      	it	cc
 8009e30:	250c      	movcc	r5, #12
 8009e32:	2d00      	cmp	r5, #0
 8009e34:	4607      	mov	r7, r0
 8009e36:	db01      	blt.n	8009e3c <_malloc_r+0x1c>
 8009e38:	42a9      	cmp	r1, r5
 8009e3a:	d905      	bls.n	8009e48 <_malloc_r+0x28>
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	2600      	movs	r6, #0
 8009e42:	4630      	mov	r0, r6
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	4e2e      	ldr	r6, [pc, #184]	; (8009f04 <_malloc_r+0xe4>)
 8009e4a:	f000 fbad 	bl	800a5a8 <__malloc_lock>
 8009e4e:	6833      	ldr	r3, [r6, #0]
 8009e50:	461c      	mov	r4, r3
 8009e52:	bb34      	cbnz	r4, 8009ea2 <_malloc_r+0x82>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4638      	mov	r0, r7
 8009e58:	f7ff ffc2 	bl	8009de0 <sbrk_aligned>
 8009e5c:	1c43      	adds	r3, r0, #1
 8009e5e:	4604      	mov	r4, r0
 8009e60:	d14d      	bne.n	8009efe <_malloc_r+0xde>
 8009e62:	6834      	ldr	r4, [r6, #0]
 8009e64:	4626      	mov	r6, r4
 8009e66:	2e00      	cmp	r6, #0
 8009e68:	d140      	bne.n	8009eec <_malloc_r+0xcc>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4638      	mov	r0, r7
 8009e70:	eb04 0803 	add.w	r8, r4, r3
 8009e74:	f000 f928 	bl	800a0c8 <_sbrk_r>
 8009e78:	4580      	cmp	r8, r0
 8009e7a:	d13a      	bne.n	8009ef2 <_malloc_r+0xd2>
 8009e7c:	6821      	ldr	r1, [r4, #0]
 8009e7e:	3503      	adds	r5, #3
 8009e80:	1a6d      	subs	r5, r5, r1
 8009e82:	f025 0503 	bic.w	r5, r5, #3
 8009e86:	3508      	adds	r5, #8
 8009e88:	2d0c      	cmp	r5, #12
 8009e8a:	bf38      	it	cc
 8009e8c:	250c      	movcc	r5, #12
 8009e8e:	4629      	mov	r1, r5
 8009e90:	4638      	mov	r0, r7
 8009e92:	f7ff ffa5 	bl	8009de0 <sbrk_aligned>
 8009e96:	3001      	adds	r0, #1
 8009e98:	d02b      	beq.n	8009ef2 <_malloc_r+0xd2>
 8009e9a:	6823      	ldr	r3, [r4, #0]
 8009e9c:	442b      	add	r3, r5
 8009e9e:	6023      	str	r3, [r4, #0]
 8009ea0:	e00e      	b.n	8009ec0 <_malloc_r+0xa0>
 8009ea2:	6822      	ldr	r2, [r4, #0]
 8009ea4:	1b52      	subs	r2, r2, r5
 8009ea6:	d41e      	bmi.n	8009ee6 <_malloc_r+0xc6>
 8009ea8:	2a0b      	cmp	r2, #11
 8009eaa:	d916      	bls.n	8009eda <_malloc_r+0xba>
 8009eac:	1961      	adds	r1, r4, r5
 8009eae:	42a3      	cmp	r3, r4
 8009eb0:	6025      	str	r5, [r4, #0]
 8009eb2:	bf18      	it	ne
 8009eb4:	6059      	strne	r1, [r3, #4]
 8009eb6:	6863      	ldr	r3, [r4, #4]
 8009eb8:	bf08      	it	eq
 8009eba:	6031      	streq	r1, [r6, #0]
 8009ebc:	5162      	str	r2, [r4, r5]
 8009ebe:	604b      	str	r3, [r1, #4]
 8009ec0:	4638      	mov	r0, r7
 8009ec2:	f104 060b 	add.w	r6, r4, #11
 8009ec6:	f000 fb75 	bl	800a5b4 <__malloc_unlock>
 8009eca:	f026 0607 	bic.w	r6, r6, #7
 8009ece:	1d23      	adds	r3, r4, #4
 8009ed0:	1af2      	subs	r2, r6, r3
 8009ed2:	d0b6      	beq.n	8009e42 <_malloc_r+0x22>
 8009ed4:	1b9b      	subs	r3, r3, r6
 8009ed6:	50a3      	str	r3, [r4, r2]
 8009ed8:	e7b3      	b.n	8009e42 <_malloc_r+0x22>
 8009eda:	6862      	ldr	r2, [r4, #4]
 8009edc:	42a3      	cmp	r3, r4
 8009ede:	bf0c      	ite	eq
 8009ee0:	6032      	streq	r2, [r6, #0]
 8009ee2:	605a      	strne	r2, [r3, #4]
 8009ee4:	e7ec      	b.n	8009ec0 <_malloc_r+0xa0>
 8009ee6:	4623      	mov	r3, r4
 8009ee8:	6864      	ldr	r4, [r4, #4]
 8009eea:	e7b2      	b.n	8009e52 <_malloc_r+0x32>
 8009eec:	4634      	mov	r4, r6
 8009eee:	6876      	ldr	r6, [r6, #4]
 8009ef0:	e7b9      	b.n	8009e66 <_malloc_r+0x46>
 8009ef2:	230c      	movs	r3, #12
 8009ef4:	603b      	str	r3, [r7, #0]
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	f000 fb5c 	bl	800a5b4 <__malloc_unlock>
 8009efc:	e7a1      	b.n	8009e42 <_malloc_r+0x22>
 8009efe:	6025      	str	r5, [r4, #0]
 8009f00:	e7de      	b.n	8009ec0 <_malloc_r+0xa0>
 8009f02:	bf00      	nop
 8009f04:	20005334 	.word	0x20005334

08009f08 <_puts_r>:
 8009f08:	b570      	push	{r4, r5, r6, lr}
 8009f0a:	460e      	mov	r6, r1
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	b118      	cbz	r0, 8009f18 <_puts_r+0x10>
 8009f10:	6983      	ldr	r3, [r0, #24]
 8009f12:	b90b      	cbnz	r3, 8009f18 <_puts_r+0x10>
 8009f14:	f7ff fe88 	bl	8009c28 <__sinit>
 8009f18:	69ab      	ldr	r3, [r5, #24]
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	b913      	cbnz	r3, 8009f24 <_puts_r+0x1c>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	f7ff fe82 	bl	8009c28 <__sinit>
 8009f24:	4b2c      	ldr	r3, [pc, #176]	; (8009fd8 <_puts_r+0xd0>)
 8009f26:	429c      	cmp	r4, r3
 8009f28:	d120      	bne.n	8009f6c <_puts_r+0x64>
 8009f2a:	686c      	ldr	r4, [r5, #4]
 8009f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f2e:	07db      	lsls	r3, r3, #31
 8009f30:	d405      	bmi.n	8009f3e <_puts_r+0x36>
 8009f32:	89a3      	ldrh	r3, [r4, #12]
 8009f34:	0598      	lsls	r0, r3, #22
 8009f36:	d402      	bmi.n	8009f3e <_puts_r+0x36>
 8009f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f3a:	f7ff ff38 	bl	8009dae <__retarget_lock_acquire_recursive>
 8009f3e:	89a3      	ldrh	r3, [r4, #12]
 8009f40:	0719      	lsls	r1, r3, #28
 8009f42:	d51d      	bpl.n	8009f80 <_puts_r+0x78>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	b1db      	cbz	r3, 8009f80 <_puts_r+0x78>
 8009f48:	3e01      	subs	r6, #1
 8009f4a:	68a3      	ldr	r3, [r4, #8]
 8009f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009f50:	3b01      	subs	r3, #1
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	bb39      	cbnz	r1, 8009fa6 <_puts_r+0x9e>
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	da38      	bge.n	8009fcc <_puts_r+0xc4>
 8009f5a:	4622      	mov	r2, r4
 8009f5c:	210a      	movs	r1, #10
 8009f5e:	4628      	mov	r0, r5
 8009f60:	f000 f906 	bl	800a170 <__swbuf_r>
 8009f64:	3001      	adds	r0, #1
 8009f66:	d011      	beq.n	8009f8c <_puts_r+0x84>
 8009f68:	250a      	movs	r5, #10
 8009f6a:	e011      	b.n	8009f90 <_puts_r+0x88>
 8009f6c:	4b1b      	ldr	r3, [pc, #108]	; (8009fdc <_puts_r+0xd4>)
 8009f6e:	429c      	cmp	r4, r3
 8009f70:	d101      	bne.n	8009f76 <_puts_r+0x6e>
 8009f72:	68ac      	ldr	r4, [r5, #8]
 8009f74:	e7da      	b.n	8009f2c <_puts_r+0x24>
 8009f76:	4b1a      	ldr	r3, [pc, #104]	; (8009fe0 <_puts_r+0xd8>)
 8009f78:	429c      	cmp	r4, r3
 8009f7a:	bf08      	it	eq
 8009f7c:	68ec      	ldreq	r4, [r5, #12]
 8009f7e:	e7d5      	b.n	8009f2c <_puts_r+0x24>
 8009f80:	4621      	mov	r1, r4
 8009f82:	4628      	mov	r0, r5
 8009f84:	f000 f958 	bl	800a238 <__swsetup_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	d0dd      	beq.n	8009f48 <_puts_r+0x40>
 8009f8c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f92:	07da      	lsls	r2, r3, #31
 8009f94:	d405      	bmi.n	8009fa2 <_puts_r+0x9a>
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	059b      	lsls	r3, r3, #22
 8009f9a:	d402      	bmi.n	8009fa2 <_puts_r+0x9a>
 8009f9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f9e:	f7ff ff07 	bl	8009db0 <__retarget_lock_release_recursive>
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	bd70      	pop	{r4, r5, r6, pc}
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	da04      	bge.n	8009fb4 <_puts_r+0xac>
 8009faa:	69a2      	ldr	r2, [r4, #24]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	dc06      	bgt.n	8009fbe <_puts_r+0xb6>
 8009fb0:	290a      	cmp	r1, #10
 8009fb2:	d004      	beq.n	8009fbe <_puts_r+0xb6>
 8009fb4:	6823      	ldr	r3, [r4, #0]
 8009fb6:	1c5a      	adds	r2, r3, #1
 8009fb8:	6022      	str	r2, [r4, #0]
 8009fba:	7019      	strb	r1, [r3, #0]
 8009fbc:	e7c5      	b.n	8009f4a <_puts_r+0x42>
 8009fbe:	4622      	mov	r2, r4
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 f8d5 	bl	800a170 <__swbuf_r>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d1bf      	bne.n	8009f4a <_puts_r+0x42>
 8009fca:	e7df      	b.n	8009f8c <_puts_r+0x84>
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	250a      	movs	r5, #10
 8009fd0:	1c5a      	adds	r2, r3, #1
 8009fd2:	6022      	str	r2, [r4, #0]
 8009fd4:	701d      	strb	r5, [r3, #0]
 8009fd6:	e7db      	b.n	8009f90 <_puts_r+0x88>
 8009fd8:	0800a8a0 	.word	0x0800a8a0
 8009fdc:	0800a8c0 	.word	0x0800a8c0
 8009fe0:	0800a880 	.word	0x0800a880

08009fe4 <puts>:
 8009fe4:	4b02      	ldr	r3, [pc, #8]	; (8009ff0 <puts+0xc>)
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	6818      	ldr	r0, [r3, #0]
 8009fea:	f7ff bf8d 	b.w	8009f08 <_puts_r>
 8009fee:	bf00      	nop
 8009ff0:	20000018 	.word	0x20000018

08009ff4 <cleanup_glue>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	460c      	mov	r4, r1
 8009ff8:	6809      	ldr	r1, [r1, #0]
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	b109      	cbz	r1, 800a002 <cleanup_glue+0xe>
 8009ffe:	f7ff fff9 	bl	8009ff4 <cleanup_glue>
 800a002:	4621      	mov	r1, r4
 800a004:	4628      	mov	r0, r5
 800a006:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a00a:	f000 bad9 	b.w	800a5c0 <_free_r>
	...

0800a010 <_reclaim_reent>:
 800a010:	4b2c      	ldr	r3, [pc, #176]	; (800a0c4 <_reclaim_reent+0xb4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4283      	cmp	r3, r0
 800a016:	b570      	push	{r4, r5, r6, lr}
 800a018:	4604      	mov	r4, r0
 800a01a:	d051      	beq.n	800a0c0 <_reclaim_reent+0xb0>
 800a01c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800a01e:	b143      	cbz	r3, 800a032 <_reclaim_reent+0x22>
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d14a      	bne.n	800a0bc <_reclaim_reent+0xac>
 800a026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	b111      	cbz	r1, 800a032 <_reclaim_reent+0x22>
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fac7 	bl	800a5c0 <_free_r>
 800a032:	6961      	ldr	r1, [r4, #20]
 800a034:	b111      	cbz	r1, 800a03c <_reclaim_reent+0x2c>
 800a036:	4620      	mov	r0, r4
 800a038:	f000 fac2 	bl	800a5c0 <_free_r>
 800a03c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a03e:	b111      	cbz	r1, 800a046 <_reclaim_reent+0x36>
 800a040:	4620      	mov	r0, r4
 800a042:	f000 fabd 	bl	800a5c0 <_free_r>
 800a046:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a048:	b111      	cbz	r1, 800a050 <_reclaim_reent+0x40>
 800a04a:	4620      	mov	r0, r4
 800a04c:	f000 fab8 	bl	800a5c0 <_free_r>
 800a050:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a052:	b111      	cbz	r1, 800a05a <_reclaim_reent+0x4a>
 800a054:	4620      	mov	r0, r4
 800a056:	f000 fab3 	bl	800a5c0 <_free_r>
 800a05a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a05c:	b111      	cbz	r1, 800a064 <_reclaim_reent+0x54>
 800a05e:	4620      	mov	r0, r4
 800a060:	f000 faae 	bl	800a5c0 <_free_r>
 800a064:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800a066:	b111      	cbz	r1, 800a06e <_reclaim_reent+0x5e>
 800a068:	4620      	mov	r0, r4
 800a06a:	f000 faa9 	bl	800a5c0 <_free_r>
 800a06e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a070:	b111      	cbz	r1, 800a078 <_reclaim_reent+0x68>
 800a072:	4620      	mov	r0, r4
 800a074:	f000 faa4 	bl	800a5c0 <_free_r>
 800a078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a07a:	b111      	cbz	r1, 800a082 <_reclaim_reent+0x72>
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fa9f 	bl	800a5c0 <_free_r>
 800a082:	69a3      	ldr	r3, [r4, #24]
 800a084:	b1e3      	cbz	r3, 800a0c0 <_reclaim_reent+0xb0>
 800a086:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a088:	4620      	mov	r0, r4
 800a08a:	4798      	blx	r3
 800a08c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a08e:	b1b9      	cbz	r1, 800a0c0 <_reclaim_reent+0xb0>
 800a090:	4620      	mov	r0, r4
 800a092:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a096:	f7ff bfad 	b.w	8009ff4 <cleanup_glue>
 800a09a:	5949      	ldr	r1, [r1, r5]
 800a09c:	b941      	cbnz	r1, 800a0b0 <_reclaim_reent+0xa0>
 800a09e:	3504      	adds	r5, #4
 800a0a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0a2:	2d80      	cmp	r5, #128	; 0x80
 800a0a4:	68d9      	ldr	r1, [r3, #12]
 800a0a6:	d1f8      	bne.n	800a09a <_reclaim_reent+0x8a>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 fa89 	bl	800a5c0 <_free_r>
 800a0ae:	e7ba      	b.n	800a026 <_reclaim_reent+0x16>
 800a0b0:	680e      	ldr	r6, [r1, #0]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 fa84 	bl	800a5c0 <_free_r>
 800a0b8:	4631      	mov	r1, r6
 800a0ba:	e7ef      	b.n	800a09c <_reclaim_reent+0x8c>
 800a0bc:	2500      	movs	r5, #0
 800a0be:	e7ef      	b.n	800a0a0 <_reclaim_reent+0x90>
 800a0c0:	bd70      	pop	{r4, r5, r6, pc}
 800a0c2:	bf00      	nop
 800a0c4:	20000018 	.word	0x20000018

0800a0c8 <_sbrk_r>:
 800a0c8:	b538      	push	{r3, r4, r5, lr}
 800a0ca:	4d06      	ldr	r5, [pc, #24]	; (800a0e4 <_sbrk_r+0x1c>)
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	4604      	mov	r4, r0
 800a0d0:	4608      	mov	r0, r1
 800a0d2:	602b      	str	r3, [r5, #0]
 800a0d4:	f7f7 fdd6 	bl	8001c84 <_sbrk>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	d102      	bne.n	800a0e2 <_sbrk_r+0x1a>
 800a0dc:	682b      	ldr	r3, [r5, #0]
 800a0de:	b103      	cbz	r3, 800a0e2 <_sbrk_r+0x1a>
 800a0e0:	6023      	str	r3, [r4, #0]
 800a0e2:	bd38      	pop	{r3, r4, r5, pc}
 800a0e4:	2000533c 	.word	0x2000533c

0800a0e8 <__sread>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f0:	f000 fab2 	bl	800a658 <_read_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	bfab      	itete	ge
 800a0f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a0fc:	181b      	addge	r3, r3, r0
 800a0fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a102:	bfac      	ite	ge
 800a104:	6563      	strge	r3, [r4, #84]	; 0x54
 800a106:	81a3      	strhlt	r3, [r4, #12]
 800a108:	bd10      	pop	{r4, pc}

0800a10a <__swrite>:
 800a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10e:	461f      	mov	r7, r3
 800a110:	898b      	ldrh	r3, [r1, #12]
 800a112:	05db      	lsls	r3, r3, #23
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	4616      	mov	r6, r2
 800a11a:	d505      	bpl.n	800a128 <__swrite+0x1e>
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	2302      	movs	r3, #2
 800a122:	2200      	movs	r2, #0
 800a124:	f000 f9c8 	bl	800a4b8 <_lseek_r>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a12e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	4628      	mov	r0, r5
 800a13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	f000 b869 	b.w	800a214 <_write_r>

0800a142 <__sseek>:
 800a142:	b510      	push	{r4, lr}
 800a144:	460c      	mov	r4, r1
 800a146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14a:	f000 f9b5 	bl	800a4b8 <_lseek_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	bf15      	itete	ne
 800a154:	6560      	strne	r0, [r4, #84]	; 0x54
 800a156:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a15a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a15e:	81a3      	strheq	r3, [r4, #12]
 800a160:	bf18      	it	ne
 800a162:	81a3      	strhne	r3, [r4, #12]
 800a164:	bd10      	pop	{r4, pc}

0800a166 <__sclose>:
 800a166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16a:	f000 b8d3 	b.w	800a314 <_close_r>
	...

0800a170 <__swbuf_r>:
 800a170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a172:	460e      	mov	r6, r1
 800a174:	4614      	mov	r4, r2
 800a176:	4605      	mov	r5, r0
 800a178:	b118      	cbz	r0, 800a182 <__swbuf_r+0x12>
 800a17a:	6983      	ldr	r3, [r0, #24]
 800a17c:	b90b      	cbnz	r3, 800a182 <__swbuf_r+0x12>
 800a17e:	f7ff fd53 	bl	8009c28 <__sinit>
 800a182:	4b21      	ldr	r3, [pc, #132]	; (800a208 <__swbuf_r+0x98>)
 800a184:	429c      	cmp	r4, r3
 800a186:	d12b      	bne.n	800a1e0 <__swbuf_r+0x70>
 800a188:	686c      	ldr	r4, [r5, #4]
 800a18a:	69a3      	ldr	r3, [r4, #24]
 800a18c:	60a3      	str	r3, [r4, #8]
 800a18e:	89a3      	ldrh	r3, [r4, #12]
 800a190:	071a      	lsls	r2, r3, #28
 800a192:	d52f      	bpl.n	800a1f4 <__swbuf_r+0x84>
 800a194:	6923      	ldr	r3, [r4, #16]
 800a196:	b36b      	cbz	r3, 800a1f4 <__swbuf_r+0x84>
 800a198:	6923      	ldr	r3, [r4, #16]
 800a19a:	6820      	ldr	r0, [r4, #0]
 800a19c:	1ac0      	subs	r0, r0, r3
 800a19e:	6963      	ldr	r3, [r4, #20]
 800a1a0:	b2f6      	uxtb	r6, r6
 800a1a2:	4283      	cmp	r3, r0
 800a1a4:	4637      	mov	r7, r6
 800a1a6:	dc04      	bgt.n	800a1b2 <__swbuf_r+0x42>
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f000 f948 	bl	800a440 <_fflush_r>
 800a1b0:	bb30      	cbnz	r0, 800a200 <__swbuf_r+0x90>
 800a1b2:	68a3      	ldr	r3, [r4, #8]
 800a1b4:	3b01      	subs	r3, #1
 800a1b6:	60a3      	str	r3, [r4, #8]
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	1c5a      	adds	r2, r3, #1
 800a1bc:	6022      	str	r2, [r4, #0]
 800a1be:	701e      	strb	r6, [r3, #0]
 800a1c0:	6963      	ldr	r3, [r4, #20]
 800a1c2:	3001      	adds	r0, #1
 800a1c4:	4283      	cmp	r3, r0
 800a1c6:	d004      	beq.n	800a1d2 <__swbuf_r+0x62>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	07db      	lsls	r3, r3, #31
 800a1cc:	d506      	bpl.n	800a1dc <__swbuf_r+0x6c>
 800a1ce:	2e0a      	cmp	r6, #10
 800a1d0:	d104      	bne.n	800a1dc <__swbuf_r+0x6c>
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f000 f933 	bl	800a440 <_fflush_r>
 800a1da:	b988      	cbnz	r0, 800a200 <__swbuf_r+0x90>
 800a1dc:	4638      	mov	r0, r7
 800a1de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e0:	4b0a      	ldr	r3, [pc, #40]	; (800a20c <__swbuf_r+0x9c>)
 800a1e2:	429c      	cmp	r4, r3
 800a1e4:	d101      	bne.n	800a1ea <__swbuf_r+0x7a>
 800a1e6:	68ac      	ldr	r4, [r5, #8]
 800a1e8:	e7cf      	b.n	800a18a <__swbuf_r+0x1a>
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <__swbuf_r+0xa0>)
 800a1ec:	429c      	cmp	r4, r3
 800a1ee:	bf08      	it	eq
 800a1f0:	68ec      	ldreq	r4, [r5, #12]
 800a1f2:	e7ca      	b.n	800a18a <__swbuf_r+0x1a>
 800a1f4:	4621      	mov	r1, r4
 800a1f6:	4628      	mov	r0, r5
 800a1f8:	f000 f81e 	bl	800a238 <__swsetup_r>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	d0cb      	beq.n	800a198 <__swbuf_r+0x28>
 800a200:	f04f 37ff 	mov.w	r7, #4294967295
 800a204:	e7ea      	b.n	800a1dc <__swbuf_r+0x6c>
 800a206:	bf00      	nop
 800a208:	0800a8a0 	.word	0x0800a8a0
 800a20c:	0800a8c0 	.word	0x0800a8c0
 800a210:	0800a880 	.word	0x0800a880

0800a214 <_write_r>:
 800a214:	b538      	push	{r3, r4, r5, lr}
 800a216:	4d07      	ldr	r5, [pc, #28]	; (800a234 <_write_r+0x20>)
 800a218:	4604      	mov	r4, r0
 800a21a:	4608      	mov	r0, r1
 800a21c:	4611      	mov	r1, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	602a      	str	r2, [r5, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	f7f7 fcdd 	bl	8001be2 <_write>
 800a228:	1c43      	adds	r3, r0, #1
 800a22a:	d102      	bne.n	800a232 <_write_r+0x1e>
 800a22c:	682b      	ldr	r3, [r5, #0]
 800a22e:	b103      	cbz	r3, 800a232 <_write_r+0x1e>
 800a230:	6023      	str	r3, [r4, #0]
 800a232:	bd38      	pop	{r3, r4, r5, pc}
 800a234:	2000533c 	.word	0x2000533c

0800a238 <__swsetup_r>:
 800a238:	4b32      	ldr	r3, [pc, #200]	; (800a304 <__swsetup_r+0xcc>)
 800a23a:	b570      	push	{r4, r5, r6, lr}
 800a23c:	681d      	ldr	r5, [r3, #0]
 800a23e:	4606      	mov	r6, r0
 800a240:	460c      	mov	r4, r1
 800a242:	b125      	cbz	r5, 800a24e <__swsetup_r+0x16>
 800a244:	69ab      	ldr	r3, [r5, #24]
 800a246:	b913      	cbnz	r3, 800a24e <__swsetup_r+0x16>
 800a248:	4628      	mov	r0, r5
 800a24a:	f7ff fced 	bl	8009c28 <__sinit>
 800a24e:	4b2e      	ldr	r3, [pc, #184]	; (800a308 <__swsetup_r+0xd0>)
 800a250:	429c      	cmp	r4, r3
 800a252:	d10f      	bne.n	800a274 <__swsetup_r+0x3c>
 800a254:	686c      	ldr	r4, [r5, #4]
 800a256:	89a3      	ldrh	r3, [r4, #12]
 800a258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a25c:	0719      	lsls	r1, r3, #28
 800a25e:	d42c      	bmi.n	800a2ba <__swsetup_r+0x82>
 800a260:	06dd      	lsls	r5, r3, #27
 800a262:	d411      	bmi.n	800a288 <__swsetup_r+0x50>
 800a264:	2309      	movs	r3, #9
 800a266:	6033      	str	r3, [r6, #0]
 800a268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a26c:	81a3      	strh	r3, [r4, #12]
 800a26e:	f04f 30ff 	mov.w	r0, #4294967295
 800a272:	e03e      	b.n	800a2f2 <__swsetup_r+0xba>
 800a274:	4b25      	ldr	r3, [pc, #148]	; (800a30c <__swsetup_r+0xd4>)
 800a276:	429c      	cmp	r4, r3
 800a278:	d101      	bne.n	800a27e <__swsetup_r+0x46>
 800a27a:	68ac      	ldr	r4, [r5, #8]
 800a27c:	e7eb      	b.n	800a256 <__swsetup_r+0x1e>
 800a27e:	4b24      	ldr	r3, [pc, #144]	; (800a310 <__swsetup_r+0xd8>)
 800a280:	429c      	cmp	r4, r3
 800a282:	bf08      	it	eq
 800a284:	68ec      	ldreq	r4, [r5, #12]
 800a286:	e7e6      	b.n	800a256 <__swsetup_r+0x1e>
 800a288:	0758      	lsls	r0, r3, #29
 800a28a:	d512      	bpl.n	800a2b2 <__swsetup_r+0x7a>
 800a28c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a28e:	b141      	cbz	r1, 800a2a2 <__swsetup_r+0x6a>
 800a290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a294:	4299      	cmp	r1, r3
 800a296:	d002      	beq.n	800a29e <__swsetup_r+0x66>
 800a298:	4630      	mov	r0, r6
 800a29a:	f000 f991 	bl	800a5c0 <_free_r>
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6363      	str	r3, [r4, #52]	; 0x34
 800a2a2:	89a3      	ldrh	r3, [r4, #12]
 800a2a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a2a8:	81a3      	strh	r3, [r4, #12]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	6063      	str	r3, [r4, #4]
 800a2ae:	6923      	ldr	r3, [r4, #16]
 800a2b0:	6023      	str	r3, [r4, #0]
 800a2b2:	89a3      	ldrh	r3, [r4, #12]
 800a2b4:	f043 0308 	orr.w	r3, r3, #8
 800a2b8:	81a3      	strh	r3, [r4, #12]
 800a2ba:	6923      	ldr	r3, [r4, #16]
 800a2bc:	b94b      	cbnz	r3, 800a2d2 <__swsetup_r+0x9a>
 800a2be:	89a3      	ldrh	r3, [r4, #12]
 800a2c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a2c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2c8:	d003      	beq.n	800a2d2 <__swsetup_r+0x9a>
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	f000 f92b 	bl	800a528 <__smakebuf_r>
 800a2d2:	89a0      	ldrh	r0, [r4, #12]
 800a2d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2d8:	f010 0301 	ands.w	r3, r0, #1
 800a2dc:	d00a      	beq.n	800a2f4 <__swsetup_r+0xbc>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	60a3      	str	r3, [r4, #8]
 800a2e2:	6963      	ldr	r3, [r4, #20]
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	61a3      	str	r3, [r4, #24]
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	b943      	cbnz	r3, 800a2fe <__swsetup_r+0xc6>
 800a2ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a2f0:	d1ba      	bne.n	800a268 <__swsetup_r+0x30>
 800a2f2:	bd70      	pop	{r4, r5, r6, pc}
 800a2f4:	0781      	lsls	r1, r0, #30
 800a2f6:	bf58      	it	pl
 800a2f8:	6963      	ldrpl	r3, [r4, #20]
 800a2fa:	60a3      	str	r3, [r4, #8]
 800a2fc:	e7f4      	b.n	800a2e8 <__swsetup_r+0xb0>
 800a2fe:	2000      	movs	r0, #0
 800a300:	e7f7      	b.n	800a2f2 <__swsetup_r+0xba>
 800a302:	bf00      	nop
 800a304:	20000018 	.word	0x20000018
 800a308:	0800a8a0 	.word	0x0800a8a0
 800a30c:	0800a8c0 	.word	0x0800a8c0
 800a310:	0800a880 	.word	0x0800a880

0800a314 <_close_r>:
 800a314:	b538      	push	{r3, r4, r5, lr}
 800a316:	4d06      	ldr	r5, [pc, #24]	; (800a330 <_close_r+0x1c>)
 800a318:	2300      	movs	r3, #0
 800a31a:	4604      	mov	r4, r0
 800a31c:	4608      	mov	r0, r1
 800a31e:	602b      	str	r3, [r5, #0]
 800a320:	f7f7 fc7b 	bl	8001c1a <_close>
 800a324:	1c43      	adds	r3, r0, #1
 800a326:	d102      	bne.n	800a32e <_close_r+0x1a>
 800a328:	682b      	ldr	r3, [r5, #0]
 800a32a:	b103      	cbz	r3, 800a32e <_close_r+0x1a>
 800a32c:	6023      	str	r3, [r4, #0]
 800a32e:	bd38      	pop	{r3, r4, r5, pc}
 800a330:	2000533c 	.word	0x2000533c

0800a334 <__sflush_r>:
 800a334:	898a      	ldrh	r2, [r1, #12]
 800a336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a33a:	4605      	mov	r5, r0
 800a33c:	0710      	lsls	r0, r2, #28
 800a33e:	460c      	mov	r4, r1
 800a340:	d458      	bmi.n	800a3f4 <__sflush_r+0xc0>
 800a342:	684b      	ldr	r3, [r1, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	dc05      	bgt.n	800a354 <__sflush_r+0x20>
 800a348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	dc02      	bgt.n	800a354 <__sflush_r+0x20>
 800a34e:	2000      	movs	r0, #0
 800a350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a356:	2e00      	cmp	r6, #0
 800a358:	d0f9      	beq.n	800a34e <__sflush_r+0x1a>
 800a35a:	2300      	movs	r3, #0
 800a35c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a360:	682f      	ldr	r7, [r5, #0]
 800a362:	602b      	str	r3, [r5, #0]
 800a364:	d032      	beq.n	800a3cc <__sflush_r+0x98>
 800a366:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a368:	89a3      	ldrh	r3, [r4, #12]
 800a36a:	075a      	lsls	r2, r3, #29
 800a36c:	d505      	bpl.n	800a37a <__sflush_r+0x46>
 800a36e:	6863      	ldr	r3, [r4, #4]
 800a370:	1ac0      	subs	r0, r0, r3
 800a372:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a374:	b10b      	cbz	r3, 800a37a <__sflush_r+0x46>
 800a376:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a378:	1ac0      	subs	r0, r0, r3
 800a37a:	2300      	movs	r3, #0
 800a37c:	4602      	mov	r2, r0
 800a37e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a380:	6a21      	ldr	r1, [r4, #32]
 800a382:	4628      	mov	r0, r5
 800a384:	47b0      	blx	r6
 800a386:	1c43      	adds	r3, r0, #1
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	d106      	bne.n	800a39a <__sflush_r+0x66>
 800a38c:	6829      	ldr	r1, [r5, #0]
 800a38e:	291d      	cmp	r1, #29
 800a390:	d82c      	bhi.n	800a3ec <__sflush_r+0xb8>
 800a392:	4a2a      	ldr	r2, [pc, #168]	; (800a43c <__sflush_r+0x108>)
 800a394:	40ca      	lsrs	r2, r1
 800a396:	07d6      	lsls	r6, r2, #31
 800a398:	d528      	bpl.n	800a3ec <__sflush_r+0xb8>
 800a39a:	2200      	movs	r2, #0
 800a39c:	6062      	str	r2, [r4, #4]
 800a39e:	04d9      	lsls	r1, r3, #19
 800a3a0:	6922      	ldr	r2, [r4, #16]
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	d504      	bpl.n	800a3b0 <__sflush_r+0x7c>
 800a3a6:	1c42      	adds	r2, r0, #1
 800a3a8:	d101      	bne.n	800a3ae <__sflush_r+0x7a>
 800a3aa:	682b      	ldr	r3, [r5, #0]
 800a3ac:	b903      	cbnz	r3, 800a3b0 <__sflush_r+0x7c>
 800a3ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a3b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3b2:	602f      	str	r7, [r5, #0]
 800a3b4:	2900      	cmp	r1, #0
 800a3b6:	d0ca      	beq.n	800a34e <__sflush_r+0x1a>
 800a3b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3bc:	4299      	cmp	r1, r3
 800a3be:	d002      	beq.n	800a3c6 <__sflush_r+0x92>
 800a3c0:	4628      	mov	r0, r5
 800a3c2:	f000 f8fd 	bl	800a5c0 <_free_r>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a3ca:	e7c1      	b.n	800a350 <__sflush_r+0x1c>
 800a3cc:	6a21      	ldr	r1, [r4, #32]
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b0      	blx	r6
 800a3d4:	1c41      	adds	r1, r0, #1
 800a3d6:	d1c7      	bne.n	800a368 <__sflush_r+0x34>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d0c4      	beq.n	800a368 <__sflush_r+0x34>
 800a3de:	2b1d      	cmp	r3, #29
 800a3e0:	d001      	beq.n	800a3e6 <__sflush_r+0xb2>
 800a3e2:	2b16      	cmp	r3, #22
 800a3e4:	d101      	bne.n	800a3ea <__sflush_r+0xb6>
 800a3e6:	602f      	str	r7, [r5, #0]
 800a3e8:	e7b1      	b.n	800a34e <__sflush_r+0x1a>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	e7ad      	b.n	800a350 <__sflush_r+0x1c>
 800a3f4:	690f      	ldr	r7, [r1, #16]
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	d0a9      	beq.n	800a34e <__sflush_r+0x1a>
 800a3fa:	0793      	lsls	r3, r2, #30
 800a3fc:	680e      	ldr	r6, [r1, #0]
 800a3fe:	bf08      	it	eq
 800a400:	694b      	ldreq	r3, [r1, #20]
 800a402:	600f      	str	r7, [r1, #0]
 800a404:	bf18      	it	ne
 800a406:	2300      	movne	r3, #0
 800a408:	eba6 0807 	sub.w	r8, r6, r7
 800a40c:	608b      	str	r3, [r1, #8]
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	dd9c      	ble.n	800a34e <__sflush_r+0x1a>
 800a414:	6a21      	ldr	r1, [r4, #32]
 800a416:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a418:	4643      	mov	r3, r8
 800a41a:	463a      	mov	r2, r7
 800a41c:	4628      	mov	r0, r5
 800a41e:	47b0      	blx	r6
 800a420:	2800      	cmp	r0, #0
 800a422:	dc06      	bgt.n	800a432 <__sflush_r+0xfe>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a42a:	81a3      	strh	r3, [r4, #12]
 800a42c:	f04f 30ff 	mov.w	r0, #4294967295
 800a430:	e78e      	b.n	800a350 <__sflush_r+0x1c>
 800a432:	4407      	add	r7, r0
 800a434:	eba8 0800 	sub.w	r8, r8, r0
 800a438:	e7e9      	b.n	800a40e <__sflush_r+0xda>
 800a43a:	bf00      	nop
 800a43c:	20400001 	.word	0x20400001

0800a440 <_fflush_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	690b      	ldr	r3, [r1, #16]
 800a444:	4605      	mov	r5, r0
 800a446:	460c      	mov	r4, r1
 800a448:	b913      	cbnz	r3, 800a450 <_fflush_r+0x10>
 800a44a:	2500      	movs	r5, #0
 800a44c:	4628      	mov	r0, r5
 800a44e:	bd38      	pop	{r3, r4, r5, pc}
 800a450:	b118      	cbz	r0, 800a45a <_fflush_r+0x1a>
 800a452:	6983      	ldr	r3, [r0, #24]
 800a454:	b90b      	cbnz	r3, 800a45a <_fflush_r+0x1a>
 800a456:	f7ff fbe7 	bl	8009c28 <__sinit>
 800a45a:	4b14      	ldr	r3, [pc, #80]	; (800a4ac <_fflush_r+0x6c>)
 800a45c:	429c      	cmp	r4, r3
 800a45e:	d11b      	bne.n	800a498 <_fflush_r+0x58>
 800a460:	686c      	ldr	r4, [r5, #4]
 800a462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d0ef      	beq.n	800a44a <_fflush_r+0xa>
 800a46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a46c:	07d0      	lsls	r0, r2, #31
 800a46e:	d404      	bmi.n	800a47a <_fflush_r+0x3a>
 800a470:	0599      	lsls	r1, r3, #22
 800a472:	d402      	bmi.n	800a47a <_fflush_r+0x3a>
 800a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a476:	f7ff fc9a 	bl	8009dae <__retarget_lock_acquire_recursive>
 800a47a:	4628      	mov	r0, r5
 800a47c:	4621      	mov	r1, r4
 800a47e:	f7ff ff59 	bl	800a334 <__sflush_r>
 800a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a484:	07da      	lsls	r2, r3, #31
 800a486:	4605      	mov	r5, r0
 800a488:	d4e0      	bmi.n	800a44c <_fflush_r+0xc>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	059b      	lsls	r3, r3, #22
 800a48e:	d4dd      	bmi.n	800a44c <_fflush_r+0xc>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f7ff fc8d 	bl	8009db0 <__retarget_lock_release_recursive>
 800a496:	e7d9      	b.n	800a44c <_fflush_r+0xc>
 800a498:	4b05      	ldr	r3, [pc, #20]	; (800a4b0 <_fflush_r+0x70>)
 800a49a:	429c      	cmp	r4, r3
 800a49c:	d101      	bne.n	800a4a2 <_fflush_r+0x62>
 800a49e:	68ac      	ldr	r4, [r5, #8]
 800a4a0:	e7df      	b.n	800a462 <_fflush_r+0x22>
 800a4a2:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <_fflush_r+0x74>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	bf08      	it	eq
 800a4a8:	68ec      	ldreq	r4, [r5, #12]
 800a4aa:	e7da      	b.n	800a462 <_fflush_r+0x22>
 800a4ac:	0800a8a0 	.word	0x0800a8a0
 800a4b0:	0800a8c0 	.word	0x0800a8c0
 800a4b4:	0800a880 	.word	0x0800a880

0800a4b8 <_lseek_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d07      	ldr	r5, [pc, #28]	; (800a4d8 <_lseek_r+0x20>)
 800a4bc:	4604      	mov	r4, r0
 800a4be:	4608      	mov	r0, r1
 800a4c0:	4611      	mov	r1, r2
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	602a      	str	r2, [r5, #0]
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	f7f7 fbce 	bl	8001c68 <_lseek>
 800a4cc:	1c43      	adds	r3, r0, #1
 800a4ce:	d102      	bne.n	800a4d6 <_lseek_r+0x1e>
 800a4d0:	682b      	ldr	r3, [r5, #0]
 800a4d2:	b103      	cbz	r3, 800a4d6 <_lseek_r+0x1e>
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	bd38      	pop	{r3, r4, r5, pc}
 800a4d8:	2000533c 	.word	0x2000533c

0800a4dc <__swhatbuf_r>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	460e      	mov	r6, r1
 800a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e4:	2900      	cmp	r1, #0
 800a4e6:	b096      	sub	sp, #88	; 0x58
 800a4e8:	4614      	mov	r4, r2
 800a4ea:	461d      	mov	r5, r3
 800a4ec:	da08      	bge.n	800a500 <__swhatbuf_r+0x24>
 800a4ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	602a      	str	r2, [r5, #0]
 800a4f6:	061a      	lsls	r2, r3, #24
 800a4f8:	d410      	bmi.n	800a51c <__swhatbuf_r+0x40>
 800a4fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4fe:	e00e      	b.n	800a51e <__swhatbuf_r+0x42>
 800a500:	466a      	mov	r2, sp
 800a502:	f000 f8bb 	bl	800a67c <_fstat_r>
 800a506:	2800      	cmp	r0, #0
 800a508:	dbf1      	blt.n	800a4ee <__swhatbuf_r+0x12>
 800a50a:	9a01      	ldr	r2, [sp, #4]
 800a50c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a510:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a514:	425a      	negs	r2, r3
 800a516:	415a      	adcs	r2, r3
 800a518:	602a      	str	r2, [r5, #0]
 800a51a:	e7ee      	b.n	800a4fa <__swhatbuf_r+0x1e>
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	2000      	movs	r0, #0
 800a520:	6023      	str	r3, [r4, #0]
 800a522:	b016      	add	sp, #88	; 0x58
 800a524:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a528 <__smakebuf_r>:
 800a528:	898b      	ldrh	r3, [r1, #12]
 800a52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a52c:	079d      	lsls	r5, r3, #30
 800a52e:	4606      	mov	r6, r0
 800a530:	460c      	mov	r4, r1
 800a532:	d507      	bpl.n	800a544 <__smakebuf_r+0x1c>
 800a534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a538:	6023      	str	r3, [r4, #0]
 800a53a:	6123      	str	r3, [r4, #16]
 800a53c:	2301      	movs	r3, #1
 800a53e:	6163      	str	r3, [r4, #20]
 800a540:	b002      	add	sp, #8
 800a542:	bd70      	pop	{r4, r5, r6, pc}
 800a544:	ab01      	add	r3, sp, #4
 800a546:	466a      	mov	r2, sp
 800a548:	f7ff ffc8 	bl	800a4dc <__swhatbuf_r>
 800a54c:	9900      	ldr	r1, [sp, #0]
 800a54e:	4605      	mov	r5, r0
 800a550:	4630      	mov	r0, r6
 800a552:	f7ff fc65 	bl	8009e20 <_malloc_r>
 800a556:	b948      	cbnz	r0, 800a56c <__smakebuf_r+0x44>
 800a558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a55c:	059a      	lsls	r2, r3, #22
 800a55e:	d4ef      	bmi.n	800a540 <__smakebuf_r+0x18>
 800a560:	f023 0303 	bic.w	r3, r3, #3
 800a564:	f043 0302 	orr.w	r3, r3, #2
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	e7e3      	b.n	800a534 <__smakebuf_r+0xc>
 800a56c:	4b0d      	ldr	r3, [pc, #52]	; (800a5a4 <__smakebuf_r+0x7c>)
 800a56e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	6020      	str	r0, [r4, #0]
 800a574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a578:	81a3      	strh	r3, [r4, #12]
 800a57a:	9b00      	ldr	r3, [sp, #0]
 800a57c:	6163      	str	r3, [r4, #20]
 800a57e:	9b01      	ldr	r3, [sp, #4]
 800a580:	6120      	str	r0, [r4, #16]
 800a582:	b15b      	cbz	r3, 800a59c <__smakebuf_r+0x74>
 800a584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a588:	4630      	mov	r0, r6
 800a58a:	f000 f889 	bl	800a6a0 <_isatty_r>
 800a58e:	b128      	cbz	r0, 800a59c <__smakebuf_r+0x74>
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	f023 0303 	bic.w	r3, r3, #3
 800a596:	f043 0301 	orr.w	r3, r3, #1
 800a59a:	81a3      	strh	r3, [r4, #12]
 800a59c:	89a0      	ldrh	r0, [r4, #12]
 800a59e:	4305      	orrs	r5, r0
 800a5a0:	81a5      	strh	r5, [r4, #12]
 800a5a2:	e7cd      	b.n	800a540 <__smakebuf_r+0x18>
 800a5a4:	08009bc1 	.word	0x08009bc1

0800a5a8 <__malloc_lock>:
 800a5a8:	4801      	ldr	r0, [pc, #4]	; (800a5b0 <__malloc_lock+0x8>)
 800a5aa:	f7ff bc00 	b.w	8009dae <__retarget_lock_acquire_recursive>
 800a5ae:	bf00      	nop
 800a5b0:	20005330 	.word	0x20005330

0800a5b4 <__malloc_unlock>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__malloc_unlock+0x8>)
 800a5b6:	f7ff bbfb 	b.w	8009db0 <__retarget_lock_release_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	20005330 	.word	0x20005330

0800a5c0 <_free_r>:
 800a5c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5c2:	2900      	cmp	r1, #0
 800a5c4:	d044      	beq.n	800a650 <_free_r+0x90>
 800a5c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ca:	9001      	str	r0, [sp, #4]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a5d2:	bfb8      	it	lt
 800a5d4:	18e4      	addlt	r4, r4, r3
 800a5d6:	f7ff ffe7 	bl	800a5a8 <__malloc_lock>
 800a5da:	4a1e      	ldr	r2, [pc, #120]	; (800a654 <_free_r+0x94>)
 800a5dc:	9801      	ldr	r0, [sp, #4]
 800a5de:	6813      	ldr	r3, [r2, #0]
 800a5e0:	b933      	cbnz	r3, 800a5f0 <_free_r+0x30>
 800a5e2:	6063      	str	r3, [r4, #4]
 800a5e4:	6014      	str	r4, [r2, #0]
 800a5e6:	b003      	add	sp, #12
 800a5e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a5ec:	f7ff bfe2 	b.w	800a5b4 <__malloc_unlock>
 800a5f0:	42a3      	cmp	r3, r4
 800a5f2:	d908      	bls.n	800a606 <_free_r+0x46>
 800a5f4:	6825      	ldr	r5, [r4, #0]
 800a5f6:	1961      	adds	r1, r4, r5
 800a5f8:	428b      	cmp	r3, r1
 800a5fa:	bf01      	itttt	eq
 800a5fc:	6819      	ldreq	r1, [r3, #0]
 800a5fe:	685b      	ldreq	r3, [r3, #4]
 800a600:	1949      	addeq	r1, r1, r5
 800a602:	6021      	streq	r1, [r4, #0]
 800a604:	e7ed      	b.n	800a5e2 <_free_r+0x22>
 800a606:	461a      	mov	r2, r3
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	b10b      	cbz	r3, 800a610 <_free_r+0x50>
 800a60c:	42a3      	cmp	r3, r4
 800a60e:	d9fa      	bls.n	800a606 <_free_r+0x46>
 800a610:	6811      	ldr	r1, [r2, #0]
 800a612:	1855      	adds	r5, r2, r1
 800a614:	42a5      	cmp	r5, r4
 800a616:	d10b      	bne.n	800a630 <_free_r+0x70>
 800a618:	6824      	ldr	r4, [r4, #0]
 800a61a:	4421      	add	r1, r4
 800a61c:	1854      	adds	r4, r2, r1
 800a61e:	42a3      	cmp	r3, r4
 800a620:	6011      	str	r1, [r2, #0]
 800a622:	d1e0      	bne.n	800a5e6 <_free_r+0x26>
 800a624:	681c      	ldr	r4, [r3, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	6053      	str	r3, [r2, #4]
 800a62a:	4421      	add	r1, r4
 800a62c:	6011      	str	r1, [r2, #0]
 800a62e:	e7da      	b.n	800a5e6 <_free_r+0x26>
 800a630:	d902      	bls.n	800a638 <_free_r+0x78>
 800a632:	230c      	movs	r3, #12
 800a634:	6003      	str	r3, [r0, #0]
 800a636:	e7d6      	b.n	800a5e6 <_free_r+0x26>
 800a638:	6825      	ldr	r5, [r4, #0]
 800a63a:	1961      	adds	r1, r4, r5
 800a63c:	428b      	cmp	r3, r1
 800a63e:	bf04      	itt	eq
 800a640:	6819      	ldreq	r1, [r3, #0]
 800a642:	685b      	ldreq	r3, [r3, #4]
 800a644:	6063      	str	r3, [r4, #4]
 800a646:	bf04      	itt	eq
 800a648:	1949      	addeq	r1, r1, r5
 800a64a:	6021      	streq	r1, [r4, #0]
 800a64c:	6054      	str	r4, [r2, #4]
 800a64e:	e7ca      	b.n	800a5e6 <_free_r+0x26>
 800a650:	b003      	add	sp, #12
 800a652:	bd30      	pop	{r4, r5, pc}
 800a654:	20005334 	.word	0x20005334

0800a658 <_read_r>:
 800a658:	b538      	push	{r3, r4, r5, lr}
 800a65a:	4d07      	ldr	r5, [pc, #28]	; (800a678 <_read_r+0x20>)
 800a65c:	4604      	mov	r4, r0
 800a65e:	4608      	mov	r0, r1
 800a660:	4611      	mov	r1, r2
 800a662:	2200      	movs	r2, #0
 800a664:	602a      	str	r2, [r5, #0]
 800a666:	461a      	mov	r2, r3
 800a668:	f7f7 fa9e 	bl	8001ba8 <_read>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_read_r+0x1e>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_read_r+0x1e>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	2000533c 	.word	0x2000533c

0800a67c <_fstat_r>:
 800a67c:	b538      	push	{r3, r4, r5, lr}
 800a67e:	4d07      	ldr	r5, [pc, #28]	; (800a69c <_fstat_r+0x20>)
 800a680:	2300      	movs	r3, #0
 800a682:	4604      	mov	r4, r0
 800a684:	4608      	mov	r0, r1
 800a686:	4611      	mov	r1, r2
 800a688:	602b      	str	r3, [r5, #0]
 800a68a:	f7f7 fad2 	bl	8001c32 <_fstat>
 800a68e:	1c43      	adds	r3, r0, #1
 800a690:	d102      	bne.n	800a698 <_fstat_r+0x1c>
 800a692:	682b      	ldr	r3, [r5, #0]
 800a694:	b103      	cbz	r3, 800a698 <_fstat_r+0x1c>
 800a696:	6023      	str	r3, [r4, #0]
 800a698:	bd38      	pop	{r3, r4, r5, pc}
 800a69a:	bf00      	nop
 800a69c:	2000533c 	.word	0x2000533c

0800a6a0 <_isatty_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d06      	ldr	r5, [pc, #24]	; (800a6bc <_isatty_r+0x1c>)
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	4608      	mov	r0, r1
 800a6aa:	602b      	str	r3, [r5, #0]
 800a6ac:	f7f7 fad1 	bl	8001c52 <_isatty>
 800a6b0:	1c43      	adds	r3, r0, #1
 800a6b2:	d102      	bne.n	800a6ba <_isatty_r+0x1a>
 800a6b4:	682b      	ldr	r3, [r5, #0]
 800a6b6:	b103      	cbz	r3, 800a6ba <_isatty_r+0x1a>
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	bd38      	pop	{r3, r4, r5, pc}
 800a6bc:	2000533c 	.word	0x2000533c

0800a6c0 <_init>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr

0800a6cc <_fini>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	bf00      	nop
 800a6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d2:	bc08      	pop	{r3}
 800a6d4:	469e      	mov	lr, r3
 800a6d6:	4770      	bx	lr
